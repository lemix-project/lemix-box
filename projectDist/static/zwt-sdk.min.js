/******/ (function(modules) { // webpackBootstrap
/******/ 	function hotDisposeChunk(chunkId) {
/******/ 		delete installedChunks[chunkId];
/******/ 	}
/******/ 	var parentHotUpdateCallback = window["webpackHotUpdate"];
/******/ 	window["webpackHotUpdate"] = // eslint-disable-next-line no-unused-vars
/******/ 	function webpackHotUpdateCallback(chunkId, moreModules) {
/******/ 		hotAddUpdateChunk(chunkId, moreModules);
/******/ 		if (parentHotUpdateCallback) parentHotUpdateCallback(chunkId, moreModules);
/******/ 	} ;
/******/
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	function hotDownloadUpdateChunk(chunkId) {
/******/ 		var head = document.getElementsByTagName("head")[0];
/******/ 		var script = document.createElement("script");
/******/ 		script.charset = "utf-8";
/******/ 		script.src = __webpack_require__.p + "" + chunkId + "." + hotCurrentHash + ".hot-update.js";
/******/ 		;
/******/ 		head.appendChild(script);
/******/ 	}
/******/
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	function hotDownloadManifest(requestTimeout) {
/******/ 		requestTimeout = requestTimeout || 10000;
/******/ 		return new Promise(function(resolve, reject) {
/******/ 			if (typeof XMLHttpRequest === "undefined") {
/******/ 				return reject(new Error("No browser support"));
/******/ 			}
/******/ 			try {
/******/ 				var request = new XMLHttpRequest();
/******/ 				var requestPath = __webpack_require__.p + "" + hotCurrentHash + ".hot-update.json";
/******/ 				request.open("GET", requestPath, true);
/******/ 				request.timeout = requestTimeout;
/******/ 				request.send(null);
/******/ 			} catch (err) {
/******/ 				return reject(err);
/******/ 			}
/******/ 			request.onreadystatechange = function() {
/******/ 				if (request.readyState !== 4) return;
/******/ 				if (request.status === 0) {
/******/ 					// timeout
/******/ 					reject(
/******/ 						new Error("Manifest request to " + requestPath + " timed out.")
/******/ 					);
/******/ 				} else if (request.status === 404) {
/******/ 					// no update available
/******/ 					resolve();
/******/ 				} else if (request.status !== 200 && request.status !== 304) {
/******/ 					// other failure
/******/ 					reject(new Error("Manifest request to " + requestPath + " failed."));
/******/ 				} else {
/******/ 					// success
/******/ 					try {
/******/ 						var update = JSON.parse(request.responseText);
/******/ 					} catch (e) {
/******/ 						reject(e);
/******/ 						return;
/******/ 					}
/******/ 					resolve(update);
/******/ 				}
/******/ 			};
/******/ 		});
/******/ 	}
/******/
/******/ 	var hotApplyOnUpdate = true;
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	var hotCurrentHash = "31fba81f8ca7c95bf293";
/******/ 	var hotRequestTimeout = 10000;
/******/ 	var hotCurrentModuleData = {};
/******/ 	var hotCurrentChildModule;
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	var hotCurrentParents = [];
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	var hotCurrentParentsTemp = [];
/******/
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	function hotCreateRequire(moduleId) {
/******/ 		var me = installedModules[moduleId];
/******/ 		if (!me) return __webpack_require__;
/******/ 		var fn = function(request) {
/******/ 			if (me.hot.active) {
/******/ 				if (installedModules[request]) {
/******/ 					if (installedModules[request].parents.indexOf(moduleId) === -1) {
/******/ 						installedModules[request].parents.push(moduleId);
/******/ 					}
/******/ 				} else {
/******/ 					hotCurrentParents = [moduleId];
/******/ 					hotCurrentChildModule = request;
/******/ 				}
/******/ 				if (me.children.indexOf(request) === -1) {
/******/ 					me.children.push(request);
/******/ 				}
/******/ 			} else {
/******/ 				console.warn(
/******/ 					"[HMR] unexpected require(" +
/******/ 						request +
/******/ 						") from disposed module " +
/******/ 						moduleId
/******/ 				);
/******/ 				hotCurrentParents = [];
/******/ 			}
/******/ 			return __webpack_require__(request);
/******/ 		};
/******/ 		var ObjectFactory = function ObjectFactory(name) {
/******/ 			return {
/******/ 				configurable: true,
/******/ 				enumerable: true,
/******/ 				get: function() {
/******/ 					return __webpack_require__[name];
/******/ 				},
/******/ 				set: function(value) {
/******/ 					__webpack_require__[name] = value;
/******/ 				}
/******/ 			};
/******/ 		};
/******/ 		for (var name in __webpack_require__) {
/******/ 			if (
/******/ 				Object.prototype.hasOwnProperty.call(__webpack_require__, name) &&
/******/ 				name !== "e" &&
/******/ 				name !== "t"
/******/ 			) {
/******/ 				Object.defineProperty(fn, name, ObjectFactory(name));
/******/ 			}
/******/ 		}
/******/ 		fn.e = function(chunkId) {
/******/ 			if (hotStatus === "ready") hotSetStatus("prepare");
/******/ 			hotChunksLoading++;
/******/ 			return __webpack_require__.e(chunkId).then(finishChunkLoading, function(err) {
/******/ 				finishChunkLoading();
/******/ 				throw err;
/******/ 			});
/******/
/******/ 			function finishChunkLoading() {
/******/ 				hotChunksLoading--;
/******/ 				if (hotStatus === "prepare") {
/******/ 					if (!hotWaitingFilesMap[chunkId]) {
/******/ 						hotEnsureUpdateChunk(chunkId);
/******/ 					}
/******/ 					if (hotChunksLoading === 0 && hotWaitingFiles === 0) {
/******/ 						hotUpdateDownloaded();
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 		fn.t = function(value, mode) {
/******/ 			if (mode & 1) value = fn(value);
/******/ 			return __webpack_require__.t(value, mode & ~1);
/******/ 		};
/******/ 		return fn;
/******/ 	}
/******/
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	function hotCreateModule(moduleId) {
/******/ 		var hot = {
/******/ 			// private stuff
/******/ 			_acceptedDependencies: {},
/******/ 			_declinedDependencies: {},
/******/ 			_selfAccepted: false,
/******/ 			_selfDeclined: false,
/******/ 			_disposeHandlers: [],
/******/ 			_main: hotCurrentChildModule !== moduleId,
/******/
/******/ 			// Module API
/******/ 			active: true,
/******/ 			accept: function(dep, callback) {
/******/ 				if (dep === undefined) hot._selfAccepted = true;
/******/ 				else if (typeof dep === "function") hot._selfAccepted = dep;
/******/ 				else if (typeof dep === "object")
/******/ 					for (var i = 0; i < dep.length; i++)
/******/ 						hot._acceptedDependencies[dep[i]] = callback || function() {};
/******/ 				else hot._acceptedDependencies[dep] = callback || function() {};
/******/ 			},
/******/ 			decline: function(dep) {
/******/ 				if (dep === undefined) hot._selfDeclined = true;
/******/ 				else if (typeof dep === "object")
/******/ 					for (var i = 0; i < dep.length; i++)
/******/ 						hot._declinedDependencies[dep[i]] = true;
/******/ 				else hot._declinedDependencies[dep] = true;
/******/ 			},
/******/ 			dispose: function(callback) {
/******/ 				hot._disposeHandlers.push(callback);
/******/ 			},
/******/ 			addDisposeHandler: function(callback) {
/******/ 				hot._disposeHandlers.push(callback);
/******/ 			},
/******/ 			removeDisposeHandler: function(callback) {
/******/ 				var idx = hot._disposeHandlers.indexOf(callback);
/******/ 				if (idx >= 0) hot._disposeHandlers.splice(idx, 1);
/******/ 			},
/******/
/******/ 			// Management API
/******/ 			check: hotCheck,
/******/ 			apply: hotApply,
/******/ 			status: function(l) {
/******/ 				if (!l) return hotStatus;
/******/ 				hotStatusHandlers.push(l);
/******/ 			},
/******/ 			addStatusHandler: function(l) {
/******/ 				hotStatusHandlers.push(l);
/******/ 			},
/******/ 			removeStatusHandler: function(l) {
/******/ 				var idx = hotStatusHandlers.indexOf(l);
/******/ 				if (idx >= 0) hotStatusHandlers.splice(idx, 1);
/******/ 			},
/******/
/******/ 			//inherit from previous dispose call
/******/ 			data: hotCurrentModuleData[moduleId]
/******/ 		};
/******/ 		hotCurrentChildModule = undefined;
/******/ 		return hot;
/******/ 	}
/******/
/******/ 	var hotStatusHandlers = [];
/******/ 	var hotStatus = "idle";
/******/
/******/ 	function hotSetStatus(newStatus) {
/******/ 		hotStatus = newStatus;
/******/ 		for (var i = 0; i < hotStatusHandlers.length; i++)
/******/ 			hotStatusHandlers[i].call(null, newStatus);
/******/ 	}
/******/
/******/ 	// while downloading
/******/ 	var hotWaitingFiles = 0;
/******/ 	var hotChunksLoading = 0;
/******/ 	var hotWaitingFilesMap = {};
/******/ 	var hotRequestedFilesMap = {};
/******/ 	var hotAvailableFilesMap = {};
/******/ 	var hotDeferred;
/******/
/******/ 	// The update info
/******/ 	var hotUpdate, hotUpdateNewHash;
/******/
/******/ 	function toModuleId(id) {
/******/ 		var isNumber = +id + "" === id;
/******/ 		return isNumber ? +id : id;
/******/ 	}
/******/
/******/ 	function hotCheck(apply) {
/******/ 		if (hotStatus !== "idle") {
/******/ 			throw new Error("check() is only allowed in idle status");
/******/ 		}
/******/ 		hotApplyOnUpdate = apply;
/******/ 		hotSetStatus("check");
/******/ 		return hotDownloadManifest(hotRequestTimeout).then(function(update) {
/******/ 			if (!update) {
/******/ 				hotSetStatus("idle");
/******/ 				return null;
/******/ 			}
/******/ 			hotRequestedFilesMap = {};
/******/ 			hotWaitingFilesMap = {};
/******/ 			hotAvailableFilesMap = update.c;
/******/ 			hotUpdateNewHash = update.h;
/******/
/******/ 			hotSetStatus("prepare");
/******/ 			var promise = new Promise(function(resolve, reject) {
/******/ 				hotDeferred = {
/******/ 					resolve: resolve,
/******/ 					reject: reject
/******/ 				};
/******/ 			});
/******/ 			hotUpdate = {};
/******/ 			var chunkId = "main";
/******/ 			// eslint-disable-next-line no-lone-blocks
/******/ 			{
/******/ 				/*globals chunkId */
/******/ 				hotEnsureUpdateChunk(chunkId);
/******/ 			}
/******/ 			if (
/******/ 				hotStatus === "prepare" &&
/******/ 				hotChunksLoading === 0 &&
/******/ 				hotWaitingFiles === 0
/******/ 			) {
/******/ 				hotUpdateDownloaded();
/******/ 			}
/******/ 			return promise;
/******/ 		});
/******/ 	}
/******/
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	function hotAddUpdateChunk(chunkId, moreModules) {
/******/ 		if (!hotAvailableFilesMap[chunkId] || !hotRequestedFilesMap[chunkId])
/******/ 			return;
/******/ 		hotRequestedFilesMap[chunkId] = false;
/******/ 		for (var moduleId in moreModules) {
/******/ 			if (Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				hotUpdate[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if (--hotWaitingFiles === 0 && hotChunksLoading === 0) {
/******/ 			hotUpdateDownloaded();
/******/ 		}
/******/ 	}
/******/
/******/ 	function hotEnsureUpdateChunk(chunkId) {
/******/ 		if (!hotAvailableFilesMap[chunkId]) {
/******/ 			hotWaitingFilesMap[chunkId] = true;
/******/ 		} else {
/******/ 			hotRequestedFilesMap[chunkId] = true;
/******/ 			hotWaitingFiles++;
/******/ 			hotDownloadUpdateChunk(chunkId);
/******/ 		}
/******/ 	}
/******/
/******/ 	function hotUpdateDownloaded() {
/******/ 		hotSetStatus("ready");
/******/ 		var deferred = hotDeferred;
/******/ 		hotDeferred = null;
/******/ 		if (!deferred) return;
/******/ 		if (hotApplyOnUpdate) {
/******/ 			// Wrap deferred object in Promise to mark it as a well-handled Promise to
/******/ 			// avoid triggering uncaught exception warning in Chrome.
/******/ 			// See https://bugs.chromium.org/p/chromium/issues/detail?id=465666
/******/ 			Promise.resolve()
/******/ 				.then(function() {
/******/ 					return hotApply(hotApplyOnUpdate);
/******/ 				})
/******/ 				.then(
/******/ 					function(result) {
/******/ 						deferred.resolve(result);
/******/ 					},
/******/ 					function(err) {
/******/ 						deferred.reject(err);
/******/ 					}
/******/ 				);
/******/ 		} else {
/******/ 			var outdatedModules = [];
/******/ 			for (var id in hotUpdate) {
/******/ 				if (Object.prototype.hasOwnProperty.call(hotUpdate, id)) {
/******/ 					outdatedModules.push(toModuleId(id));
/******/ 				}
/******/ 			}
/******/ 			deferred.resolve(outdatedModules);
/******/ 		}
/******/ 	}
/******/
/******/ 	function hotApply(options) {
/******/ 		if (hotStatus !== "ready")
/******/ 			throw new Error("apply() is only allowed in ready status");
/******/ 		options = options || {};
/******/
/******/ 		var cb;
/******/ 		var i;
/******/ 		var j;
/******/ 		var module;
/******/ 		var moduleId;
/******/
/******/ 		function getAffectedStuff(updateModuleId) {
/******/ 			var outdatedModules = [updateModuleId];
/******/ 			var outdatedDependencies = {};
/******/
/******/ 			var queue = outdatedModules.slice().map(function(id) {
/******/ 				return {
/******/ 					chain: [id],
/******/ 					id: id
/******/ 				};
/******/ 			});
/******/ 			while (queue.length > 0) {
/******/ 				var queueItem = queue.pop();
/******/ 				var moduleId = queueItem.id;
/******/ 				var chain = queueItem.chain;
/******/ 				module = installedModules[moduleId];
/******/ 				if (!module || module.hot._selfAccepted) continue;
/******/ 				if (module.hot._selfDeclined) {
/******/ 					return {
/******/ 						type: "self-declined",
/******/ 						chain: chain,
/******/ 						moduleId: moduleId
/******/ 					};
/******/ 				}
/******/ 				if (module.hot._main) {
/******/ 					return {
/******/ 						type: "unaccepted",
/******/ 						chain: chain,
/******/ 						moduleId: moduleId
/******/ 					};
/******/ 				}
/******/ 				for (var i = 0; i < module.parents.length; i++) {
/******/ 					var parentId = module.parents[i];
/******/ 					var parent = installedModules[parentId];
/******/ 					if (!parent) continue;
/******/ 					if (parent.hot._declinedDependencies[moduleId]) {
/******/ 						return {
/******/ 							type: "declined",
/******/ 							chain: chain.concat([parentId]),
/******/ 							moduleId: moduleId,
/******/ 							parentId: parentId
/******/ 						};
/******/ 					}
/******/ 					if (outdatedModules.indexOf(parentId) !== -1) continue;
/******/ 					if (parent.hot._acceptedDependencies[moduleId]) {
/******/ 						if (!outdatedDependencies[parentId])
/******/ 							outdatedDependencies[parentId] = [];
/******/ 						addAllToSet(outdatedDependencies[parentId], [moduleId]);
/******/ 						continue;
/******/ 					}
/******/ 					delete outdatedDependencies[parentId];
/******/ 					outdatedModules.push(parentId);
/******/ 					queue.push({
/******/ 						chain: chain.concat([parentId]),
/******/ 						id: parentId
/******/ 					});
/******/ 				}
/******/ 			}
/******/
/******/ 			return {
/******/ 				type: "accepted",
/******/ 				moduleId: updateModuleId,
/******/ 				outdatedModules: outdatedModules,
/******/ 				outdatedDependencies: outdatedDependencies
/******/ 			};
/******/ 		}
/******/
/******/ 		function addAllToSet(a, b) {
/******/ 			for (var i = 0; i < b.length; i++) {
/******/ 				var item = b[i];
/******/ 				if (a.indexOf(item) === -1) a.push(item);
/******/ 			}
/******/ 		}
/******/
/******/ 		// at begin all updates modules are outdated
/******/ 		// the "outdated" status can propagate to parents if they don't accept the children
/******/ 		var outdatedDependencies = {};
/******/ 		var outdatedModules = [];
/******/ 		var appliedUpdate = {};
/******/
/******/ 		var warnUnexpectedRequire = function warnUnexpectedRequire() {
/******/ 			console.warn(
/******/ 				"[HMR] unexpected require(" + result.moduleId + ") to disposed module"
/******/ 			);
/******/ 		};
/******/
/******/ 		for (var id in hotUpdate) {
/******/ 			if (Object.prototype.hasOwnProperty.call(hotUpdate, id)) {
/******/ 				moduleId = toModuleId(id);
/******/ 				/** @type {TODO} */
/******/ 				var result;
/******/ 				if (hotUpdate[id]) {
/******/ 					result = getAffectedStuff(moduleId);
/******/ 				} else {
/******/ 					result = {
/******/ 						type: "disposed",
/******/ 						moduleId: id
/******/ 					};
/******/ 				}
/******/ 				/** @type {Error|false} */
/******/ 				var abortError = false;
/******/ 				var doApply = false;
/******/ 				var doDispose = false;
/******/ 				var chainInfo = "";
/******/ 				if (result.chain) {
/******/ 					chainInfo = "\nUpdate propagation: " + result.chain.join(" -> ");
/******/ 				}
/******/ 				switch (result.type) {
/******/ 					case "self-declined":
/******/ 						if (options.onDeclined) options.onDeclined(result);
/******/ 						if (!options.ignoreDeclined)
/******/ 							abortError = new Error(
/******/ 								"Aborted because of self decline: " +
/******/ 									result.moduleId +
/******/ 									chainInfo
/******/ 							);
/******/ 						break;
/******/ 					case "declined":
/******/ 						if (options.onDeclined) options.onDeclined(result);
/******/ 						if (!options.ignoreDeclined)
/******/ 							abortError = new Error(
/******/ 								"Aborted because of declined dependency: " +
/******/ 									result.moduleId +
/******/ 									" in " +
/******/ 									result.parentId +
/******/ 									chainInfo
/******/ 							);
/******/ 						break;
/******/ 					case "unaccepted":
/******/ 						if (options.onUnaccepted) options.onUnaccepted(result);
/******/ 						if (!options.ignoreUnaccepted)
/******/ 							abortError = new Error(
/******/ 								"Aborted because " + moduleId + " is not accepted" + chainInfo
/******/ 							);
/******/ 						break;
/******/ 					case "accepted":
/******/ 						if (options.onAccepted) options.onAccepted(result);
/******/ 						doApply = true;
/******/ 						break;
/******/ 					case "disposed":
/******/ 						if (options.onDisposed) options.onDisposed(result);
/******/ 						doDispose = true;
/******/ 						break;
/******/ 					default:
/******/ 						throw new Error("Unexception type " + result.type);
/******/ 				}
/******/ 				if (abortError) {
/******/ 					hotSetStatus("abort");
/******/ 					return Promise.reject(abortError);
/******/ 				}
/******/ 				if (doApply) {
/******/ 					appliedUpdate[moduleId] = hotUpdate[moduleId];
/******/ 					addAllToSet(outdatedModules, result.outdatedModules);
/******/ 					for (moduleId in result.outdatedDependencies) {
/******/ 						if (
/******/ 							Object.prototype.hasOwnProperty.call(
/******/ 								result.outdatedDependencies,
/******/ 								moduleId
/******/ 							)
/******/ 						) {
/******/ 							if (!outdatedDependencies[moduleId])
/******/ 								outdatedDependencies[moduleId] = [];
/******/ 							addAllToSet(
/******/ 								outdatedDependencies[moduleId],
/******/ 								result.outdatedDependencies[moduleId]
/******/ 							);
/******/ 						}
/******/ 					}
/******/ 				}
/******/ 				if (doDispose) {
/******/ 					addAllToSet(outdatedModules, [result.moduleId]);
/******/ 					appliedUpdate[moduleId] = warnUnexpectedRequire;
/******/ 				}
/******/ 			}
/******/ 		}
/******/
/******/ 		// Store self accepted outdated modules to require them later by the module system
/******/ 		var outdatedSelfAcceptedModules = [];
/******/ 		for (i = 0; i < outdatedModules.length; i++) {
/******/ 			moduleId = outdatedModules[i];
/******/ 			if (
/******/ 				installedModules[moduleId] &&
/******/ 				installedModules[moduleId].hot._selfAccepted
/******/ 			)
/******/ 				outdatedSelfAcceptedModules.push({
/******/ 					module: moduleId,
/******/ 					errorHandler: installedModules[moduleId].hot._selfAccepted
/******/ 				});
/******/ 		}
/******/
/******/ 		// Now in "dispose" phase
/******/ 		hotSetStatus("dispose");
/******/ 		Object.keys(hotAvailableFilesMap).forEach(function(chunkId) {
/******/ 			if (hotAvailableFilesMap[chunkId] === false) {
/******/ 				hotDisposeChunk(chunkId);
/******/ 			}
/******/ 		});
/******/
/******/ 		var idx;
/******/ 		var queue = outdatedModules.slice();
/******/ 		while (queue.length > 0) {
/******/ 			moduleId = queue.pop();
/******/ 			module = installedModules[moduleId];
/******/ 			if (!module) continue;
/******/
/******/ 			var data = {};
/******/
/******/ 			// Call dispose handlers
/******/ 			var disposeHandlers = module.hot._disposeHandlers;
/******/ 			for (j = 0; j < disposeHandlers.length; j++) {
/******/ 				cb = disposeHandlers[j];
/******/ 				cb(data);
/******/ 			}
/******/ 			hotCurrentModuleData[moduleId] = data;
/******/
/******/ 			// disable module (this disables requires from this module)
/******/ 			module.hot.active = false;
/******/
/******/ 			// remove module from cache
/******/ 			delete installedModules[moduleId];
/******/
/******/ 			// when disposing there is no need to call dispose handler
/******/ 			delete outdatedDependencies[moduleId];
/******/
/******/ 			// remove "parents" references from all children
/******/ 			for (j = 0; j < module.children.length; j++) {
/******/ 				var child = installedModules[module.children[j]];
/******/ 				if (!child) continue;
/******/ 				idx = child.parents.indexOf(moduleId);
/******/ 				if (idx >= 0) {
/******/ 					child.parents.splice(idx, 1);
/******/ 				}
/******/ 			}
/******/ 		}
/******/
/******/ 		// remove outdated dependency from module children
/******/ 		var dependency;
/******/ 		var moduleOutdatedDependencies;
/******/ 		for (moduleId in outdatedDependencies) {
/******/ 			if (
/******/ 				Object.prototype.hasOwnProperty.call(outdatedDependencies, moduleId)
/******/ 			) {
/******/ 				module = installedModules[moduleId];
/******/ 				if (module) {
/******/ 					moduleOutdatedDependencies = outdatedDependencies[moduleId];
/******/ 					for (j = 0; j < moduleOutdatedDependencies.length; j++) {
/******/ 						dependency = moduleOutdatedDependencies[j];
/******/ 						idx = module.children.indexOf(dependency);
/******/ 						if (idx >= 0) module.children.splice(idx, 1);
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		}
/******/
/******/ 		// Not in "apply" phase
/******/ 		hotSetStatus("apply");
/******/
/******/ 		hotCurrentHash = hotUpdateNewHash;
/******/
/******/ 		// insert new code
/******/ 		for (moduleId in appliedUpdate) {
/******/ 			if (Object.prototype.hasOwnProperty.call(appliedUpdate, moduleId)) {
/******/ 				modules[moduleId] = appliedUpdate[moduleId];
/******/ 			}
/******/ 		}
/******/
/******/ 		// call accept handlers
/******/ 		var error = null;
/******/ 		for (moduleId in outdatedDependencies) {
/******/ 			if (
/******/ 				Object.prototype.hasOwnProperty.call(outdatedDependencies, moduleId)
/******/ 			) {
/******/ 				module = installedModules[moduleId];
/******/ 				if (module) {
/******/ 					moduleOutdatedDependencies = outdatedDependencies[moduleId];
/******/ 					var callbacks = [];
/******/ 					for (i = 0; i < moduleOutdatedDependencies.length; i++) {
/******/ 						dependency = moduleOutdatedDependencies[i];
/******/ 						cb = module.hot._acceptedDependencies[dependency];
/******/ 						if (cb) {
/******/ 							if (callbacks.indexOf(cb) !== -1) continue;
/******/ 							callbacks.push(cb);
/******/ 						}
/******/ 					}
/******/ 					for (i = 0; i < callbacks.length; i++) {
/******/ 						cb = callbacks[i];
/******/ 						try {
/******/ 							cb(moduleOutdatedDependencies);
/******/ 						} catch (err) {
/******/ 							if (options.onErrored) {
/******/ 								options.onErrored({
/******/ 									type: "accept-errored",
/******/ 									moduleId: moduleId,
/******/ 									dependencyId: moduleOutdatedDependencies[i],
/******/ 									error: err
/******/ 								});
/******/ 							}
/******/ 							if (!options.ignoreErrored) {
/******/ 								if (!error) error = err;
/******/ 							}
/******/ 						}
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		}
/******/
/******/ 		// Load self accepted modules
/******/ 		for (i = 0; i < outdatedSelfAcceptedModules.length; i++) {
/******/ 			var item = outdatedSelfAcceptedModules[i];
/******/ 			moduleId = item.module;
/******/ 			hotCurrentParents = [moduleId];
/******/ 			try {
/******/ 				__webpack_require__(moduleId);
/******/ 			} catch (err) {
/******/ 				if (typeof item.errorHandler === "function") {
/******/ 					try {
/******/ 						item.errorHandler(err);
/******/ 					} catch (err2) {
/******/ 						if (options.onErrored) {
/******/ 							options.onErrored({
/******/ 								type: "self-accept-error-handler-errored",
/******/ 								moduleId: moduleId,
/******/ 								error: err2,
/******/ 								originalError: err
/******/ 							});
/******/ 						}
/******/ 						if (!options.ignoreErrored) {
/******/ 							if (!error) error = err2;
/******/ 						}
/******/ 						if (!error) error = err;
/******/ 					}
/******/ 				} else {
/******/ 					if (options.onErrored) {
/******/ 						options.onErrored({
/******/ 							type: "self-accept-errored",
/******/ 							moduleId: moduleId,
/******/ 							error: err
/******/ 						});
/******/ 					}
/******/ 					if (!options.ignoreErrored) {
/******/ 						if (!error) error = err;
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		}
/******/
/******/ 		// handle errors in accept handlers and self accepted module load
/******/ 		if (error) {
/******/ 			hotSetStatus("fail");
/******/ 			return Promise.reject(error);
/******/ 		}
/******/
/******/ 		hotSetStatus("idle");
/******/ 		return new Promise(function(resolve) {
/******/ 			resolve(outdatedModules);
/******/ 		});
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {},
/******/ 			hot: hotCreateModule(moduleId),
/******/ 			parents: (hotCurrentParentsTemp = hotCurrentParents, hotCurrentParents = [], hotCurrentParentsTemp),
/******/ 			children: []
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, hotCreateRequire(moduleId));
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// __webpack_hash__
/******/ 	__webpack_require__.h = function() { return hotCurrentHash; };
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return hotCreateRequire("./src/index.js")(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/auth/index.js":
/*!***************************!*\
  !*** ./src/auth/index.js ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _user = __webpack_require__(/*! ./user */ "./src/auth/user.js");

var _user2 = _interopRequireDefault(_user);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    user: _user2.default
};

/***/ }),

/***/ "./src/auth/user.js":
/*!**************************!*\
  !*** ./src/auth/user.js ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
var getCode = function getCode(callback) {
    $lemix.call.customs.callCustom({
        type: 'getCode',
        success: function success(data) {
            var code = JSON.parse(data).code;
            callback(code);
        }
    });
};
exports.default = {
    getCode: getCode
};

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _network = __webpack_require__(/*! ./network */ "./src/network/index.js");

var _network2 = _interopRequireDefault(_network);

var _auth = __webpack_require__(/*! ./auth */ "./src/auth/index.js");

var _auth2 = _interopRequireDefault(_auth);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

window.$zwt_sdk = {
    network: _network2.default,
    auth: _auth2.default
};

/***/ }),

/***/ "./src/network/http.js":
/*!*****************************!*\
  !*** ./src/network/http.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var http = function (document, undefined) {
    var readyRE = /complete|loaded|interactive/;
    var idSelectorRE = /^#([\w-]+)$/;
    var classSelectorRE = /^\.([\w-]+)$/;
    var tagSelectorRE = /^[\w-]+$/;
    var translateRE = /translate(?:3d)?\((.+?)\)/;
    var translateMatrixRE = /matrix(3d)?\((.+?)\)/;

    var $ = function $(selector, context) {
        context = context || document;
        if (!selector) return wrap();
        if ((typeof selector === 'undefined' ? 'undefined' : _typeof(selector)) === 'object') if ($.isArrayLike(selector)) {
            return wrap($.slice.call(selector), null);
        } else {
            return wrap([selector], null);
        }
        if (typeof selector === 'function') return $.ready(selector);
        if (typeof selector === 'string') {
            try {
                selector = selector.trim();
                if (idSelectorRE.test(selector)) {
                    var found = document.getElementById(RegExp.$1);
                    return wrap(found ? [found] : []);
                }
                return wrap($.qsa(selector, context), selector);
            } catch (e) {}
        }
        return wrap();
    };

    var wrap = function wrap(dom, selector) {
        dom = dom || [];
        Object.setPrototypeOf(dom, $.fn);
        dom.selector = selector || '';
        return dom;
    };

    $.uuid = 0;

    $.data = {};
    /**
     * extend(simple)
     * @param {type} target
     * @param {type} source
     * @param {type} deep
     * @returns {unresolved}
     */
    $.extend = function () {
        //from jquery2
        var options,
            name,
            src,
            copy,
            copyIsArray,
            clone,
            target = arguments[0] || {},
            i = 1,
            length = arguments.length,
            deep = false;

        if (typeof target === "boolean") {
            deep = target;

            target = arguments[i] || {};
            i++;
        }

        if ((typeof target === 'undefined' ? 'undefined' : _typeof(target)) !== "object" && !$.isFunction(target)) {
            target = {};
        }

        if (i === length) {
            target = this;
            i--;
        }

        for (; i < length; i++) {
            if ((options = arguments[i]) != null) {
                for (name in options) {
                    src = target[name];
                    copy = options[name];

                    if (target === copy) {
                        continue;
                    }

                    if (deep && copy && ($.isPlainObject(copy) || (copyIsArray = $.isArray(copy)))) {
                        if (copyIsArray) {
                            copyIsArray = false;
                            clone = src && $.isArray(src) ? src : [];
                        } else {
                            clone = src && $.isPlainObject(src) ? src : {};
                        }

                        target[name] = $.extend(deep, clone, copy);
                    } else if (copy !== undefined) {
                        target[name] = copy;
                    }
                }
            }
        }

        return target;
    };
    /**
     * mui noop(function)
     */
    $.noop = function () {};
    /**
     * mui slice(array)
     */
    $.slice = [].slice;
    /**
     * mui filter(array)
     */
    $.filter = [].filter;

    $.type = function (obj) {
        return obj == null ? String(obj) : class2type[{}.toString.call(obj)] || "object";
    };
    /**
     * mui isArray
     */
    $.isArray = Array.isArray || function (object) {
        return object instanceof Array;
    };
    /**
     * mui isArrayLike
     * @param {Object} obj
     */
    $.isArrayLike = function (obj) {
        var length = !!obj && "length" in obj && obj.length;
        var type = $.type(obj);
        if (type === "function" || $.isWindow(obj)) {
            return false;
        }
        return type === "array" || length === 0 || typeof length === "number" && length > 0 && length - 1 in obj;
    };
    /**
     * mui isWindow(需考虑obj为undefined的情况)
     */
    $.isWindow = function (obj) {
        return obj != null && obj === obj.window;
    };
    /**
     * mui isObject
     */
    $.isObject = function (obj) {
        return $.type(obj) === "object";
    };
    /**
     * mui isPlainObject
     */
    $.isPlainObject = function (obj) {
        return $.isObject(obj) && !$.isWindow(obj) && Object.getPrototypeOf(obj) === Object.prototype;
    };
    /**
     * mui isEmptyObject
     * @param {Object} o
     */
    $.isEmptyObject = function (o) {
        for (var p in o) {
            if (p !== undefined) {
                return false;
            }
        }
        return true;
    };
    /**
     * mui isFunction
     */
    $.isFunction = function (value) {
        return $.type(value) === "function";
    };
    /**
     * mui querySelectorAll
     * @param {type} selector
     * @param {type} context
     * @returns {Array}
     */
    $.qsa = function (selector, context) {
        context = context || document;
        return $.slice.call(classSelectorRE.test(selector) ? context.getElementsByClassName(RegExp.$1) : tagSelectorRE.test(selector) ? context.getElementsByTagName(selector) : context.querySelectorAll(selector));
    };
    /**
     * ready(DOMContentLoaded)
     * @param {type} callback
     * @returns {_L6.$}
     */
    $.ready = function (callback) {
        if (readyRE.test(document.readyState)) {
            callback($);
        } else {
            document.addEventListener('DOMContentLoaded', function () {
                callback($);
            }, false);
        }
        return this;
    };
    /**
     * 将 fn 缓存一段时间后, 再被调用执行
     * 此方法为了避免在 ms 段时间内, 执行 fn 多次. 常用于 resize , scroll , mousemove 等连续性事件中;
     * 当 ms 设置为 -1, 表示立即执行 fn, 即和直接调用 fn 一样;
     * 调用返回函数的 stop 停止最后一次的 buffer 效果
     * @param {Object} fn
     * @param {Object} ms
     * @param {Object} context
     */
    $.buffer = function (fn, ms, context) {
        var timer;
        var lastStart = 0;
        var lastEnd = 0;
        var ms = ms || 150;

        function run() {
            if (timer) {
                timer.cancel();
                timer = 0;
            }
            lastStart = $.now();
            fn.apply(context || this, arguments);
            lastEnd = $.now();
        }

        return $.extend(function () {
            if (!lastStart || // 从未运行过
            lastEnd >= lastStart && $.now() - lastEnd > ms || // 上次运行成功后已经超过ms毫秒
            lastEnd < lastStart && $.now() - lastStart > ms * 8 // 上次运行或未完成，后8*ms毫秒
            ) {
                    run.apply(this, arguments);
                } else {
                if (timer) {
                    timer.cancel();
                }
                timer = $.later(run, ms, null, $.slice.call(arguments));
            }
        }, {
            stop: function stop() {
                if (timer) {
                    timer.cancel();
                    timer = 0;
                }
            }
        });
    };
    /**
     * each
     * @param {type} elements
     * @param {type} callback
     * @returns {_L8.$}
     */
    $.each = function (elements, callback, hasOwnProperty) {
        if (!elements) {
            return this;
        }
        if (typeof elements.length === 'number') {
            [].every.call(elements, function (el, idx) {
                return callback.call(el, idx, el) !== false;
            });
        } else {
            for (var key in elements) {
                if (hasOwnProperty) {
                    if (elements.hasOwnProperty(key)) {
                        if (callback.call(elements[key], key, elements[key]) === false) return elements;
                    }
                } else {
                    if (callback.call(elements[key], key, elements[key]) === false) return elements;
                }
            }
        }
        return this;
    };
    $.focus = function (element) {
        if ($.os.ios) {
            setTimeout(function () {
                element.focus();
            }, 10);
        } else {
            element.focus();
        }
    };
    /**
     * trigger event
     * @param {type} element
     * @param {type} eventType
     * @param {type} eventData
     * @returns {_L8.$}
     */
    $.trigger = function (element, eventType, eventData) {
        element.dispatchEvent(new CustomEvent(eventType, {
            detail: eventData,
            bubbles: true,
            cancelable: true
        }));
        return this;
    };
    /**
     * getStyles
     * @param {type} element
     * @param {type} property
     * @returns {styles}
     */
    $.getStyles = function (element, property) {
        var styles = element.ownerDocument.defaultView.getComputedStyle(element, null);
        if (property) {
            return styles.getPropertyValue(property) || styles[property];
        }
        return styles;
    };
    /**
     * parseTranslate
     * @param {type} translateString
     * @param {type} position
     * @returns {Object}
     */
    $.parseTranslate = function (translateString, position) {
        var result = translateString.match(translateRE || '');
        if (!result || !result[1]) {
            result = ['', '0,0,0'];
        }
        result = result[1].split(",");
        result = {
            x: parseFloat(result[0]),
            y: parseFloat(result[1]),
            z: parseFloat(result[2])
        };
        if (position && result.hasOwnProperty(position)) {
            return result[position];
        }
        return result;
    };
    /**
     * parseTranslateMatrix
     * @param {type} translateString
     * @param {type} position
     * @returns {Object}
     */
    $.parseTranslateMatrix = function (translateString, position) {
        var matrix = translateString.match(translateMatrixRE);
        var is3D = matrix && matrix[1];
        if (matrix) {
            matrix = matrix[2].split(",");
            if (is3D === "3d") matrix = matrix.slice(12, 15);else {
                matrix.push(0);
                matrix = matrix.slice(4, 7);
            }
        } else {
            matrix = [0, 0, 0];
        }
        var result = {
            x: parseFloat(matrix[0]),
            y: parseFloat(matrix[1]),
            z: parseFloat(matrix[2])
        };
        if (position && result.hasOwnProperty(position)) {
            return result[position];
        }
        return result;
    };
    $.hooks = {};
    $.addAction = function (type, hook) {
        var hooks = $.hooks[type];
        if (!hooks) {
            hooks = [];
        }
        hook.index = hook.index || 1000;
        hooks.push(hook);
        hooks.sort(function (a, b) {
            return a.index - b.index;
        });
        $.hooks[type] = hooks;
        return $.hooks[type];
    };
    $.doAction = function (type, callback) {
        if ($.isFunction(callback)) {
            //指定了callback
            $.each($.hooks[type], callback);
        } else {
            //未指定callback，直接执行
            $.each($.hooks[type], function (index, hook) {
                return !hook.handle();
            });
        }
    };
    /**
     * setTimeout封装
     * @param {Object} fn
     * @param {Object} when
     * @param {Object} context
     * @param {Object} data
     */
    $.later = function (fn, when, context, data) {
        when = when || 0;
        var m = fn;
        var d = data;
        var f;
        var r;

        if (typeof fn === 'string') {
            m = context[fn];
        }

        f = function f() {
            m.apply(context, $.isArray(d) ? d : [d]);
        };

        r = setTimeout(f, when);

        return {
            id: r,
            cancel: function cancel() {
                clearTimeout(r);
            }
        };
    };
    $.now = Date.now || function () {
        return +new Date();
    };
    var class2type = {};
    $.each(['Boolean', 'Number', 'String', 'Function', 'Array', 'Date', 'RegExp', 'Object', 'Error'], function (i, name) {
        class2type["[object " + name + "]"] = name.toLowerCase();
    });
    if (window.JSON) {
        $.parseJSON = JSON.parse;
    }
    /**
     * $.fn
     */
    $.fn = {
        each: function each(callback) {
            [].every.call(this, function (el, idx) {
                return callback.call(el, idx, el) !== false;
            });
            return this;
        }
    };

    /**
     * 兼容 AMD 模块
     **/
    if (true) {
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {
            return $;
        }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    }

    return $;
}(document);
(function ($, window, undefined) {
    var jsonType = 'application/json';
    var htmlType = 'text/html';
    var rscript = /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi;
    var scriptTypeRE = /^(?:text|application)\/javascript/i;
    var xmlTypeRE = /^(?:text|application)\/xml/i;
    var blankRE = /^\s*$/;

    $.ajaxSettings = {
        type: 'GET',
        beforeSend: $.noop,
        success: $.noop,
        error: $.noop,
        complete: $.noop,
        context: null,
        xhr: function xhr(protocol) {
            return new window.XMLHttpRequest();
        },
        accepts: {
            script: 'text/javascript, application/javascript, application/x-javascript',
            json: jsonType,
            xml: 'application/xml, text/xml',
            html: htmlType,
            text: 'text/plain'
        },
        timeout: 0,
        processData: true,
        cache: true
    };
    var ajaxBeforeSend = function ajaxBeforeSend(xhr, settings) {
        var context = settings.context;
        if (settings.beforeSend.call(context, xhr, settings) === false) {
            return false;
        }
    };
    var ajaxSuccess = function ajaxSuccess(data, xhr, settings) {
        settings.success.call(settings.context, data, 'success', xhr);
        ajaxComplete('success', xhr, settings);
    };
    // type: "timeout", "error", "abort", "parsererror"
    var ajaxError = function ajaxError(error, type, xhr, settings) {
        settings.error.call(settings.context, xhr, type, error);
        ajaxComplete(type, xhr, settings);
    };
    // status: "success", "notmodified", "error", "timeout", "abort", "parsererror"
    var ajaxComplete = function ajaxComplete(status, xhr, settings) {
        settings.complete.call(settings.context, xhr, status);
    };

    var serialize = function serialize(params, obj, traditional, scope) {
        var type,
            array = $.isArray(obj),
            hash = $.isPlainObject(obj);
        $.each(obj, function (key, value) {
            type = $.type(value);
            if (scope) {
                key = traditional ? scope : scope + '[' + (hash || type === 'object' || type === 'array' ? key : '') + ']';
            }
            // handle data in serializeArray() format
            if (!scope && array) {
                params.add(value.name, value.value);
            }
            // recurse into nested objects
            else if (type === "array" || !traditional && type === "object") {
                    serialize(params, value, traditional, key);
                } else {
                    params.add(key, value);
                }
        });
    };
    var serializeData = function serializeData(options) {
        if (options.processData && options.data && typeof options.data !== "string") {
            var contentType = options.contentType;
            if (!contentType && options.headers) {
                contentType = options.headers['Content-Type'];
            }
            if (contentType && ~contentType.indexOf(jsonType)) {
                //application/json
                options.data = JSON.stringify(options.data);
            } else {
                options.data = $.param(options.data, options.traditional);
            }
        }
        if (options.data && (!options.type || options.type.toUpperCase() === 'GET')) {
            options.url = appendQuery(options.url, options.data);
            options.data = undefined;
        }
    };
    var appendQuery = function appendQuery(url, query) {
        if (query === '') {
            return url;
        }
        return (url + '&' + query).replace(/[&?]{1,2}/, '?');
    };
    var mimeToDataType = function mimeToDataType(mime) {
        if (mime) {
            mime = mime.split(';', 2)[0];
        }
        return mime && (mime === htmlType ? 'html' : mime === jsonType ? 'json' : scriptTypeRE.test(mime) ? 'script' : xmlTypeRE.test(mime) && 'xml') || 'text';
    };
    var parseArguments = function parseArguments(url, data, success, dataType) {
        if ($.isFunction(data)) {
            dataType = success, success = data, data = undefined;
        }
        if (!$.isFunction(success)) {
            dataType = success, success = undefined;
        }
        return {
            url: url,
            data: data,
            success: success,
            dataType: dataType
        };
    };
    $.ajax = function (url, options) {
        if ((typeof url === 'undefined' ? 'undefined' : _typeof(url)) === "object") {
            options = url;
            url = undefined;
        }
        var settings = options || {};
        settings.url = url || settings.url;
        for (var key in $.ajaxSettings) {
            if (settings[key] === undefined) {
                settings[key] = $.ajaxSettings[key];
            }
        }
        serializeData(settings);
        var dataType = settings.dataType;

        if (settings.cache === false || (!options || options.cache !== true) && 'script' === dataType) {
            settings.url = appendQuery(settings.url, '_=' + $.now());
        }
        var mime = settings.accepts[dataType && dataType.toLowerCase()];
        var headers = {};
        var setHeader = function setHeader(name, value) {
            headers[name.toLowerCase()] = [name, value];
        };
        var protocol = /^([\w-]+:)\/\//.test(settings.url) ? RegExp.$1 : window.location.protocol;
        var xhr = settings.xhr(settings);
        var nativeSetHeader = xhr.setRequestHeader;
        var abortTimeout;

        setHeader('X-Requested-With', 'XMLHttpRequest');
        setHeader('Accept', mime || '*/*');
        if (!!(mime = settings.mimeType || mime)) {
            if (mime.indexOf(',') > -1) {
                mime = mime.split(',', 2)[0];
            }
            xhr.overrideMimeType && xhr.overrideMimeType(mime);
        }
        if (settings.contentType || settings.contentType !== false && settings.data && settings.type.toUpperCase() !== 'GET') {
            setHeader('Content-Type', settings.contentType || 'application/x-www-form-urlencoded');
        }
        if (settings.headers) {
            for (var name in settings.headers) {
                setHeader(name, settings.headers[name]);
            }
        }
        xhr.setRequestHeader = setHeader;

        xhr.onreadystatechange = function () {
            if (xhr.readyState === 4) {
                xhr.onreadystatechange = $.noop;
                clearTimeout(abortTimeout);
                var result,
                    error = false;
                var isLocal = protocol === 'file:';
                if (xhr.status >= 200 && xhr.status < 300 || xhr.status === 304 || xhr.status === 0 && isLocal && xhr.responseText) {
                    dataType = dataType || mimeToDataType(settings.mimeType || xhr.getResponseHeader('content-type'));
                    result = xhr.responseText;
                    try {
                        // http://perfectionkills.com/global-eval-what-are-the-options/
                        if (dataType === 'script') {
                            (1, eval)(result);
                        } else if (dataType === 'xml') {
                            result = xhr.responseXML;
                        } else if (dataType === 'json') {
                            result = blankRE.test(result) ? null : $.parseJSON(result);
                        }
                    } catch (e) {
                        error = e;
                    }

                    if (error) {
                        ajaxError(error, 'parsererror', xhr, settings);
                    } else {
                        ajaxSuccess(result, xhr, settings);
                    }
                } else {
                    var status = xhr.status ? 'error' : 'abort';
                    var statusText = xhr.statusText || null;
                    if (isLocal) {
                        status = 'error';
                        statusText = '404';
                    }
                    ajaxError(statusText, status, xhr, settings);
                }
            }
        };
        if (ajaxBeforeSend(xhr, settings) === false) {
            xhr.abort();
            ajaxError(null, 'abort', xhr, settings);
            return xhr;
        }

        if (settings.xhrFields) {
            for (var name in settings.xhrFields) {
                xhr[name] = settings.xhrFields[name];
            }
        }

        var async = 'async' in settings ? settings.async : true;

        xhr.open(settings.type.toUpperCase(), settings.url, async, settings.username, settings.password);

        for (var name in headers) {
            if (headers.hasOwnProperty(name)) {
                nativeSetHeader.apply(xhr, headers[name]);
            }
        }
        if (settings.timeout > 0) {
            abortTimeout = setTimeout(function () {
                xhr.onreadystatechange = $.noop;
                xhr.abort();
                ajaxError(null, 'timeout', xhr, settings);
            }, settings.timeout);
        }
        xhr.send(settings.data ? settings.data : null);
        return xhr;
    };

    $.param = function (obj, traditional) {
        var params = [];
        params.add = function (k, v) {
            this.push(encodeURIComponent(k) + '=' + encodeURIComponent(v));
        };
        serialize(params, obj, traditional);
        return params.join('&').replace(/%20/g, '+');
    };
    $.get = function () /* url, data, success, dataType */{
        return $.ajax(parseArguments.apply(null, arguments));
    };

    $.post = function () /* url, data, success, dataType */{
        var options = parseArguments.apply(null, arguments);
        options.type = 'POST';
        return $.ajax(options);
    };

    $.getJSON = function () /* url, data, success */{
        var options = parseArguments.apply(null, arguments);
        options.dataType = 'json';
        return $.ajax(options);
    };

    $.fn.load = function (url, data, success) {
        if (!this.length) return this;
        var self = this,
            parts = url.split(/\s/),
            selector,
            options = parseArguments(url, data, success),
            callback = options.success;
        if (parts.length > 1) options.url = parts[0], selector = parts[1];
        options.success = function (response) {
            if (selector) {
                var div = document.createElement('div');
                div.innerHTML = response.replace(rscript, "");
                var selectorDiv = document.createElement('div');
                var childs = div.querySelectorAll(selector);
                if (childs && childs.length > 0) {
                    for (var i = 0, len = childs.length; i < len; i++) {
                        selectorDiv.appendChild(childs[i]);
                    }
                }
                self[0].innerHTML = selectorDiv.innerHTML;
            } else {
                self[0].innerHTML = response;
            }
            callback && callback.apply(self, arguments);
        };
        $.ajax(options);
        return this;
    };
})(http, window);

http.zwtAjax = function (url, datao) {
    try {
        var errorOld = datao.error;
        datao.error = function (xhr, type, errorThrown) {
            var resp = JSON.parse(xhr.response);
            if (resp.code === 'SC_UNAUTHORIZED') {
                $zwt_sdk.auth.user.getCode(function (code) {
                    http.ajax('http://testapi-lyzwt.lnzhongwang.net:31030/authenticate?code=' + code, {
                        async: true,
                        dataType: 'json', //服务器返回json格式数据
                        type: 'get', //HTTP请求类型
                        headers: { 'Content-Type': 'application/json' },
                        success: function success(rdata, textStatus, xhr) {
                            var xsessionid = xhr.getResponseHeader('X-SESSION-ID');
                            $lemix.data.storage.setLocalStorage({
                                data: xsessionid,
                                key: 'sessionId'
                            });
                            datao.headers['X-SESSION-ID'] = xsessionid;
                            card = rdata.card_no;
                            http.ajax(url, datao);
                        },
                        error: function error(xhr, type, errorThrown) {
                            // 请求失败
                            var errorRes = JSON.parse(xhr.response);
                            http.alert(errorRes.message, '', '我知道了', function () {});
                        }
                    });
                });
            } else {
                errorOld(xhr, type, errorThrown);
            }
        };
        http.ajax(url, datao);
    } catch (e) {
        document.body.innerHTML = JSON.parse(e) + e.message();
    }
};
exports.default = http;

/***/ }),

/***/ "./src/network/index.js":
/*!******************************!*\
  !*** ./src/network/index.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _http = __webpack_require__(/*! ./http */ "./src/network/http.js");

var _http2 = _interopRequireDefault(_http);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    http: _http2.default
};

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2F1dGgvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2F1dGgvdXNlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL25ldHdvcmsvaHR0cC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbmV0d29yay9pbmRleC5qcyJdLCJuYW1lcyI6WyJ1c2VyIiwiZ2V0Q29kZSIsImNhbGxiYWNrIiwiJGxlbWl4IiwiY2FsbCIsImN1c3RvbXMiLCJjYWxsQ3VzdG9tIiwidHlwZSIsInN1Y2Nlc3MiLCJkYXRhIiwiY29kZSIsIkpTT04iLCJwYXJzZSIsIndpbmRvdyIsIiR6d3Rfc2RrIiwibmV0d29yayIsImF1dGgiLCJodHRwIiwiZG9jdW1lbnQiLCJ1bmRlZmluZWQiLCJyZWFkeVJFIiwiaWRTZWxlY3RvclJFIiwiY2xhc3NTZWxlY3RvclJFIiwidGFnU2VsZWN0b3JSRSIsInRyYW5zbGF0ZVJFIiwidHJhbnNsYXRlTWF0cml4UkUiLCIkIiwic2VsZWN0b3IiLCJjb250ZXh0Iiwid3JhcCIsImlzQXJyYXlMaWtlIiwic2xpY2UiLCJyZWFkeSIsInRyaW0iLCJ0ZXN0IiwiZm91bmQiLCJnZXRFbGVtZW50QnlJZCIsIlJlZ0V4cCIsIiQxIiwicXNhIiwiZSIsImRvbSIsIk9iamVjdCIsInNldFByb3RvdHlwZU9mIiwiZm4iLCJ1dWlkIiwiZXh0ZW5kIiwib3B0aW9ucyIsIm5hbWUiLCJzcmMiLCJjb3B5IiwiY29weUlzQXJyYXkiLCJjbG9uZSIsInRhcmdldCIsImFyZ3VtZW50cyIsImkiLCJsZW5ndGgiLCJkZWVwIiwiaXNGdW5jdGlvbiIsImlzUGxhaW5PYmplY3QiLCJpc0FycmF5Iiwibm9vcCIsImZpbHRlciIsIm9iaiIsIlN0cmluZyIsImNsYXNzMnR5cGUiLCJ0b1N0cmluZyIsIkFycmF5Iiwib2JqZWN0IiwiaXNXaW5kb3ciLCJpc09iamVjdCIsImdldFByb3RvdHlwZU9mIiwicHJvdG90eXBlIiwiaXNFbXB0eU9iamVjdCIsIm8iLCJwIiwidmFsdWUiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJxdWVyeVNlbGVjdG9yQWxsIiwicmVhZHlTdGF0ZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJidWZmZXIiLCJtcyIsInRpbWVyIiwibGFzdFN0YXJ0IiwibGFzdEVuZCIsInJ1biIsImNhbmNlbCIsIm5vdyIsImFwcGx5IiwibGF0ZXIiLCJzdG9wIiwiZWFjaCIsImVsZW1lbnRzIiwiaGFzT3duUHJvcGVydHkiLCJldmVyeSIsImVsIiwiaWR4Iiwia2V5IiwiZm9jdXMiLCJlbGVtZW50Iiwib3MiLCJpb3MiLCJzZXRUaW1lb3V0IiwidHJpZ2dlciIsImV2ZW50VHlwZSIsImV2ZW50RGF0YSIsImRpc3BhdGNoRXZlbnQiLCJDdXN0b21FdmVudCIsImRldGFpbCIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwiZ2V0U3R5bGVzIiwicHJvcGVydHkiLCJzdHlsZXMiLCJvd25lckRvY3VtZW50IiwiZGVmYXVsdFZpZXciLCJnZXRDb21wdXRlZFN0eWxlIiwiZ2V0UHJvcGVydHlWYWx1ZSIsInBhcnNlVHJhbnNsYXRlIiwidHJhbnNsYXRlU3RyaW5nIiwicG9zaXRpb24iLCJyZXN1bHQiLCJtYXRjaCIsInNwbGl0IiwieCIsInBhcnNlRmxvYXQiLCJ5IiwieiIsInBhcnNlVHJhbnNsYXRlTWF0cml4IiwibWF0cml4IiwiaXMzRCIsInB1c2giLCJob29rcyIsImFkZEFjdGlvbiIsImhvb2siLCJpbmRleCIsInNvcnQiLCJhIiwiYiIsImRvQWN0aW9uIiwiaGFuZGxlIiwid2hlbiIsIm0iLCJkIiwiZiIsInIiLCJpZCIsImNsZWFyVGltZW91dCIsIkRhdGUiLCJ0b0xvd2VyQ2FzZSIsInBhcnNlSlNPTiIsImRlZmluZSIsImpzb25UeXBlIiwiaHRtbFR5cGUiLCJyc2NyaXB0Iiwic2NyaXB0VHlwZVJFIiwieG1sVHlwZVJFIiwiYmxhbmtSRSIsImFqYXhTZXR0aW5ncyIsImJlZm9yZVNlbmQiLCJlcnJvciIsImNvbXBsZXRlIiwieGhyIiwicHJvdG9jb2wiLCJYTUxIdHRwUmVxdWVzdCIsImFjY2VwdHMiLCJzY3JpcHQiLCJqc29uIiwieG1sIiwiaHRtbCIsInRleHQiLCJ0aW1lb3V0IiwicHJvY2Vzc0RhdGEiLCJjYWNoZSIsImFqYXhCZWZvcmVTZW5kIiwic2V0dGluZ3MiLCJhamF4U3VjY2VzcyIsImFqYXhDb21wbGV0ZSIsImFqYXhFcnJvciIsInN0YXR1cyIsInNlcmlhbGl6ZSIsInBhcmFtcyIsInRyYWRpdGlvbmFsIiwic2NvcGUiLCJhcnJheSIsImhhc2giLCJhZGQiLCJzZXJpYWxpemVEYXRhIiwiY29udGVudFR5cGUiLCJoZWFkZXJzIiwiaW5kZXhPZiIsInN0cmluZ2lmeSIsInBhcmFtIiwidG9VcHBlckNhc2UiLCJ1cmwiLCJhcHBlbmRRdWVyeSIsInF1ZXJ5IiwicmVwbGFjZSIsIm1pbWVUb0RhdGFUeXBlIiwibWltZSIsInBhcnNlQXJndW1lbnRzIiwiZGF0YVR5cGUiLCJhamF4Iiwic2V0SGVhZGVyIiwibG9jYXRpb24iLCJuYXRpdmVTZXRIZWFkZXIiLCJzZXRSZXF1ZXN0SGVhZGVyIiwiYWJvcnRUaW1lb3V0IiwibWltZVR5cGUiLCJvdmVycmlkZU1pbWVUeXBlIiwib25yZWFkeXN0YXRlY2hhbmdlIiwiaXNMb2NhbCIsInJlc3BvbnNlVGV4dCIsImdldFJlc3BvbnNlSGVhZGVyIiwiZXZhbCIsInJlc3BvbnNlWE1MIiwic3RhdHVzVGV4dCIsImFib3J0IiwieGhyRmllbGRzIiwiYXN5bmMiLCJvcGVuIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsInNlbmQiLCJrIiwidiIsImVuY29kZVVSSUNvbXBvbmVudCIsImpvaW4iLCJnZXQiLCJwb3N0IiwiZ2V0SlNPTiIsImxvYWQiLCJzZWxmIiwicGFydHMiLCJyZXNwb25zZSIsImRpdiIsImNyZWF0ZUVsZW1lbnQiLCJpbm5lckhUTUwiLCJzZWxlY3RvckRpdiIsImNoaWxkcyIsImxlbiIsImFwcGVuZENoaWxkIiwiend0QWpheCIsImRhdGFvIiwiZXJyb3JPbGQiLCJlcnJvclRocm93biIsInJlc3AiLCJyZGF0YSIsInRleHRTdGF0dXMiLCJ4c2Vzc2lvbmlkIiwic3RvcmFnZSIsInNldExvY2FsU3RvcmFnZSIsImNhcmQiLCJjYXJkX25vIiwiZXJyb3JSZXMiLCJhbGVydCIsIm1lc3NhZ2UiLCJib2R5Il0sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQU07QUFDTjtBQUNBO0FBQ0EsY0FBTTtBQUNOO0FBQ0E7QUFDQSxjQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0EsZUFBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQUk7QUFDSjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQTZCO0FBQzdCLHFDQUE2QjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBcUIsZ0JBQWdCO0FBQ3JDO0FBQ0E7QUFDQSxhQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsNkJBQXFCLGdCQUFnQjtBQUNyQztBQUNBO0FBQ0EsYUFBSztBQUNMO0FBQ0E7QUFDQSxhQUFLO0FBQ0w7QUFDQTtBQUNBLGFBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxhQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQUs7QUFDTDtBQUNBO0FBQ0EsYUFBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLGFBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDBCQUFrQiw4QkFBOEI7QUFDaEQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBSTtBQUNKOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsWUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBLGVBQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQW9CLDJCQUEyQjtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBTztBQUNQO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSwyQkFBbUIsY0FBYztBQUNqQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esd0JBQWdCLEtBQUs7QUFDckI7QUFDQTtBQUNBO0FBQ0EsY0FBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBZ0IsWUFBWTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHNCQUFjLDRCQUE0QjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBTTtBQUNOOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQUk7O0FBRUo7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSx1QkFBZSw0QkFBNEI7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSx1QkFBZSw0QkFBNEI7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUFpQix1Q0FBdUM7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBaUIsdUNBQXVDO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQWlCLHNCQUFzQjtBQUN2QztBQUNBO0FBQ0E7QUFDQSxnQkFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0Esc0JBQWMsd0NBQXdDO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsZUFBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsWUFBSTtBQUNKOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOzs7QUFHQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esa0RBQTBDLGdDQUFnQztBQUMxRTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGdFQUF3RCxrQkFBa0I7QUFDMUU7QUFDQSx5REFBaUQsY0FBYztBQUMvRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaURBQXlDLGlDQUFpQztBQUMxRSx3SEFBZ0gsbUJBQW1CLEVBQUU7QUFDckk7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBMkIsMEJBQTBCLEVBQUU7QUFDdkQseUNBQWlDLGVBQWU7QUFDaEQ7QUFDQTtBQUNBOztBQUVBO0FBQ0EsOERBQXNELCtEQUErRDs7QUFFckg7QUFDQTs7QUFFQTtBQUNBLDhDQUFzQyx1QkFBdUI7OztBQUc3RDtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDdHhCQTs7Ozs7O2tCQUVlO0FBQ1hBO0FBRFcsQzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNGZixJQUFJQyxVQUFVLFNBQVZBLE9BQVUsQ0FBVUMsUUFBVixFQUFvQjtBQUM5QkMsV0FBT0MsSUFBUCxDQUFZQyxPQUFaLENBQW9CQyxVQUFwQixDQUErQjtBQUMzQkMsY0FBTSxTQURxQjtBQUUzQkMsaUJBQVMsaUJBQUNDLElBQUQsRUFBVTtBQUNmLGdCQUFJQyxPQUFPQyxLQUFLQyxLQUFMLENBQVdILElBQVgsRUFBaUJDLElBQTVCO0FBQ0FSLHFCQUFTUSxJQUFUO0FBQ0g7QUFMMEIsS0FBL0I7QUFPSCxDQVJEO2tCQVNlO0FBQ1hUO0FBRFcsQzs7Ozs7Ozs7Ozs7Ozs7QUNUZjs7OztBQUNBOzs7Ozs7QUFFQVksT0FBT0MsUUFBUCxHQUFrQjtBQUNkQyw4QkFEYztBQUVkQztBQUZjLENBQWxCLEM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDSEEsSUFBSUMsT0FBUSxVQUFTQyxRQUFULEVBQW1CQyxTQUFuQixFQUE4QjtBQUN0QyxRQUFJQyxVQUFVLDZCQUFkO0FBQ0EsUUFBSUMsZUFBZSxhQUFuQjtBQUNBLFFBQUlDLGtCQUFrQixjQUF0QjtBQUNBLFFBQUlDLGdCQUFnQixVQUFwQjtBQUNBLFFBQUlDLGNBQWMsMkJBQWxCO0FBQ0EsUUFBSUMsb0JBQW9CLHNCQUF4Qjs7QUFFQSxRQUFJQyxJQUFJLFNBQUpBLENBQUksQ0FBU0MsUUFBVCxFQUFtQkMsT0FBbkIsRUFBNEI7QUFDaENBLGtCQUFVQSxXQUFXVixRQUFyQjtBQUNBLFlBQUksQ0FBQ1MsUUFBTCxFQUNJLE9BQU9FLE1BQVA7QUFDSixZQUFJLFFBQU9GLFFBQVAseUNBQU9BLFFBQVAsT0FBb0IsUUFBeEIsRUFDSSxJQUFJRCxFQUFFSSxXQUFGLENBQWNILFFBQWQsQ0FBSixFQUE2QjtBQUN6QixtQkFBT0UsS0FBS0gsRUFBRUssS0FBRixDQUFRM0IsSUFBUixDQUFhdUIsUUFBYixDQUFMLEVBQTZCLElBQTdCLENBQVA7QUFDSCxTQUZELE1BRU87QUFDSCxtQkFBT0UsS0FBSyxDQUFDRixRQUFELENBQUwsRUFBaUIsSUFBakIsQ0FBUDtBQUNIO0FBQ0wsWUFBSSxPQUFPQSxRQUFQLEtBQW9CLFVBQXhCLEVBQ0ksT0FBT0QsRUFBRU0sS0FBRixDQUFRTCxRQUFSLENBQVA7QUFDSixZQUFJLE9BQU9BLFFBQVAsS0FBb0IsUUFBeEIsRUFBa0M7QUFDOUIsZ0JBQUk7QUFDQUEsMkJBQVdBLFNBQVNNLElBQVQsRUFBWDtBQUNBLG9CQUFJWixhQUFhYSxJQUFiLENBQWtCUCxRQUFsQixDQUFKLEVBQWlDO0FBQzdCLHdCQUFJUSxRQUFRakIsU0FBU2tCLGNBQVQsQ0FBd0JDLE9BQU9DLEVBQS9CLENBQVo7QUFDQSwyQkFBT1QsS0FBS00sUUFBUSxDQUFDQSxLQUFELENBQVIsR0FBa0IsRUFBdkIsQ0FBUDtBQUNIO0FBQ0QsdUJBQU9OLEtBQUtILEVBQUVhLEdBQUYsQ0FBTVosUUFBTixFQUFnQkMsT0FBaEIsQ0FBTCxFQUErQkQsUUFBL0IsQ0FBUDtBQUNILGFBUEQsQ0FPRSxPQUFPYSxDQUFQLEVBQVUsQ0FBRTtBQUNqQjtBQUNELGVBQU9YLE1BQVA7QUFDSCxLQXZCRDs7QUF5QkEsUUFBSUEsT0FBTyxTQUFQQSxJQUFPLENBQVNZLEdBQVQsRUFBY2QsUUFBZCxFQUF3QjtBQUMvQmMsY0FBTUEsT0FBTyxFQUFiO0FBQ0FDLGVBQU9DLGNBQVAsQ0FBc0JGLEdBQXRCLEVBQTJCZixFQUFFa0IsRUFBN0I7QUFDQUgsWUFBSWQsUUFBSixHQUFlQSxZQUFZLEVBQTNCO0FBQ0EsZUFBT2MsR0FBUDtBQUNILEtBTEQ7O0FBT0FmLE1BQUVtQixJQUFGLEdBQVMsQ0FBVDs7QUFFQW5CLE1BQUVqQixJQUFGLEdBQVMsRUFBVDtBQUNBOzs7Ozs7O0FBT0FpQixNQUFFb0IsTUFBRixHQUFXLFlBQVc7QUFBRTtBQUNwQixZQUFJQyxPQUFKO0FBQUEsWUFBYUMsSUFBYjtBQUFBLFlBQW1CQyxHQUFuQjtBQUFBLFlBQXdCQyxJQUF4QjtBQUFBLFlBQThCQyxXQUE5QjtBQUFBLFlBQTJDQyxLQUEzQztBQUFBLFlBQ0lDLFNBQVNDLFVBQVUsQ0FBVixLQUFnQixFQUQ3QjtBQUFBLFlBRUlDLElBQUksQ0FGUjtBQUFBLFlBR0lDLFNBQVNGLFVBQVVFLE1BSHZCO0FBQUEsWUFJSUMsT0FBTyxLQUpYOztBQU1BLFlBQUksT0FBT0osTUFBUCxLQUFrQixTQUF0QixFQUFpQztBQUM3QkksbUJBQU9KLE1BQVA7O0FBRUFBLHFCQUFTQyxVQUFVQyxDQUFWLEtBQWdCLEVBQXpCO0FBQ0FBO0FBQ0g7O0FBRUQsWUFBSSxRQUFPRixNQUFQLHlDQUFPQSxNQUFQLE9BQWtCLFFBQWxCLElBQThCLENBQUMzQixFQUFFZ0MsVUFBRixDQUFhTCxNQUFiLENBQW5DLEVBQXlEO0FBQ3JEQSxxQkFBUyxFQUFUO0FBQ0g7O0FBRUQsWUFBSUUsTUFBTUMsTUFBVixFQUFrQjtBQUNkSCxxQkFBUyxJQUFUO0FBQ0FFO0FBQ0g7O0FBRUQsZUFBT0EsSUFBSUMsTUFBWCxFQUFtQkQsR0FBbkIsRUFBd0I7QUFDcEIsZ0JBQUksQ0FBQ1IsVUFBVU8sVUFBVUMsQ0FBVixDQUFYLEtBQTRCLElBQWhDLEVBQXNDO0FBQ2xDLHFCQUFLUCxJQUFMLElBQWFELE9BQWIsRUFBc0I7QUFDbEJFLDBCQUFNSSxPQUFPTCxJQUFQLENBQU47QUFDQUUsMkJBQU9ILFFBQVFDLElBQVIsQ0FBUDs7QUFFQSx3QkFBSUssV0FBV0gsSUFBZixFQUFxQjtBQUNqQjtBQUNIOztBQUVELHdCQUFJTyxRQUFRUCxJQUFSLEtBQWlCeEIsRUFBRWlDLGFBQUYsQ0FBZ0JULElBQWhCLE1BQTBCQyxjQUFjekIsRUFBRWtDLE9BQUYsQ0FBVVYsSUFBVixDQUF4QyxDQUFqQixDQUFKLEVBQWdGO0FBQzVFLDRCQUFJQyxXQUFKLEVBQWlCO0FBQ2JBLDBDQUFjLEtBQWQ7QUFDQUMsb0NBQVFILE9BQU92QixFQUFFa0MsT0FBRixDQUFVWCxHQUFWLENBQVAsR0FBd0JBLEdBQXhCLEdBQThCLEVBQXRDO0FBRUgseUJBSkQsTUFJTztBQUNIRyxvQ0FBUUgsT0FBT3ZCLEVBQUVpQyxhQUFGLENBQWdCVixHQUFoQixDQUFQLEdBQThCQSxHQUE5QixHQUFvQyxFQUE1QztBQUNIOztBQUVESSwrQkFBT0wsSUFBUCxJQUFldEIsRUFBRW9CLE1BQUYsQ0FBU1csSUFBVCxFQUFlTCxLQUFmLEVBQXNCRixJQUF0QixDQUFmO0FBRUgscUJBWEQsTUFXTyxJQUFJQSxTQUFTL0IsU0FBYixFQUF3QjtBQUMzQmtDLCtCQUFPTCxJQUFQLElBQWVFLElBQWY7QUFDSDtBQUNKO0FBQ0o7QUFDSjs7QUFFRCxlQUFPRyxNQUFQO0FBQ0gsS0FwREQ7QUFxREE7OztBQUdBM0IsTUFBRW1DLElBQUYsR0FBUyxZQUFXLENBQUUsQ0FBdEI7QUFDQTs7O0FBR0FuQyxNQUFFSyxLQUFGLEdBQVUsR0FBR0EsS0FBYjtBQUNBOzs7QUFHQUwsTUFBRW9DLE1BQUYsR0FBVyxHQUFHQSxNQUFkOztBQUVBcEMsTUFBRW5CLElBQUYsR0FBUyxVQUFTd0QsR0FBVCxFQUFjO0FBQ25CLGVBQU9BLE9BQU8sSUFBUCxHQUFjQyxPQUFPRCxHQUFQLENBQWQsR0FBNEJFLFdBQVcsR0FBR0MsUUFBSCxDQUFZOUQsSUFBWixDQUFpQjJELEdBQWpCLENBQVgsS0FBcUMsUUFBeEU7QUFDSCxLQUZEO0FBR0E7OztBQUdBckMsTUFBRWtDLE9BQUYsR0FBWU8sTUFBTVAsT0FBTixJQUNSLFVBQVNRLE1BQVQsRUFBaUI7QUFDYixlQUFPQSxrQkFBa0JELEtBQXpCO0FBQ0gsS0FITDtBQUlBOzs7O0FBSUF6QyxNQUFFSSxXQUFGLEdBQWdCLFVBQVNpQyxHQUFULEVBQWM7QUFDMUIsWUFBSVAsU0FBUyxDQUFDLENBQUNPLEdBQUYsSUFBUyxZQUFZQSxHQUFyQixJQUE0QkEsSUFBSVAsTUFBN0M7QUFDQSxZQUFJakQsT0FBT21CLEVBQUVuQixJQUFGLENBQU93RCxHQUFQLENBQVg7QUFDQSxZQUFJeEQsU0FBUyxVQUFULElBQXVCbUIsRUFBRTJDLFFBQUYsQ0FBV04sR0FBWCxDQUEzQixFQUE0QztBQUN4QyxtQkFBTyxLQUFQO0FBQ0g7QUFDRCxlQUFPeEQsU0FBUyxPQUFULElBQW9CaUQsV0FBVyxDQUEvQixJQUNILE9BQU9BLE1BQVAsS0FBa0IsUUFBbEIsSUFBOEJBLFNBQVMsQ0FBdkMsSUFBNkNBLFNBQVMsQ0FBVixJQUFnQk8sR0FEaEU7QUFFSCxLQVJEO0FBU0E7OztBQUdBckMsTUFBRTJDLFFBQUYsR0FBYSxVQUFTTixHQUFULEVBQWM7QUFDdkIsZUFBT0EsT0FBTyxJQUFQLElBQWVBLFFBQVFBLElBQUlsRCxNQUFsQztBQUNILEtBRkQ7QUFHQTs7O0FBR0FhLE1BQUU0QyxRQUFGLEdBQWEsVUFBU1AsR0FBVCxFQUFjO0FBQ3ZCLGVBQU9yQyxFQUFFbkIsSUFBRixDQUFPd0QsR0FBUCxNQUFnQixRQUF2QjtBQUNILEtBRkQ7QUFHQTs7O0FBR0FyQyxNQUFFaUMsYUFBRixHQUFrQixVQUFTSSxHQUFULEVBQWM7QUFDNUIsZUFBT3JDLEVBQUU0QyxRQUFGLENBQVdQLEdBQVgsS0FBbUIsQ0FBQ3JDLEVBQUUyQyxRQUFGLENBQVdOLEdBQVgsQ0FBcEIsSUFBdUNyQixPQUFPNkIsY0FBUCxDQUFzQlIsR0FBdEIsTUFBK0JyQixPQUFPOEIsU0FBcEY7QUFDSCxLQUZEO0FBR0E7Ozs7QUFJQTlDLE1BQUUrQyxhQUFGLEdBQWtCLFVBQVNDLENBQVQsRUFBWTtBQUMxQixhQUFLLElBQUlDLENBQVQsSUFBY0QsQ0FBZCxFQUFpQjtBQUNiLGdCQUFJQyxNQUFNeEQsU0FBVixFQUFxQjtBQUNqQix1QkFBTyxLQUFQO0FBQ0g7QUFDSjtBQUNELGVBQU8sSUFBUDtBQUNILEtBUEQ7QUFRQTs7O0FBR0FPLE1BQUVnQyxVQUFGLEdBQWUsVUFBU2tCLEtBQVQsRUFBZ0I7QUFDM0IsZUFBT2xELEVBQUVuQixJQUFGLENBQU9xRSxLQUFQLE1BQWtCLFVBQXpCO0FBQ0gsS0FGRDtBQUdBOzs7Ozs7QUFNQWxELE1BQUVhLEdBQUYsR0FBUSxVQUFTWixRQUFULEVBQW1CQyxPQUFuQixFQUE0QjtBQUNoQ0Esa0JBQVVBLFdBQVdWLFFBQXJCO0FBQ0EsZUFBT1EsRUFBRUssS0FBRixDQUFRM0IsSUFBUixDQUFha0IsZ0JBQWdCWSxJQUFoQixDQUFxQlAsUUFBckIsSUFBaUNDLFFBQVFpRCxzQkFBUixDQUErQnhDLE9BQU9DLEVBQXRDLENBQWpDLEdBQTZFZixjQUFjVyxJQUFkLENBQW1CUCxRQUFuQixJQUErQkMsUUFBUWtELG9CQUFSLENBQTZCbkQsUUFBN0IsQ0FBL0IsR0FBd0VDLFFBQVFtRCxnQkFBUixDQUF5QnBELFFBQXpCLENBQWxLLENBQVA7QUFDSCxLQUhEO0FBSUE7Ozs7O0FBS0FELE1BQUVNLEtBQUYsR0FBVSxVQUFTOUIsUUFBVCxFQUFtQjtBQUN6QixZQUFJa0IsUUFBUWMsSUFBUixDQUFhaEIsU0FBUzhELFVBQXRCLENBQUosRUFBdUM7QUFDbkM5RSxxQkFBU3dCLENBQVQ7QUFDSCxTQUZELE1BRU87QUFDSFIscUJBQVMrRCxnQkFBVCxDQUEwQixrQkFBMUIsRUFBOEMsWUFBVztBQUNyRC9FLHlCQUFTd0IsQ0FBVDtBQUNILGFBRkQsRUFFRyxLQUZIO0FBR0g7QUFDRCxlQUFPLElBQVA7QUFDSCxLQVREO0FBVUE7Ozs7Ozs7OztBQVNBQSxNQUFFd0QsTUFBRixHQUFXLFVBQVN0QyxFQUFULEVBQWF1QyxFQUFiLEVBQWlCdkQsT0FBakIsRUFBMEI7QUFDakMsWUFBSXdELEtBQUo7QUFDQSxZQUFJQyxZQUFZLENBQWhCO0FBQ0EsWUFBSUMsVUFBVSxDQUFkO0FBQ0EsWUFBSUgsS0FBS0EsTUFBTSxHQUFmOztBQUVBLGlCQUFTSSxHQUFULEdBQWU7QUFDWCxnQkFBSUgsS0FBSixFQUFXO0FBQ1BBLHNCQUFNSSxNQUFOO0FBQ0FKLHdCQUFRLENBQVI7QUFDSDtBQUNEQyx3QkFBWTNELEVBQUUrRCxHQUFGLEVBQVo7QUFDQTdDLGVBQUc4QyxLQUFILENBQVM5RCxXQUFXLElBQXBCLEVBQTBCMEIsU0FBMUI7QUFDQWdDLHNCQUFVNUQsRUFBRStELEdBQUYsRUFBVjtBQUNIOztBQUVELGVBQU8vRCxFQUFFb0IsTUFBRixDQUFTLFlBQVc7QUFDdkIsZ0JBQ0ssQ0FBQ3VDLFNBQUYsSUFBZ0I7QUFDZkMsdUJBQVdELFNBQVgsSUFBd0IzRCxFQUFFK0QsR0FBRixLQUFVSCxPQUFWLEdBQW9CSCxFQUQ3QyxJQUNvRDtBQUNuREcsc0JBQVVELFNBQVYsSUFBdUIzRCxFQUFFK0QsR0FBRixLQUFVSixTQUFWLEdBQXNCRixLQUFLLENBSHZELENBRzBEO0FBSDFELGNBSUU7QUFDRUksd0JBQUlHLEtBQUosQ0FBVSxJQUFWLEVBQWdCcEMsU0FBaEI7QUFDSCxpQkFORCxNQU1PO0FBQ0gsb0JBQUk4QixLQUFKLEVBQVc7QUFDUEEsMEJBQU1JLE1BQU47QUFDSDtBQUNESix3QkFBUTFELEVBQUVpRSxLQUFGLENBQVFKLEdBQVIsRUFBYUosRUFBYixFQUFpQixJQUFqQixFQUF1QnpELEVBQUVLLEtBQUYsQ0FBUTNCLElBQVIsQ0FBYWtELFNBQWIsQ0FBdkIsQ0FBUjtBQUNIO0FBQ0osU0FiTSxFQWFKO0FBQ0NzQyxrQkFBTSxnQkFBVztBQUNiLG9CQUFJUixLQUFKLEVBQVc7QUFDUEEsMEJBQU1JLE1BQU47QUFDQUosNEJBQVEsQ0FBUjtBQUNIO0FBQ0o7QUFORixTQWJJLENBQVA7QUFxQkgsS0FyQ0Q7QUFzQ0E7Ozs7OztBQU1BMUQsTUFBRW1FLElBQUYsR0FBUyxVQUFTQyxRQUFULEVBQW1CNUYsUUFBbkIsRUFBNkI2RixjQUE3QixFQUE2QztBQUNsRCxZQUFJLENBQUNELFFBQUwsRUFBZTtBQUNYLG1CQUFPLElBQVA7QUFDSDtBQUNELFlBQUksT0FBT0EsU0FBU3RDLE1BQWhCLEtBQTJCLFFBQS9CLEVBQXlDO0FBQ3JDLGVBQUd3QyxLQUFILENBQVM1RixJQUFULENBQWMwRixRQUFkLEVBQXdCLFVBQVNHLEVBQVQsRUFBYUMsR0FBYixFQUFrQjtBQUN0Qyx1QkFBT2hHLFNBQVNFLElBQVQsQ0FBYzZGLEVBQWQsRUFBa0JDLEdBQWxCLEVBQXVCRCxFQUF2QixNQUErQixLQUF0QztBQUNILGFBRkQ7QUFHSCxTQUpELE1BSU87QUFDSCxpQkFBSyxJQUFJRSxHQUFULElBQWdCTCxRQUFoQixFQUEwQjtBQUN0QixvQkFBSUMsY0FBSixFQUFvQjtBQUNoQix3QkFBSUQsU0FBU0MsY0FBVCxDQUF3QkksR0FBeEIsQ0FBSixFQUFrQztBQUM5Qiw0QkFBSWpHLFNBQVNFLElBQVQsQ0FBYzBGLFNBQVNLLEdBQVQsQ0FBZCxFQUE2QkEsR0FBN0IsRUFBa0NMLFNBQVNLLEdBQVQsQ0FBbEMsTUFBcUQsS0FBekQsRUFBZ0UsT0FBT0wsUUFBUDtBQUNuRTtBQUNKLGlCQUpELE1BSU87QUFDSCx3QkFBSTVGLFNBQVNFLElBQVQsQ0FBYzBGLFNBQVNLLEdBQVQsQ0FBZCxFQUE2QkEsR0FBN0IsRUFBa0NMLFNBQVNLLEdBQVQsQ0FBbEMsTUFBcUQsS0FBekQsRUFBZ0UsT0FBT0wsUUFBUDtBQUNuRTtBQUNKO0FBQ0o7QUFDRCxlQUFPLElBQVA7QUFDSCxLQXBCRDtBQXFCQXBFLE1BQUUwRSxLQUFGLEdBQVUsVUFBU0MsT0FBVCxFQUFrQjtBQUN4QixZQUFJM0UsRUFBRTRFLEVBQUYsQ0FBS0MsR0FBVCxFQUFjO0FBQ1ZDLHVCQUFXLFlBQVc7QUFDbEJILHdCQUFRRCxLQUFSO0FBQ0gsYUFGRCxFQUVHLEVBRkg7QUFHSCxTQUpELE1BSU87QUFDSEMsb0JBQVFELEtBQVI7QUFDSDtBQUNKLEtBUkQ7QUFTQTs7Ozs7OztBQU9BMUUsTUFBRStFLE9BQUYsR0FBWSxVQUFTSixPQUFULEVBQWtCSyxTQUFsQixFQUE2QkMsU0FBN0IsRUFBd0M7QUFDaEROLGdCQUFRTyxhQUFSLENBQXNCLElBQUlDLFdBQUosQ0FBZ0JILFNBQWhCLEVBQTJCO0FBQzdDSSxvQkFBUUgsU0FEcUM7QUFFN0NJLHFCQUFTLElBRm9DO0FBRzdDQyx3QkFBWTtBQUhpQyxTQUEzQixDQUF0QjtBQUtBLGVBQU8sSUFBUDtBQUNILEtBUEQ7QUFRQTs7Ozs7O0FBTUF0RixNQUFFdUYsU0FBRixHQUFjLFVBQVNaLE9BQVQsRUFBa0JhLFFBQWxCLEVBQTRCO0FBQ3RDLFlBQUlDLFNBQVNkLFFBQVFlLGFBQVIsQ0FBc0JDLFdBQXRCLENBQWtDQyxnQkFBbEMsQ0FBbURqQixPQUFuRCxFQUE0RCxJQUE1RCxDQUFiO0FBQ0EsWUFBSWEsUUFBSixFQUFjO0FBQ1YsbUJBQU9DLE9BQU9JLGdCQUFQLENBQXdCTCxRQUF4QixLQUFxQ0MsT0FBT0QsUUFBUCxDQUE1QztBQUNIO0FBQ0QsZUFBT0MsTUFBUDtBQUNILEtBTkQ7QUFPQTs7Ozs7O0FBTUF6RixNQUFFOEYsY0FBRixHQUFtQixVQUFTQyxlQUFULEVBQTBCQyxRQUExQixFQUFvQztBQUNuRCxZQUFJQyxTQUFTRixnQkFBZ0JHLEtBQWhCLENBQXNCcEcsZUFBZSxFQUFyQyxDQUFiO0FBQ0EsWUFBSSxDQUFDbUcsTUFBRCxJQUFXLENBQUNBLE9BQU8sQ0FBUCxDQUFoQixFQUEyQjtBQUN2QkEscUJBQVMsQ0FBQyxFQUFELEVBQUssT0FBTCxDQUFUO0FBQ0g7QUFDREEsaUJBQVNBLE9BQU8sQ0FBUCxFQUFVRSxLQUFWLENBQWdCLEdBQWhCLENBQVQ7QUFDQUYsaUJBQVM7QUFDTEcsZUFBR0MsV0FBV0osT0FBTyxDQUFQLENBQVgsQ0FERTtBQUVMSyxlQUFHRCxXQUFXSixPQUFPLENBQVAsQ0FBWCxDQUZFO0FBR0xNLGVBQUdGLFdBQVdKLE9BQU8sQ0FBUCxDQUFYO0FBSEUsU0FBVDtBQUtBLFlBQUlELFlBQVlDLE9BQU81QixjQUFQLENBQXNCMkIsUUFBdEIsQ0FBaEIsRUFBaUQ7QUFDN0MsbUJBQU9DLE9BQU9ELFFBQVAsQ0FBUDtBQUNIO0FBQ0QsZUFBT0MsTUFBUDtBQUNILEtBZkQ7QUFnQkE7Ozs7OztBQU1BakcsTUFBRXdHLG9CQUFGLEdBQXlCLFVBQVNULGVBQVQsRUFBMEJDLFFBQTFCLEVBQW9DO0FBQ3pELFlBQUlTLFNBQVNWLGdCQUFnQkcsS0FBaEIsQ0FBc0JuRyxpQkFBdEIsQ0FBYjtBQUNBLFlBQUkyRyxPQUFPRCxVQUFVQSxPQUFPLENBQVAsQ0FBckI7QUFDQSxZQUFJQSxNQUFKLEVBQVk7QUFDUkEscUJBQVNBLE9BQU8sQ0FBUCxFQUFVTixLQUFWLENBQWdCLEdBQWhCLENBQVQ7QUFDQSxnQkFBSU8sU0FBUyxJQUFiLEVBQ0lELFNBQVNBLE9BQU9wRyxLQUFQLENBQWEsRUFBYixFQUFpQixFQUFqQixDQUFULENBREosS0FFSztBQUNEb0csdUJBQU9FLElBQVAsQ0FBWSxDQUFaO0FBQ0FGLHlCQUFTQSxPQUFPcEcsS0FBUCxDQUFhLENBQWIsRUFBZ0IsQ0FBaEIsQ0FBVDtBQUNIO0FBQ0osU0FSRCxNQVFPO0FBQ0hvRyxxQkFBUyxDQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sQ0FBUCxDQUFUO0FBQ0g7QUFDRCxZQUFJUixTQUFTO0FBQ1RHLGVBQUdDLFdBQVdJLE9BQU8sQ0FBUCxDQUFYLENBRE07QUFFVEgsZUFBR0QsV0FBV0ksT0FBTyxDQUFQLENBQVgsQ0FGTTtBQUdURixlQUFHRixXQUFXSSxPQUFPLENBQVAsQ0FBWDtBQUhNLFNBQWI7QUFLQSxZQUFJVCxZQUFZQyxPQUFPNUIsY0FBUCxDQUFzQjJCLFFBQXRCLENBQWhCLEVBQWlEO0FBQzdDLG1CQUFPQyxPQUFPRCxRQUFQLENBQVA7QUFDSDtBQUNELGVBQU9DLE1BQVA7QUFDSCxLQXZCRDtBQXdCQWpHLE1BQUU0RyxLQUFGLEdBQVUsRUFBVjtBQUNBNUcsTUFBRTZHLFNBQUYsR0FBYyxVQUFTaEksSUFBVCxFQUFlaUksSUFBZixFQUFxQjtBQUMvQixZQUFJRixRQUFRNUcsRUFBRTRHLEtBQUYsQ0FBUS9ILElBQVIsQ0FBWjtBQUNBLFlBQUksQ0FBQytILEtBQUwsRUFBWTtBQUNSQSxvQkFBUSxFQUFSO0FBQ0g7QUFDREUsYUFBS0MsS0FBTCxHQUFhRCxLQUFLQyxLQUFMLElBQWMsSUFBM0I7QUFDQUgsY0FBTUQsSUFBTixDQUFXRyxJQUFYO0FBQ0FGLGNBQU1JLElBQU4sQ0FBVyxVQUFTQyxDQUFULEVBQVlDLENBQVosRUFBZTtBQUN0QixtQkFBT0QsRUFBRUYsS0FBRixHQUFVRyxFQUFFSCxLQUFuQjtBQUNILFNBRkQ7QUFHQS9HLFVBQUU0RyxLQUFGLENBQVEvSCxJQUFSLElBQWdCK0gsS0FBaEI7QUFDQSxlQUFPNUcsRUFBRTRHLEtBQUYsQ0FBUS9ILElBQVIsQ0FBUDtBQUNILEtBWkQ7QUFhQW1CLE1BQUVtSCxRQUFGLEdBQWEsVUFBU3RJLElBQVQsRUFBZUwsUUFBZixFQUF5QjtBQUNsQyxZQUFJd0IsRUFBRWdDLFVBQUYsQ0FBYXhELFFBQWIsQ0FBSixFQUE0QjtBQUFFO0FBQzFCd0IsY0FBRW1FLElBQUYsQ0FBT25FLEVBQUU0RyxLQUFGLENBQVEvSCxJQUFSLENBQVAsRUFBc0JMLFFBQXRCO0FBQ0gsU0FGRCxNQUVPO0FBQUU7QUFDTHdCLGNBQUVtRSxJQUFGLENBQU9uRSxFQUFFNEcsS0FBRixDQUFRL0gsSUFBUixDQUFQLEVBQXNCLFVBQVNrSSxLQUFULEVBQWdCRCxJQUFoQixFQUFzQjtBQUN4Qyx1QkFBTyxDQUFDQSxLQUFLTSxNQUFMLEVBQVI7QUFDSCxhQUZEO0FBR0g7QUFDSixLQVJEO0FBU0E7Ozs7Ozs7QUFPQXBILE1BQUVpRSxLQUFGLEdBQVUsVUFBUy9DLEVBQVQsRUFBYW1HLElBQWIsRUFBbUJuSCxPQUFuQixFQUE0Qm5CLElBQTVCLEVBQWtDO0FBQ3hDc0ksZUFBT0EsUUFBUSxDQUFmO0FBQ0EsWUFBSUMsSUFBSXBHLEVBQVI7QUFDQSxZQUFJcUcsSUFBSXhJLElBQVI7QUFDQSxZQUFJeUksQ0FBSjtBQUNBLFlBQUlDLENBQUo7O0FBRUEsWUFBSSxPQUFPdkcsRUFBUCxLQUFjLFFBQWxCLEVBQTRCO0FBQ3hCb0csZ0JBQUlwSCxRQUFRZ0IsRUFBUixDQUFKO0FBQ0g7O0FBRURzRyxZQUFJLGFBQVc7QUFDWEYsY0FBRXRELEtBQUYsQ0FBUTlELE9BQVIsRUFBaUJGLEVBQUVrQyxPQUFGLENBQVVxRixDQUFWLElBQWVBLENBQWYsR0FBbUIsQ0FBQ0EsQ0FBRCxDQUFwQztBQUNILFNBRkQ7O0FBSUFFLFlBQUkzQyxXQUFXMEMsQ0FBWCxFQUFjSCxJQUFkLENBQUo7O0FBRUEsZUFBTztBQUNISyxnQkFBSUQsQ0FERDtBQUVIM0Qsb0JBQVEsa0JBQVc7QUFDZjZELDZCQUFhRixDQUFiO0FBQ0g7QUFKRSxTQUFQO0FBTUgsS0F2QkQ7QUF3QkF6SCxNQUFFK0QsR0FBRixHQUFRNkQsS0FBSzdELEdBQUwsSUFBWSxZQUFXO0FBQzNCLGVBQU8sQ0FBQyxJQUFJNkQsSUFBSixFQUFSO0FBQ0gsS0FGRDtBQUdBLFFBQUlyRixhQUFhLEVBQWpCO0FBQ0F2QyxNQUFFbUUsSUFBRixDQUFPLENBQUMsU0FBRCxFQUFZLFFBQVosRUFBc0IsUUFBdEIsRUFBZ0MsVUFBaEMsRUFBNEMsT0FBNUMsRUFBcUQsTUFBckQsRUFBNkQsUUFBN0QsRUFBdUUsUUFBdkUsRUFBaUYsT0FBakYsQ0FBUCxFQUFrRyxVQUFTdEMsQ0FBVCxFQUFZUCxJQUFaLEVBQWtCO0FBQ2hIaUIsbUJBQVcsYUFBYWpCLElBQWIsR0FBb0IsR0FBL0IsSUFBc0NBLEtBQUt1RyxXQUFMLEVBQXRDO0FBQ0gsS0FGRDtBQUdBLFFBQUkxSSxPQUFPRixJQUFYLEVBQWlCO0FBQ2JlLFVBQUU4SCxTQUFGLEdBQWM3SSxLQUFLQyxLQUFuQjtBQUNIO0FBQ0Q7OztBQUdBYyxNQUFFa0IsRUFBRixHQUFPO0FBQ0hpRCxjQUFNLGNBQVMzRixRQUFULEVBQW1CO0FBQ3JCLGVBQUc4RixLQUFILENBQVM1RixJQUFULENBQWMsSUFBZCxFQUFvQixVQUFTNkYsRUFBVCxFQUFhQyxHQUFiLEVBQWtCO0FBQ2xDLHVCQUFPaEcsU0FBU0UsSUFBVCxDQUFjNkYsRUFBZCxFQUFrQkMsR0FBbEIsRUFBdUJELEVBQXZCLE1BQStCLEtBQXRDO0FBQ0gsYUFGRDtBQUdBLG1CQUFPLElBQVA7QUFDSDtBQU5FLEtBQVA7O0FBU0E7OztBQUdBLFFBQUksSUFBSixFQUFnRDtBQUM1Q3dELFFBQUEsaUNBQWMsRUFBZCxtQ0FBa0IsWUFBVztBQUN6QixtQkFBTy9ILENBQVA7QUFDSCxTQUZEO0FBQUE7QUFHSDs7QUFFRCxXQUFPQSxDQUFQO0FBQ0gsQ0FqY1UsQ0FpY1JSLFFBamNRLENBQVg7QUFrY0EsQ0FBQyxVQUFVUSxDQUFWLEVBQWFiLE1BQWIsRUFBcUJNLFNBQXJCLEVBQWdDO0FBQzdCLFFBQUl1SSxXQUFXLGtCQUFmO0FBQ0EsUUFBSUMsV0FBVyxXQUFmO0FBQ0EsUUFBSUMsVUFBVSxxREFBZDtBQUNBLFFBQUlDLGVBQWUsb0NBQW5CO0FBQ0EsUUFBSUMsWUFBWSw2QkFBaEI7QUFDQSxRQUFJQyxVQUFVLE9BQWQ7O0FBRUFySSxNQUFFc0ksWUFBRixHQUFpQjtBQUNiekosY0FBTSxLQURPO0FBRWIwSixvQkFBWXZJLEVBQUVtQyxJQUZEO0FBR2JyRCxpQkFBU2tCLEVBQUVtQyxJQUhFO0FBSWJxRyxlQUFPeEksRUFBRW1DLElBSkk7QUFLYnNHLGtCQUFVekksRUFBRW1DLElBTEM7QUFNYmpDLGlCQUFTLElBTkk7QUFPYndJLGFBQUssYUFBVUMsUUFBVixFQUFvQjtBQUNyQixtQkFBTyxJQUFJeEosT0FBT3lKLGNBQVgsRUFBUDtBQUNILFNBVFk7QUFVYkMsaUJBQVM7QUFDTEMsb0JBQVEsbUVBREg7QUFFTEMsa0JBQU1mLFFBRkQ7QUFHTGdCLGlCQUFLLDJCQUhBO0FBSUxDLGtCQUFNaEIsUUFKRDtBQUtMaUIsa0JBQU07QUFMRCxTQVZJO0FBaUJiQyxpQkFBUyxDQWpCSTtBQWtCYkMscUJBQWEsSUFsQkE7QUFtQmJDLGVBQU87QUFuQk0sS0FBakI7QUFxQkEsUUFBSUMsaUJBQWlCLFNBQWpCQSxjQUFpQixDQUFVWixHQUFWLEVBQWVhLFFBQWYsRUFBeUI7QUFDMUMsWUFBSXJKLFVBQVVxSixTQUFTckosT0FBdkI7QUFDQSxZQUFJcUosU0FBU2hCLFVBQVQsQ0FBb0I3SixJQUFwQixDQUF5QndCLE9BQXpCLEVBQWtDd0ksR0FBbEMsRUFBdUNhLFFBQXZDLE1BQXFELEtBQXpELEVBQWdFO0FBQzVELG1CQUFPLEtBQVA7QUFDSDtBQUNKLEtBTEQ7QUFNQSxRQUFJQyxjQUFjLFNBQWRBLFdBQWMsQ0FBVXpLLElBQVYsRUFBZ0IySixHQUFoQixFQUFxQmEsUUFBckIsRUFBK0I7QUFDN0NBLGlCQUFTekssT0FBVCxDQUFpQkosSUFBakIsQ0FBc0I2SyxTQUFTckosT0FBL0IsRUFBd0NuQixJQUF4QyxFQUE4QyxTQUE5QyxFQUF5RDJKLEdBQXpEO0FBQ0FlLHFCQUFhLFNBQWIsRUFBd0JmLEdBQXhCLEVBQTZCYSxRQUE3QjtBQUNILEtBSEQ7QUFJQTtBQUNBLFFBQUlHLFlBQVksU0FBWkEsU0FBWSxDQUFVbEIsS0FBVixFQUFpQjNKLElBQWpCLEVBQXVCNkosR0FBdkIsRUFBNEJhLFFBQTVCLEVBQXNDO0FBQ2xEQSxpQkFBU2YsS0FBVCxDQUFlOUosSUFBZixDQUFvQjZLLFNBQVNySixPQUE3QixFQUFzQ3dJLEdBQXRDLEVBQTJDN0osSUFBM0MsRUFBaUQySixLQUFqRDtBQUNBaUIscUJBQWE1SyxJQUFiLEVBQW1CNkosR0FBbkIsRUFBd0JhLFFBQXhCO0FBQ0gsS0FIRDtBQUlBO0FBQ0EsUUFBSUUsZUFBZSxTQUFmQSxZQUFlLENBQVVFLE1BQVYsRUFBa0JqQixHQUFsQixFQUF1QmEsUUFBdkIsRUFBaUM7QUFDaERBLGlCQUFTZCxRQUFULENBQWtCL0osSUFBbEIsQ0FBdUI2SyxTQUFTckosT0FBaEMsRUFBeUN3SSxHQUF6QyxFQUE4Q2lCLE1BQTlDO0FBQ0gsS0FGRDs7QUFJQSxRQUFJQyxZQUFZLFNBQVpBLFNBQVksQ0FBVUMsTUFBVixFQUFrQnhILEdBQWxCLEVBQXVCeUgsV0FBdkIsRUFBb0NDLEtBQXBDLEVBQTJDO0FBQ3ZELFlBQUlsTCxJQUFKO0FBQUEsWUFBVW1MLFFBQVFoSyxFQUFFa0MsT0FBRixDQUFVRyxHQUFWLENBQWxCO0FBQUEsWUFDSTRILE9BQU9qSyxFQUFFaUMsYUFBRixDQUFnQkksR0FBaEIsQ0FEWDtBQUVBckMsVUFBRW1FLElBQUYsQ0FBTzlCLEdBQVAsRUFBWSxVQUFVb0MsR0FBVixFQUFldkIsS0FBZixFQUFzQjtBQUM5QnJFLG1CQUFPbUIsRUFBRW5CLElBQUYsQ0FBT3FFLEtBQVAsQ0FBUDtBQUNBLGdCQUFJNkcsS0FBSixFQUFXO0FBQ1B0RixzQkFBTXFGLGNBQWNDLEtBQWQsR0FDRkEsUUFBUSxHQUFSLElBQWVFLFFBQVFwTCxTQUFTLFFBQWpCLElBQTZCQSxTQUFTLE9BQXRDLEdBQWdENEYsR0FBaEQsR0FBc0QsRUFBckUsSUFBMkUsR0FEL0U7QUFFSDtBQUNEO0FBQ0EsZ0JBQUksQ0FBQ3NGLEtBQUQsSUFBVUMsS0FBZCxFQUFxQjtBQUNqQkgsdUJBQU9LLEdBQVAsQ0FBV2hILE1BQU01QixJQUFqQixFQUF1QjRCLE1BQU1BLEtBQTdCO0FBQ0g7QUFDRDtBQUhBLGlCQUlLLElBQUlyRSxTQUFTLE9BQVQsSUFBcUIsQ0FBQ2lMLFdBQUQsSUFBZ0JqTCxTQUFTLFFBQWxELEVBQTZEO0FBQzlEK0ssOEJBQVVDLE1BQVYsRUFBa0IzRyxLQUFsQixFQUF5QjRHLFdBQXpCLEVBQXNDckYsR0FBdEM7QUFDSCxpQkFGSSxNQUVFO0FBQ0hvRiwyQkFBT0ssR0FBUCxDQUFXekYsR0FBWCxFQUFnQnZCLEtBQWhCO0FBQ0g7QUFDSixTQWhCRDtBQWlCSCxLQXBCRDtBQXFCQSxRQUFJaUgsZ0JBQWdCLFNBQWhCQSxhQUFnQixDQUFVOUksT0FBVixFQUFtQjtBQUNuQyxZQUFJQSxRQUFRK0gsV0FBUixJQUF1Qi9ILFFBQVF0QyxJQUEvQixJQUF1QyxPQUFPc0MsUUFBUXRDLElBQWYsS0FBd0IsUUFBbkUsRUFBNkU7QUFDekUsZ0JBQUlxTCxjQUFjL0ksUUFBUStJLFdBQTFCO0FBQ0EsZ0JBQUksQ0FBQ0EsV0FBRCxJQUFnQi9JLFFBQVFnSixPQUE1QixFQUFxQztBQUNqQ0QsOEJBQWMvSSxRQUFRZ0osT0FBUixDQUFnQixjQUFoQixDQUFkO0FBQ0g7QUFDRCxnQkFBSUQsZUFBZSxDQUFDQSxZQUFZRSxPQUFaLENBQW9CdEMsUUFBcEIsQ0FBcEIsRUFBbUQ7QUFBRTtBQUNqRDNHLHdCQUFRdEMsSUFBUixHQUFlRSxLQUFLc0wsU0FBTCxDQUFlbEosUUFBUXRDLElBQXZCLENBQWY7QUFDSCxhQUZELE1BRU87QUFDSHNDLHdCQUFRdEMsSUFBUixHQUFlaUIsRUFBRXdLLEtBQUYsQ0FBUW5KLFFBQVF0QyxJQUFoQixFQUFzQnNDLFFBQVF5SSxXQUE5QixDQUFmO0FBQ0g7QUFDSjtBQUNELFlBQUl6SSxRQUFRdEMsSUFBUixLQUFpQixDQUFDc0MsUUFBUXhDLElBQVQsSUFBaUJ3QyxRQUFReEMsSUFBUixDQUFhNEwsV0FBYixPQUErQixLQUFqRSxDQUFKLEVBQTZFO0FBQ3pFcEosb0JBQVFxSixHQUFSLEdBQWNDLFlBQVl0SixRQUFRcUosR0FBcEIsRUFBeUJySixRQUFRdEMsSUFBakMsQ0FBZDtBQUNBc0Msb0JBQVF0QyxJQUFSLEdBQWVVLFNBQWY7QUFDSDtBQUNKLEtBaEJEO0FBaUJBLFFBQUlrTCxjQUFjLFNBQWRBLFdBQWMsQ0FBVUQsR0FBVixFQUFlRSxLQUFmLEVBQXNCO0FBQ3BDLFlBQUlBLFVBQVUsRUFBZCxFQUFrQjtBQUNkLG1CQUFPRixHQUFQO0FBQ0g7QUFDRCxlQUFPLENBQUNBLE1BQU0sR0FBTixHQUFZRSxLQUFiLEVBQW9CQyxPQUFwQixDQUE0QixXQUE1QixFQUF5QyxHQUF6QyxDQUFQO0FBQ0gsS0FMRDtBQU1BLFFBQUlDLGlCQUFpQixTQUFqQkEsY0FBaUIsQ0FBVUMsSUFBVixFQUFnQjtBQUNqQyxZQUFJQSxJQUFKLEVBQVU7QUFDTkEsbUJBQU9BLEtBQUs1RSxLQUFMLENBQVcsR0FBWCxFQUFnQixDQUFoQixFQUFtQixDQUFuQixDQUFQO0FBQ0g7QUFDRCxlQUFPNEUsU0FBU0EsU0FBUzlDLFFBQVQsR0FBb0IsTUFBcEIsR0FDWjhDLFNBQVMvQyxRQUFULEdBQW9CLE1BQXBCLEdBQ0lHLGFBQWEzSCxJQUFiLENBQWtCdUssSUFBbEIsSUFBMEIsUUFBMUIsR0FDSTNDLFVBQVU1SCxJQUFWLENBQWV1SyxJQUFmLEtBQXdCLEtBSDdCLEtBR3VDLE1BSDlDO0FBSUgsS0FSRDtBQVNBLFFBQUlDLGlCQUFpQixTQUFqQkEsY0FBaUIsQ0FBVU4sR0FBVixFQUFlM0wsSUFBZixFQUFxQkQsT0FBckIsRUFBOEJtTSxRQUE5QixFQUF3QztBQUN6RCxZQUFJakwsRUFBRWdDLFVBQUYsQ0FBYWpELElBQWIsQ0FBSixFQUF3QjtBQUNwQmtNLHVCQUFXbk0sT0FBWCxFQUFvQkEsVUFBVUMsSUFBOUIsRUFBb0NBLE9BQU9VLFNBQTNDO0FBQ0g7QUFDRCxZQUFJLENBQUNPLEVBQUVnQyxVQUFGLENBQWFsRCxPQUFiLENBQUwsRUFBNEI7QUFDeEJtTSx1QkFBV25NLE9BQVgsRUFBb0JBLFVBQVVXLFNBQTlCO0FBQ0g7QUFDRCxlQUFPO0FBQ0hpTCxpQkFBS0EsR0FERjtBQUVIM0wsa0JBQU1BLElBRkg7QUFHSEQscUJBQVNBLE9BSE47QUFJSG1NLHNCQUFVQTtBQUpQLFNBQVA7QUFNSCxLQWJEO0FBY0FqTCxNQUFFa0wsSUFBRixHQUFTLFVBQVVSLEdBQVYsRUFBZXJKLE9BQWYsRUFBd0I7QUFDN0IsWUFBSSxRQUFPcUosR0FBUCx5Q0FBT0EsR0FBUCxPQUFlLFFBQW5CLEVBQTZCO0FBQ3pCckosc0JBQVVxSixHQUFWO0FBQ0FBLGtCQUFNakwsU0FBTjtBQUNIO0FBQ0QsWUFBSThKLFdBQVdsSSxXQUFXLEVBQTFCO0FBQ0FrSSxpQkFBU21CLEdBQVQsR0FBZUEsT0FBT25CLFNBQVNtQixHQUEvQjtBQUNBLGFBQUssSUFBSWpHLEdBQVQsSUFBZ0J6RSxFQUFFc0ksWUFBbEIsRUFBZ0M7QUFDNUIsZ0JBQUlpQixTQUFTOUUsR0FBVCxNQUFrQmhGLFNBQXRCLEVBQWlDO0FBQzdCOEoseUJBQVM5RSxHQUFULElBQWdCekUsRUFBRXNJLFlBQUYsQ0FBZTdELEdBQWYsQ0FBaEI7QUFDSDtBQUNKO0FBQ0QwRixzQkFBY1osUUFBZDtBQUNBLFlBQUkwQixXQUFXMUIsU0FBUzBCLFFBQXhCOztBQUVBLFlBQUkxQixTQUFTRixLQUFULEtBQW1CLEtBQW5CLElBQTZCLENBQUMsQ0FBQ2hJLE9BQUQsSUFBWUEsUUFBUWdJLEtBQVIsS0FBa0IsSUFBL0IsS0FBeUMsYUFBYTRCLFFBQXZGLEVBQW1HO0FBQy9GMUIscUJBQVNtQixHQUFULEdBQWVDLFlBQVlwQixTQUFTbUIsR0FBckIsRUFBMEIsT0FBTzFLLEVBQUUrRCxHQUFGLEVBQWpDLENBQWY7QUFDSDtBQUNELFlBQUlnSCxPQUFPeEIsU0FBU1YsT0FBVCxDQUFpQm9DLFlBQVlBLFNBQVNwRCxXQUFULEVBQTdCLENBQVg7QUFDQSxZQUFJd0MsVUFBVSxFQUFkO0FBQ0EsWUFBSWMsWUFBWSxTQUFaQSxTQUFZLENBQVU3SixJQUFWLEVBQWdCNEIsS0FBaEIsRUFBdUI7QUFDbkNtSCxvQkFBUS9JLEtBQUt1RyxXQUFMLEVBQVIsSUFBOEIsQ0FBQ3ZHLElBQUQsRUFBTzRCLEtBQVAsQ0FBOUI7QUFDSCxTQUZEO0FBR0EsWUFBSXlGLFdBQVcsaUJBQWlCbkksSUFBakIsQ0FBc0IrSSxTQUFTbUIsR0FBL0IsSUFBc0MvSixPQUFPQyxFQUE3QyxHQUFrRHpCLE9BQU9pTSxRQUFQLENBQWdCekMsUUFBakY7QUFDQSxZQUFJRCxNQUFNYSxTQUFTYixHQUFULENBQWFhLFFBQWIsQ0FBVjtBQUNBLFlBQUk4QixrQkFBa0IzQyxJQUFJNEMsZ0JBQTFCO0FBQ0EsWUFBSUMsWUFBSjs7QUFFQUosa0JBQVUsa0JBQVYsRUFBOEIsZ0JBQTlCO0FBQ0FBLGtCQUFVLFFBQVYsRUFBb0JKLFFBQVEsS0FBNUI7QUFDQSxZQUFJLENBQUMsRUFBRUEsT0FBT3hCLFNBQVNpQyxRQUFULElBQXFCVCxJQUE5QixDQUFMLEVBQTBDO0FBQ3RDLGdCQUFJQSxLQUFLVCxPQUFMLENBQWEsR0FBYixJQUFvQixDQUFDLENBQXpCLEVBQTRCO0FBQ3hCUyx1QkFBT0EsS0FBSzVFLEtBQUwsQ0FBVyxHQUFYLEVBQWdCLENBQWhCLEVBQW1CLENBQW5CLENBQVA7QUFDSDtBQUNEdUMsZ0JBQUkrQyxnQkFBSixJQUF3Qi9DLElBQUkrQyxnQkFBSixDQUFxQlYsSUFBckIsQ0FBeEI7QUFDSDtBQUNELFlBQUl4QixTQUFTYSxXQUFULElBQXlCYixTQUFTYSxXQUFULEtBQXlCLEtBQXpCLElBQWtDYixTQUFTeEssSUFBM0MsSUFBbUR3SyxTQUFTMUssSUFBVCxDQUFjNEwsV0FBZCxPQUFnQyxLQUFoSCxFQUF3SDtBQUNwSFUsc0JBQVUsY0FBVixFQUEwQjVCLFNBQVNhLFdBQVQsSUFBd0IsbUNBQWxEO0FBQ0g7QUFDRCxZQUFJYixTQUFTYyxPQUFiLEVBQXNCO0FBQ2xCLGlCQUFLLElBQUkvSSxJQUFULElBQWlCaUksU0FBU2MsT0FBMUI7QUFDSWMsMEJBQVU3SixJQUFWLEVBQWdCaUksU0FBU2MsT0FBVCxDQUFpQi9JLElBQWpCLENBQWhCO0FBREo7QUFFSDtBQUNEb0gsWUFBSTRDLGdCQUFKLEdBQXVCSCxTQUF2Qjs7QUFFQXpDLFlBQUlnRCxrQkFBSixHQUF5QixZQUFZO0FBQ2pDLGdCQUFJaEQsSUFBSXBGLFVBQUosS0FBbUIsQ0FBdkIsRUFBMEI7QUFDdEJvRixvQkFBSWdELGtCQUFKLEdBQXlCMUwsRUFBRW1DLElBQTNCO0FBQ0F3Riw2QkFBYTRELFlBQWI7QUFDQSxvQkFBSXRGLE1BQUo7QUFBQSxvQkFBWXVDLFFBQVEsS0FBcEI7QUFDQSxvQkFBSW1ELFVBQVVoRCxhQUFhLE9BQTNCO0FBQ0Esb0JBQUtELElBQUlpQixNQUFKLElBQWMsR0FBZCxJQUFxQmpCLElBQUlpQixNQUFKLEdBQWEsR0FBbkMsSUFBMkNqQixJQUFJaUIsTUFBSixLQUFlLEdBQTFELElBQWtFakIsSUFBSWlCLE1BQUosS0FBZSxDQUFmLElBQW9CZ0MsT0FBcEIsSUFBK0JqRCxJQUFJa0QsWUFBekcsRUFBd0g7QUFDcEhYLCtCQUFXQSxZQUFZSCxlQUFldkIsU0FBU2lDLFFBQVQsSUFBcUI5QyxJQUFJbUQsaUJBQUosQ0FBc0IsY0FBdEIsQ0FBcEMsQ0FBdkI7QUFDQTVGLDZCQUFTeUMsSUFBSWtELFlBQWI7QUFDQSx3QkFBSTtBQUNBO0FBQ0EsNEJBQUlYLGFBQWEsUUFBakIsRUFBMkI7QUFDdkIsNkJBQUMsR0FBR2EsSUFBSixFQUFVN0YsTUFBVjtBQUNILHlCQUZELE1BRU8sSUFBSWdGLGFBQWEsS0FBakIsRUFBd0I7QUFDM0JoRixxQ0FBU3lDLElBQUlxRCxXQUFiO0FBQ0gseUJBRk0sTUFFQSxJQUFJZCxhQUFhLE1BQWpCLEVBQXlCO0FBQzVCaEYscUNBQVNvQyxRQUFRN0gsSUFBUixDQUFheUYsTUFBYixJQUF1QixJQUF2QixHQUE4QmpHLEVBQUU4SCxTQUFGLENBQVk3QixNQUFaLENBQXZDO0FBQ0g7QUFDSixxQkFURCxDQVNFLE9BQU9uRixDQUFQLEVBQVU7QUFDUjBILGdDQUFRMUgsQ0FBUjtBQUNIOztBQUVELHdCQUFJMEgsS0FBSixFQUFXO0FBQ1BrQixrQ0FBVWxCLEtBQVYsRUFBaUIsYUFBakIsRUFBZ0NFLEdBQWhDLEVBQXFDYSxRQUFyQztBQUNILHFCQUZELE1BRU87QUFDSEMsb0NBQVl2RCxNQUFaLEVBQW9CeUMsR0FBcEIsRUFBeUJhLFFBQXpCO0FBQ0g7QUFDSixpQkFyQkQsTUFxQk87QUFDSCx3QkFBSUksU0FBU2pCLElBQUlpQixNQUFKLEdBQWEsT0FBYixHQUF1QixPQUFwQztBQUNBLHdCQUFJcUMsYUFBYXRELElBQUlzRCxVQUFKLElBQWtCLElBQW5DO0FBQ0Esd0JBQUlMLE9BQUosRUFBYTtBQUNUaEMsaUNBQVMsT0FBVDtBQUNBcUMscUNBQWEsS0FBYjtBQUNIO0FBQ0R0Qyw4QkFBVXNDLFVBQVYsRUFBc0JyQyxNQUF0QixFQUE4QmpCLEdBQTlCLEVBQW1DYSxRQUFuQztBQUNIO0FBQ0o7QUFDSixTQXJDRDtBQXNDQSxZQUFJRCxlQUFlWixHQUFmLEVBQW9CYSxRQUFwQixNQUFrQyxLQUF0QyxFQUE2QztBQUN6Q2IsZ0JBQUl1RCxLQUFKO0FBQ0F2QyxzQkFBVSxJQUFWLEVBQWdCLE9BQWhCLEVBQXlCaEIsR0FBekIsRUFBOEJhLFFBQTlCO0FBQ0EsbUJBQU9iLEdBQVA7QUFDSDs7QUFFRCxZQUFJYSxTQUFTMkMsU0FBYixFQUF3QjtBQUNwQixpQkFBSyxJQUFJNUssSUFBVCxJQUFpQmlJLFNBQVMyQyxTQUExQixFQUFxQztBQUNqQ3hELG9CQUFJcEgsSUFBSixJQUFZaUksU0FBUzJDLFNBQVQsQ0FBbUI1SyxJQUFuQixDQUFaO0FBQ0g7QUFDSjs7QUFFRCxZQUFJNkssUUFBUSxXQUFXNUMsUUFBWCxHQUFzQkEsU0FBUzRDLEtBQS9CLEdBQXVDLElBQW5EOztBQUVBekQsWUFBSTBELElBQUosQ0FBUzdDLFNBQVMxSyxJQUFULENBQWM0TCxXQUFkLEVBQVQsRUFBc0NsQixTQUFTbUIsR0FBL0MsRUFBb0R5QixLQUFwRCxFQUEyRDVDLFNBQVM4QyxRQUFwRSxFQUE4RTlDLFNBQVMrQyxRQUF2Rjs7QUFFQSxhQUFLLElBQUloTCxJQUFULElBQWlCK0ksT0FBakIsRUFBMEI7QUFDdEIsZ0JBQUlBLFFBQVFoRyxjQUFSLENBQXVCL0MsSUFBdkIsQ0FBSixFQUFrQztBQUM5QitKLGdDQUFnQnJILEtBQWhCLENBQXNCMEUsR0FBdEIsRUFBMkIyQixRQUFRL0ksSUFBUixDQUEzQjtBQUNIO0FBQ0o7QUFDRCxZQUFJaUksU0FBU0osT0FBVCxHQUFtQixDQUF2QixFQUEwQjtBQUN0Qm9DLDJCQUFlekcsV0FBVyxZQUFZO0FBQ2xDNEQsb0JBQUlnRCxrQkFBSixHQUF5QjFMLEVBQUVtQyxJQUEzQjtBQUNBdUcsb0JBQUl1RCxLQUFKO0FBQ0F2QywwQkFBVSxJQUFWLEVBQWdCLFNBQWhCLEVBQTJCaEIsR0FBM0IsRUFBZ0NhLFFBQWhDO0FBQ0gsYUFKYyxFQUlaQSxTQUFTSixPQUpHLENBQWY7QUFLSDtBQUNEVCxZQUFJNkQsSUFBSixDQUFTaEQsU0FBU3hLLElBQVQsR0FBZ0J3SyxTQUFTeEssSUFBekIsR0FBZ0MsSUFBekM7QUFDQSxlQUFPMkosR0FBUDtBQUNILEtBakhEOztBQW1IQTFJLE1BQUV3SyxLQUFGLEdBQVUsVUFBVW5JLEdBQVYsRUFBZXlILFdBQWYsRUFBNEI7QUFDbEMsWUFBSUQsU0FBUyxFQUFiO0FBQ0FBLGVBQU9LLEdBQVAsR0FBYSxVQUFVc0MsQ0FBVixFQUFhQyxDQUFiLEVBQWdCO0FBQ3pCLGlCQUFLOUYsSUFBTCxDQUFVK0YsbUJBQW1CRixDQUFuQixJQUF3QixHQUF4QixHQUE4QkUsbUJBQW1CRCxDQUFuQixDQUF4QztBQUNILFNBRkQ7QUFHQTdDLGtCQUFVQyxNQUFWLEVBQWtCeEgsR0FBbEIsRUFBdUJ5SCxXQUF2QjtBQUNBLGVBQU9ELE9BQU84QyxJQUFQLENBQVksR0FBWixFQUFpQjlCLE9BQWpCLENBQXlCLE1BQXpCLEVBQWlDLEdBQWpDLENBQVA7QUFDSCxLQVBEO0FBUUE3SyxNQUFFNE0sR0FBRixHQUFRLFlBQVUsa0NBQW9DO0FBQ2xELGVBQU81TSxFQUFFa0wsSUFBRixDQUFPRixlQUFlaEgsS0FBZixDQUFxQixJQUFyQixFQUEyQnBDLFNBQTNCLENBQVAsQ0FBUDtBQUNILEtBRkQ7O0FBSUE1QixNQUFFNk0sSUFBRixHQUFTLFlBQVUsa0NBQW9DO0FBQ25ELFlBQUl4TCxVQUFVMkosZUFBZWhILEtBQWYsQ0FBcUIsSUFBckIsRUFBMkJwQyxTQUEzQixDQUFkO0FBQ0FQLGdCQUFReEMsSUFBUixHQUFlLE1BQWY7QUFDQSxlQUFPbUIsRUFBRWtMLElBQUYsQ0FBTzdKLE9BQVAsQ0FBUDtBQUNILEtBSkQ7O0FBTUFyQixNQUFFOE0sT0FBRixHQUFZLFlBQVUsd0JBQTBCO0FBQzVDLFlBQUl6TCxVQUFVMkosZUFBZWhILEtBQWYsQ0FBcUIsSUFBckIsRUFBMkJwQyxTQUEzQixDQUFkO0FBQ0FQLGdCQUFRNEosUUFBUixHQUFtQixNQUFuQjtBQUNBLGVBQU9qTCxFQUFFa0wsSUFBRixDQUFPN0osT0FBUCxDQUFQO0FBQ0gsS0FKRDs7QUFNQXJCLE1BQUVrQixFQUFGLENBQUs2TCxJQUFMLEdBQVksVUFBVXJDLEdBQVYsRUFBZTNMLElBQWYsRUFBcUJELE9BQXJCLEVBQThCO0FBQ3RDLFlBQUksQ0FBQyxLQUFLZ0QsTUFBVixFQUNJLE9BQU8sSUFBUDtBQUNKLFlBQUlrTCxPQUFPLElBQVg7QUFBQSxZQUNJQyxRQUFRdkMsSUFBSXZFLEtBQUosQ0FBVSxJQUFWLENBRFo7QUFBQSxZQUVJbEcsUUFGSjtBQUFBLFlBR0lvQixVQUFVMkosZUFBZU4sR0FBZixFQUFvQjNMLElBQXBCLEVBQTBCRCxPQUExQixDQUhkO0FBQUEsWUFJSU4sV0FBVzZDLFFBQVF2QyxPQUp2QjtBQUtBLFlBQUltTyxNQUFNbkwsTUFBTixHQUFlLENBQW5CLEVBQ0lULFFBQVFxSixHQUFSLEdBQWN1QyxNQUFNLENBQU4sQ0FBZCxFQUF3QmhOLFdBQVdnTixNQUFNLENBQU4sQ0FBbkM7QUFDSjVMLGdCQUFRdkMsT0FBUixHQUFrQixVQUFVb08sUUFBVixFQUFvQjtBQUNsQyxnQkFBSWpOLFFBQUosRUFBYztBQUNWLG9CQUFJa04sTUFBTTNOLFNBQVM0TixhQUFULENBQXVCLEtBQXZCLENBQVY7QUFDQUQsb0JBQUlFLFNBQUosR0FBZ0JILFNBQVNyQyxPQUFULENBQWlCM0MsT0FBakIsRUFBMEIsRUFBMUIsQ0FBaEI7QUFDQSxvQkFBSW9GLGNBQWM5TixTQUFTNE4sYUFBVCxDQUF1QixLQUF2QixDQUFsQjtBQUNBLG9CQUFJRyxTQUFTSixJQUFJOUosZ0JBQUosQ0FBcUJwRCxRQUFyQixDQUFiO0FBQ0Esb0JBQUlzTixVQUFVQSxPQUFPekwsTUFBUCxHQUFnQixDQUE5QixFQUFpQztBQUM3Qix5QkFBSyxJQUFJRCxJQUFJLENBQVIsRUFBVzJMLE1BQU1ELE9BQU96TCxNQUE3QixFQUFxQ0QsSUFBSTJMLEdBQXpDLEVBQThDM0wsR0FBOUMsRUFBbUQ7QUFDL0N5TCxvQ0FBWUcsV0FBWixDQUF3QkYsT0FBTzFMLENBQVAsQ0FBeEI7QUFDSDtBQUNKO0FBQ0RtTCxxQkFBSyxDQUFMLEVBQVFLLFNBQVIsR0FBb0JDLFlBQVlELFNBQWhDO0FBQ0gsYUFYRCxNQVdPO0FBQ0hMLHFCQUFLLENBQUwsRUFBUUssU0FBUixHQUFvQkgsUUFBcEI7QUFDSDtBQUNEMU8sd0JBQVlBLFNBQVN3RixLQUFULENBQWVnSixJQUFmLEVBQXFCcEwsU0FBckIsQ0FBWjtBQUNILFNBaEJEO0FBaUJBNUIsVUFBRWtMLElBQUYsQ0FBTzdKLE9BQVA7QUFDQSxlQUFPLElBQVA7QUFDSCxLQTdCRDtBQStCSCxDQTlSRCxFQThSRzlCLElBOVJILEVBOFJTSixNQTlSVDs7QUFnU0FJLEtBQUttTyxPQUFMLEdBQWUsVUFBVWhELEdBQVYsRUFBZWlELEtBQWYsRUFBc0I7QUFDakMsUUFBSTtBQUNBLFlBQUlDLFdBQVdELE1BQU1uRixLQUFyQjtBQUNBbUYsY0FBTW5GLEtBQU4sR0FBYyxVQUFVRSxHQUFWLEVBQWU3SixJQUFmLEVBQXFCZ1AsV0FBckIsRUFBa0M7QUFDNUMsZ0JBQUlDLE9BQU83TyxLQUFLQyxLQUFMLENBQVd3SixJQUFJd0UsUUFBZixDQUFYO0FBQ0EsZ0JBQUlZLEtBQUs5TyxJQUFMLEtBQWMsaUJBQWxCLEVBQXFDO0FBQ2pDSSx5QkFBU0UsSUFBVCxDQUFjaEIsSUFBZCxDQUFtQkMsT0FBbkIsQ0FBMkIsVUFBVVMsSUFBVixFQUFnQjtBQUN2Q08seUJBQUsyTCxJQUFMLENBQVUsa0VBQWtFbE0sSUFBNUUsRUFBa0Y7QUFDOUVtTiwrQkFBTyxJQUR1RTtBQUU5RWxCLGtDQUFVLE1BRm9FLEVBRTdEO0FBQ2pCcE0sOEJBQU0sS0FId0UsRUFHbEU7QUFDWndMLGlDQUFTLEVBQUMsZ0JBQWdCLGtCQUFqQixFQUpxRTtBQUs5RXZMLGlDQUFTLGlCQUFVaVAsS0FBVixFQUFpQkMsVUFBakIsRUFBNkJ0RixHQUE3QixFQUFrQztBQUN2QyxnQ0FBSXVGLGFBQWF2RixJQUFJbUQsaUJBQUosQ0FBc0IsY0FBdEIsQ0FBakI7QUFDQXBOLG1DQUFPTSxJQUFQLENBQVltUCxPQUFaLENBQW9CQyxlQUFwQixDQUFvQztBQUNoQ3BQLHNDQUFNa1AsVUFEMEI7QUFFaEN4SixxQ0FBSztBQUYyQiw2QkFBcEM7QUFJQWtKLGtDQUFNdEQsT0FBTixDQUFjLGNBQWQsSUFBZ0M0RCxVQUFoQztBQUNBRyxtQ0FBT0wsTUFBTU0sT0FBYjtBQUNBOU8saUNBQUsyTCxJQUFMLENBQVVSLEdBQVYsRUFBZWlELEtBQWY7QUFDSCx5QkFkNkU7QUFlOUVuRiwrQkFBTyxlQUFVRSxHQUFWLEVBQWU3SixJQUFmLEVBQXFCZ1AsV0FBckIsRUFBa0M7QUFDckM7QUFDQSxnQ0FBSVMsV0FBV3JQLEtBQUtDLEtBQUwsQ0FBV3dKLElBQUl3RSxRQUFmLENBQWY7QUFDQTNOLGlDQUFLZ1AsS0FBTCxDQUFXRCxTQUFTRSxPQUFwQixFQUE2QixFQUE3QixFQUFpQyxNQUFqQyxFQUF5QyxZQUFZLENBQ3BELENBREQ7QUFFSDtBQXBCNkUscUJBQWxGO0FBc0JILGlCQXZCRDtBQXdCSCxhQXpCRCxNQTBCSztBQUNEWix5QkFBU2xGLEdBQVQsRUFBYzdKLElBQWQsRUFBb0JnUCxXQUFwQjtBQUNIO0FBQ0osU0EvQkQ7QUFnQ0F0TyxhQUFLMkwsSUFBTCxDQUFVUixHQUFWLEVBQWVpRCxLQUFmO0FBQ0gsS0FuQ0QsQ0FtQ0MsT0FBTzdNLENBQVAsRUFBVTtBQUNQdEIsaUJBQVNpUCxJQUFULENBQWNwQixTQUFkLEdBQTBCcE8sS0FBS0MsS0FBTCxDQUFXNEIsQ0FBWCxJQUFnQkEsRUFBRTBOLE9BQUYsRUFBMUM7QUFFSDtBQUNKLENBeENEO2tCQXlDZWpQLEk7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQzN3QmY7Ozs7OztrQkFFZTtBQUNYQTtBQURXLEMiLCJmaWxlIjoiend0LXNkay5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHRmdW5jdGlvbiBob3REaXNwb3NlQ2h1bmsoY2h1bmtJZCkge1xuIFx0XHRkZWxldGUgaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdO1xuIFx0fVxuIFx0dmFyIHBhcmVudEhvdFVwZGF0ZUNhbGxiYWNrID0gd2luZG93W1wid2VicGFja0hvdFVwZGF0ZVwiXTtcbiBcdHdpbmRvd1tcIndlYnBhY2tIb3RVcGRhdGVcIl0gPSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiBcdGZ1bmN0aW9uIHdlYnBhY2tIb3RVcGRhdGVDYWxsYmFjayhjaHVua0lkLCBtb3JlTW9kdWxlcykge1xuIFx0XHRob3RBZGRVcGRhdGVDaHVuayhjaHVua0lkLCBtb3JlTW9kdWxlcyk7XG4gXHRcdGlmIChwYXJlbnRIb3RVcGRhdGVDYWxsYmFjaykgcGFyZW50SG90VXBkYXRlQ2FsbGJhY2soY2h1bmtJZCwgbW9yZU1vZHVsZXMpO1xuIFx0fSA7XG5cbiBcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuIFx0ZnVuY3Rpb24gaG90RG93bmxvYWRVcGRhdGVDaHVuayhjaHVua0lkKSB7XG4gXHRcdHZhciBoZWFkID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJoZWFkXCIpWzBdO1xuIFx0XHR2YXIgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtcbiBcdFx0c2NyaXB0LmNoYXJzZXQgPSBcInV0Zi04XCI7XG4gXHRcdHNjcmlwdC5zcmMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBcIlwiICsgY2h1bmtJZCArIFwiLlwiICsgaG90Q3VycmVudEhhc2ggKyBcIi5ob3QtdXBkYXRlLmpzXCI7XG4gXHRcdDtcbiBcdFx0aGVhZC5hcHBlbmRDaGlsZChzY3JpcHQpO1xuIFx0fVxuXG4gXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiBcdGZ1bmN0aW9uIGhvdERvd25sb2FkTWFuaWZlc3QocmVxdWVzdFRpbWVvdXQpIHtcbiBcdFx0cmVxdWVzdFRpbWVvdXQgPSByZXF1ZXN0VGltZW91dCB8fCAxMDAwMDtcbiBcdFx0cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuIFx0XHRcdGlmICh0eXBlb2YgWE1MSHR0cFJlcXVlc3QgPT09IFwidW5kZWZpbmVkXCIpIHtcbiBcdFx0XHRcdHJldHVybiByZWplY3QobmV3IEVycm9yKFwiTm8gYnJvd3NlciBzdXBwb3J0XCIpKTtcbiBcdFx0XHR9XG4gXHRcdFx0dHJ5IHtcbiBcdFx0XHRcdHZhciByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gXHRcdFx0XHR2YXIgcmVxdWVzdFBhdGggPSBfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBcIlwiICsgaG90Q3VycmVudEhhc2ggKyBcIi5ob3QtdXBkYXRlLmpzb25cIjtcbiBcdFx0XHRcdHJlcXVlc3Qub3BlbihcIkdFVFwiLCByZXF1ZXN0UGF0aCwgdHJ1ZSk7XG4gXHRcdFx0XHRyZXF1ZXN0LnRpbWVvdXQgPSByZXF1ZXN0VGltZW91dDtcbiBcdFx0XHRcdHJlcXVlc3Quc2VuZChudWxsKTtcbiBcdFx0XHR9IGNhdGNoIChlcnIpIHtcbiBcdFx0XHRcdHJldHVybiByZWplY3QoZXJyKTtcbiBcdFx0XHR9XG4gXHRcdFx0cmVxdWVzdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcbiBcdFx0XHRcdGlmIChyZXF1ZXN0LnJlYWR5U3RhdGUgIT09IDQpIHJldHVybjtcbiBcdFx0XHRcdGlmIChyZXF1ZXN0LnN0YXR1cyA9PT0gMCkge1xuIFx0XHRcdFx0XHQvLyB0aW1lb3V0XG4gXHRcdFx0XHRcdHJlamVjdChcbiBcdFx0XHRcdFx0XHRuZXcgRXJyb3IoXCJNYW5pZmVzdCByZXF1ZXN0IHRvIFwiICsgcmVxdWVzdFBhdGggKyBcIiB0aW1lZCBvdXQuXCIpXG4gXHRcdFx0XHRcdCk7XG4gXHRcdFx0XHR9IGVsc2UgaWYgKHJlcXVlc3Quc3RhdHVzID09PSA0MDQpIHtcbiBcdFx0XHRcdFx0Ly8gbm8gdXBkYXRlIGF2YWlsYWJsZVxuIFx0XHRcdFx0XHRyZXNvbHZlKCk7XG4gXHRcdFx0XHR9IGVsc2UgaWYgKHJlcXVlc3Quc3RhdHVzICE9PSAyMDAgJiYgcmVxdWVzdC5zdGF0dXMgIT09IDMwNCkge1xuIFx0XHRcdFx0XHQvLyBvdGhlciBmYWlsdXJlXG4gXHRcdFx0XHRcdHJlamVjdChuZXcgRXJyb3IoXCJNYW5pZmVzdCByZXF1ZXN0IHRvIFwiICsgcmVxdWVzdFBhdGggKyBcIiBmYWlsZWQuXCIpKTtcbiBcdFx0XHRcdH0gZWxzZSB7XG4gXHRcdFx0XHRcdC8vIHN1Y2Nlc3NcbiBcdFx0XHRcdFx0dHJ5IHtcbiBcdFx0XHRcdFx0XHR2YXIgdXBkYXRlID0gSlNPTi5wYXJzZShyZXF1ZXN0LnJlc3BvbnNlVGV4dCk7XG4gXHRcdFx0XHRcdH0gY2F0Y2ggKGUpIHtcbiBcdFx0XHRcdFx0XHRyZWplY3QoZSk7XG4gXHRcdFx0XHRcdFx0cmV0dXJuO1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdHJlc29sdmUodXBkYXRlKTtcbiBcdFx0XHRcdH1cbiBcdFx0XHR9O1xuIFx0XHR9KTtcbiBcdH1cblxuIFx0dmFyIGhvdEFwcGx5T25VcGRhdGUgPSB0cnVlO1xuIFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gXHR2YXIgaG90Q3VycmVudEhhc2ggPSBcIjMxZmJhODFmOGNhN2M5NWJmMjkzXCI7XG4gXHR2YXIgaG90UmVxdWVzdFRpbWVvdXQgPSAxMDAwMDtcbiBcdHZhciBob3RDdXJyZW50TW9kdWxlRGF0YSA9IHt9O1xuIFx0dmFyIGhvdEN1cnJlbnRDaGlsZE1vZHVsZTtcbiBcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuIFx0dmFyIGhvdEN1cnJlbnRQYXJlbnRzID0gW107XG4gXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiBcdHZhciBob3RDdXJyZW50UGFyZW50c1RlbXAgPSBbXTtcblxuIFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gXHRmdW5jdGlvbiBob3RDcmVhdGVSZXF1aXJlKG1vZHVsZUlkKSB7XG4gXHRcdHZhciBtZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdO1xuIFx0XHRpZiAoIW1lKSByZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXztcbiBcdFx0dmFyIGZuID0gZnVuY3Rpb24ocmVxdWVzdCkge1xuIFx0XHRcdGlmIChtZS5ob3QuYWN0aXZlKSB7XG4gXHRcdFx0XHRpZiAoaW5zdGFsbGVkTW9kdWxlc1tyZXF1ZXN0XSkge1xuIFx0XHRcdFx0XHRpZiAoaW5zdGFsbGVkTW9kdWxlc1tyZXF1ZXN0XS5wYXJlbnRzLmluZGV4T2YobW9kdWxlSWQpID09PSAtMSkge1xuIFx0XHRcdFx0XHRcdGluc3RhbGxlZE1vZHVsZXNbcmVxdWVzdF0ucGFyZW50cy5wdXNoKG1vZHVsZUlkKTtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0fSBlbHNlIHtcbiBcdFx0XHRcdFx0aG90Q3VycmVudFBhcmVudHMgPSBbbW9kdWxlSWRdO1xuIFx0XHRcdFx0XHRob3RDdXJyZW50Q2hpbGRNb2R1bGUgPSByZXF1ZXN0O1xuIFx0XHRcdFx0fVxuIFx0XHRcdFx0aWYgKG1lLmNoaWxkcmVuLmluZGV4T2YocmVxdWVzdCkgPT09IC0xKSB7XG4gXHRcdFx0XHRcdG1lLmNoaWxkcmVuLnB1c2gocmVxdWVzdCk7XG4gXHRcdFx0XHR9XG4gXHRcdFx0fSBlbHNlIHtcbiBcdFx0XHRcdGNvbnNvbGUud2FybihcbiBcdFx0XHRcdFx0XCJbSE1SXSB1bmV4cGVjdGVkIHJlcXVpcmUoXCIgK1xuIFx0XHRcdFx0XHRcdHJlcXVlc3QgK1xuIFx0XHRcdFx0XHRcdFwiKSBmcm9tIGRpc3Bvc2VkIG1vZHVsZSBcIiArXG4gXHRcdFx0XHRcdFx0bW9kdWxlSWRcbiBcdFx0XHRcdCk7XG4gXHRcdFx0XHRob3RDdXJyZW50UGFyZW50cyA9IFtdO1xuIFx0XHRcdH1cbiBcdFx0XHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhyZXF1ZXN0KTtcbiBcdFx0fTtcbiBcdFx0dmFyIE9iamVjdEZhY3RvcnkgPSBmdW5jdGlvbiBPYmplY3RGYWN0b3J5KG5hbWUpIHtcbiBcdFx0XHRyZXR1cm4ge1xuIFx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbiBcdFx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG4gXHRcdFx0XHRcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fW25hbWVdO1xuIFx0XHRcdFx0fSxcbiBcdFx0XHRcdHNldDogZnVuY3Rpb24odmFsdWUpIHtcbiBcdFx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfX1tuYW1lXSA9IHZhbHVlO1xuIFx0XHRcdFx0fVxuIFx0XHRcdH07XG4gXHRcdH07XG4gXHRcdGZvciAodmFyIG5hbWUgaW4gX193ZWJwYWNrX3JlcXVpcmVfXykge1xuIFx0XHRcdGlmIChcbiBcdFx0XHRcdE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChfX3dlYnBhY2tfcmVxdWlyZV9fLCBuYW1lKSAmJlxuIFx0XHRcdFx0bmFtZSAhPT0gXCJlXCIgJiZcbiBcdFx0XHRcdG5hbWUgIT09IFwidFwiXG4gXHRcdFx0KSB7XG4gXHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZm4sIG5hbWUsIE9iamVjdEZhY3RvcnkobmFtZSkpO1xuIFx0XHRcdH1cbiBcdFx0fVxuIFx0XHRmbi5lID0gZnVuY3Rpb24oY2h1bmtJZCkge1xuIFx0XHRcdGlmIChob3RTdGF0dXMgPT09IFwicmVhZHlcIikgaG90U2V0U3RhdHVzKFwicHJlcGFyZVwiKTtcbiBcdFx0XHRob3RDaHVua3NMb2FkaW5nKys7XG4gXHRcdFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18uZShjaHVua0lkKS50aGVuKGZpbmlzaENodW5rTG9hZGluZywgZnVuY3Rpb24oZXJyKSB7XG4gXHRcdFx0XHRmaW5pc2hDaHVua0xvYWRpbmcoKTtcbiBcdFx0XHRcdHRocm93IGVycjtcbiBcdFx0XHR9KTtcblxuIFx0XHRcdGZ1bmN0aW9uIGZpbmlzaENodW5rTG9hZGluZygpIHtcbiBcdFx0XHRcdGhvdENodW5rc0xvYWRpbmctLTtcbiBcdFx0XHRcdGlmIChob3RTdGF0dXMgPT09IFwicHJlcGFyZVwiKSB7XG4gXHRcdFx0XHRcdGlmICghaG90V2FpdGluZ0ZpbGVzTWFwW2NodW5rSWRdKSB7XG4gXHRcdFx0XHRcdFx0aG90RW5zdXJlVXBkYXRlQ2h1bmsoY2h1bmtJZCk7XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0aWYgKGhvdENodW5rc0xvYWRpbmcgPT09IDAgJiYgaG90V2FpdGluZ0ZpbGVzID09PSAwKSB7XG4gXHRcdFx0XHRcdFx0aG90VXBkYXRlRG93bmxvYWRlZCgpO1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHR9XG4gXHRcdFx0fVxuIFx0XHR9O1xuIFx0XHRmbi50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0XHRpZiAobW9kZSAmIDEpIHZhbHVlID0gZm4odmFsdWUpO1xuIFx0XHRcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fLnQodmFsdWUsIG1vZGUgJiB+MSk7XG4gXHRcdH07XG4gXHRcdHJldHVybiBmbjtcbiBcdH1cblxuIFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gXHRmdW5jdGlvbiBob3RDcmVhdGVNb2R1bGUobW9kdWxlSWQpIHtcbiBcdFx0dmFyIGhvdCA9IHtcbiBcdFx0XHQvLyBwcml2YXRlIHN0dWZmXG4gXHRcdFx0X2FjY2VwdGVkRGVwZW5kZW5jaWVzOiB7fSxcbiBcdFx0XHRfZGVjbGluZWREZXBlbmRlbmNpZXM6IHt9LFxuIFx0XHRcdF9zZWxmQWNjZXB0ZWQ6IGZhbHNlLFxuIFx0XHRcdF9zZWxmRGVjbGluZWQ6IGZhbHNlLFxuIFx0XHRcdF9kaXNwb3NlSGFuZGxlcnM6IFtdLFxuIFx0XHRcdF9tYWluOiBob3RDdXJyZW50Q2hpbGRNb2R1bGUgIT09IG1vZHVsZUlkLFxuXG4gXHRcdFx0Ly8gTW9kdWxlIEFQSVxuIFx0XHRcdGFjdGl2ZTogdHJ1ZSxcbiBcdFx0XHRhY2NlcHQ6IGZ1bmN0aW9uKGRlcCwgY2FsbGJhY2spIHtcbiBcdFx0XHRcdGlmIChkZXAgPT09IHVuZGVmaW5lZCkgaG90Ll9zZWxmQWNjZXB0ZWQgPSB0cnVlO1xuIFx0XHRcdFx0ZWxzZSBpZiAodHlwZW9mIGRlcCA9PT0gXCJmdW5jdGlvblwiKSBob3QuX3NlbGZBY2NlcHRlZCA9IGRlcDtcbiBcdFx0XHRcdGVsc2UgaWYgKHR5cGVvZiBkZXAgPT09IFwib2JqZWN0XCIpXG4gXHRcdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgZGVwLmxlbmd0aDsgaSsrKVxuIFx0XHRcdFx0XHRcdGhvdC5fYWNjZXB0ZWREZXBlbmRlbmNpZXNbZGVwW2ldXSA9IGNhbGxiYWNrIHx8IGZ1bmN0aW9uKCkge307XG4gXHRcdFx0XHRlbHNlIGhvdC5fYWNjZXB0ZWREZXBlbmRlbmNpZXNbZGVwXSA9IGNhbGxiYWNrIHx8IGZ1bmN0aW9uKCkge307XG4gXHRcdFx0fSxcbiBcdFx0XHRkZWNsaW5lOiBmdW5jdGlvbihkZXApIHtcbiBcdFx0XHRcdGlmIChkZXAgPT09IHVuZGVmaW5lZCkgaG90Ll9zZWxmRGVjbGluZWQgPSB0cnVlO1xuIFx0XHRcdFx0ZWxzZSBpZiAodHlwZW9mIGRlcCA9PT0gXCJvYmplY3RcIilcbiBcdFx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBkZXAubGVuZ3RoOyBpKyspXG4gXHRcdFx0XHRcdFx0aG90Ll9kZWNsaW5lZERlcGVuZGVuY2llc1tkZXBbaV1dID0gdHJ1ZTtcbiBcdFx0XHRcdGVsc2UgaG90Ll9kZWNsaW5lZERlcGVuZGVuY2llc1tkZXBdID0gdHJ1ZTtcbiBcdFx0XHR9LFxuIFx0XHRcdGRpc3Bvc2U6IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gXHRcdFx0XHRob3QuX2Rpc3Bvc2VIYW5kbGVycy5wdXNoKGNhbGxiYWNrKTtcbiBcdFx0XHR9LFxuIFx0XHRcdGFkZERpc3Bvc2VIYW5kbGVyOiBmdW5jdGlvbihjYWxsYmFjaykge1xuIFx0XHRcdFx0aG90Ll9kaXNwb3NlSGFuZGxlcnMucHVzaChjYWxsYmFjayk7XG4gXHRcdFx0fSxcbiBcdFx0XHRyZW1vdmVEaXNwb3NlSGFuZGxlcjogZnVuY3Rpb24oY2FsbGJhY2spIHtcbiBcdFx0XHRcdHZhciBpZHggPSBob3QuX2Rpc3Bvc2VIYW5kbGVycy5pbmRleE9mKGNhbGxiYWNrKTtcbiBcdFx0XHRcdGlmIChpZHggPj0gMCkgaG90Ll9kaXNwb3NlSGFuZGxlcnMuc3BsaWNlKGlkeCwgMSk7XG4gXHRcdFx0fSxcblxuIFx0XHRcdC8vIE1hbmFnZW1lbnQgQVBJXG4gXHRcdFx0Y2hlY2s6IGhvdENoZWNrLFxuIFx0XHRcdGFwcGx5OiBob3RBcHBseSxcbiBcdFx0XHRzdGF0dXM6IGZ1bmN0aW9uKGwpIHtcbiBcdFx0XHRcdGlmICghbCkgcmV0dXJuIGhvdFN0YXR1cztcbiBcdFx0XHRcdGhvdFN0YXR1c0hhbmRsZXJzLnB1c2gobCk7XG4gXHRcdFx0fSxcbiBcdFx0XHRhZGRTdGF0dXNIYW5kbGVyOiBmdW5jdGlvbihsKSB7XG4gXHRcdFx0XHRob3RTdGF0dXNIYW5kbGVycy5wdXNoKGwpO1xuIFx0XHRcdH0sXG4gXHRcdFx0cmVtb3ZlU3RhdHVzSGFuZGxlcjogZnVuY3Rpb24obCkge1xuIFx0XHRcdFx0dmFyIGlkeCA9IGhvdFN0YXR1c0hhbmRsZXJzLmluZGV4T2YobCk7XG4gXHRcdFx0XHRpZiAoaWR4ID49IDApIGhvdFN0YXR1c0hhbmRsZXJzLnNwbGljZShpZHgsIDEpO1xuIFx0XHRcdH0sXG5cbiBcdFx0XHQvL2luaGVyaXQgZnJvbSBwcmV2aW91cyBkaXNwb3NlIGNhbGxcbiBcdFx0XHRkYXRhOiBob3RDdXJyZW50TW9kdWxlRGF0YVttb2R1bGVJZF1cbiBcdFx0fTtcbiBcdFx0aG90Q3VycmVudENoaWxkTW9kdWxlID0gdW5kZWZpbmVkO1xuIFx0XHRyZXR1cm4gaG90O1xuIFx0fVxuXG4gXHR2YXIgaG90U3RhdHVzSGFuZGxlcnMgPSBbXTtcbiBcdHZhciBob3RTdGF0dXMgPSBcImlkbGVcIjtcblxuIFx0ZnVuY3Rpb24gaG90U2V0U3RhdHVzKG5ld1N0YXR1cykge1xuIFx0XHRob3RTdGF0dXMgPSBuZXdTdGF0dXM7XG4gXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgaG90U3RhdHVzSGFuZGxlcnMubGVuZ3RoOyBpKyspXG4gXHRcdFx0aG90U3RhdHVzSGFuZGxlcnNbaV0uY2FsbChudWxsLCBuZXdTdGF0dXMpO1xuIFx0fVxuXG4gXHQvLyB3aGlsZSBkb3dubG9hZGluZ1xuIFx0dmFyIGhvdFdhaXRpbmdGaWxlcyA9IDA7XG4gXHR2YXIgaG90Q2h1bmtzTG9hZGluZyA9IDA7XG4gXHR2YXIgaG90V2FpdGluZ0ZpbGVzTWFwID0ge307XG4gXHR2YXIgaG90UmVxdWVzdGVkRmlsZXNNYXAgPSB7fTtcbiBcdHZhciBob3RBdmFpbGFibGVGaWxlc01hcCA9IHt9O1xuIFx0dmFyIGhvdERlZmVycmVkO1xuXG4gXHQvLyBUaGUgdXBkYXRlIGluZm9cbiBcdHZhciBob3RVcGRhdGUsIGhvdFVwZGF0ZU5ld0hhc2g7XG5cbiBcdGZ1bmN0aW9uIHRvTW9kdWxlSWQoaWQpIHtcbiBcdFx0dmFyIGlzTnVtYmVyID0gK2lkICsgXCJcIiA9PT0gaWQ7XG4gXHRcdHJldHVybiBpc051bWJlciA/ICtpZCA6IGlkO1xuIFx0fVxuXG4gXHRmdW5jdGlvbiBob3RDaGVjayhhcHBseSkge1xuIFx0XHRpZiAoaG90U3RhdHVzICE9PSBcImlkbGVcIikge1xuIFx0XHRcdHRocm93IG5ldyBFcnJvcihcImNoZWNrKCkgaXMgb25seSBhbGxvd2VkIGluIGlkbGUgc3RhdHVzXCIpO1xuIFx0XHR9XG4gXHRcdGhvdEFwcGx5T25VcGRhdGUgPSBhcHBseTtcbiBcdFx0aG90U2V0U3RhdHVzKFwiY2hlY2tcIik7XG4gXHRcdHJldHVybiBob3REb3dubG9hZE1hbmlmZXN0KGhvdFJlcXVlc3RUaW1lb3V0KS50aGVuKGZ1bmN0aW9uKHVwZGF0ZSkge1xuIFx0XHRcdGlmICghdXBkYXRlKSB7XG4gXHRcdFx0XHRob3RTZXRTdGF0dXMoXCJpZGxlXCIpO1xuIFx0XHRcdFx0cmV0dXJuIG51bGw7XG4gXHRcdFx0fVxuIFx0XHRcdGhvdFJlcXVlc3RlZEZpbGVzTWFwID0ge307XG4gXHRcdFx0aG90V2FpdGluZ0ZpbGVzTWFwID0ge307XG4gXHRcdFx0aG90QXZhaWxhYmxlRmlsZXNNYXAgPSB1cGRhdGUuYztcbiBcdFx0XHRob3RVcGRhdGVOZXdIYXNoID0gdXBkYXRlLmg7XG5cbiBcdFx0XHRob3RTZXRTdGF0dXMoXCJwcmVwYXJlXCIpO1xuIFx0XHRcdHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gXHRcdFx0XHRob3REZWZlcnJlZCA9IHtcbiBcdFx0XHRcdFx0cmVzb2x2ZTogcmVzb2x2ZSxcbiBcdFx0XHRcdFx0cmVqZWN0OiByZWplY3RcbiBcdFx0XHRcdH07XG4gXHRcdFx0fSk7XG4gXHRcdFx0aG90VXBkYXRlID0ge307XG4gXHRcdFx0dmFyIGNodW5rSWQgPSBcIm1haW5cIjtcbiBcdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbG9uZS1ibG9ja3NcbiBcdFx0XHR7XG4gXHRcdFx0XHQvKmdsb2JhbHMgY2h1bmtJZCAqL1xuIFx0XHRcdFx0aG90RW5zdXJlVXBkYXRlQ2h1bmsoY2h1bmtJZCk7XG4gXHRcdFx0fVxuIFx0XHRcdGlmIChcbiBcdFx0XHRcdGhvdFN0YXR1cyA9PT0gXCJwcmVwYXJlXCIgJiZcbiBcdFx0XHRcdGhvdENodW5rc0xvYWRpbmcgPT09IDAgJiZcbiBcdFx0XHRcdGhvdFdhaXRpbmdGaWxlcyA9PT0gMFxuIFx0XHRcdCkge1xuIFx0XHRcdFx0aG90VXBkYXRlRG93bmxvYWRlZCgpO1xuIFx0XHRcdH1cbiBcdFx0XHRyZXR1cm4gcHJvbWlzZTtcbiBcdFx0fSk7XG4gXHR9XG5cbiBcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuIFx0ZnVuY3Rpb24gaG90QWRkVXBkYXRlQ2h1bmsoY2h1bmtJZCwgbW9yZU1vZHVsZXMpIHtcbiBcdFx0aWYgKCFob3RBdmFpbGFibGVGaWxlc01hcFtjaHVua0lkXSB8fCAhaG90UmVxdWVzdGVkRmlsZXNNYXBbY2h1bmtJZF0pXG4gXHRcdFx0cmV0dXJuO1xuIFx0XHRob3RSZXF1ZXN0ZWRGaWxlc01hcFtjaHVua0lkXSA9IGZhbHNlO1xuIFx0XHRmb3IgKHZhciBtb2R1bGVJZCBpbiBtb3JlTW9kdWxlcykge1xuIFx0XHRcdGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9yZU1vZHVsZXMsIG1vZHVsZUlkKSkge1xuIFx0XHRcdFx0aG90VXBkYXRlW21vZHVsZUlkXSA9IG1vcmVNb2R1bGVzW21vZHVsZUlkXTtcbiBcdFx0XHR9XG4gXHRcdH1cbiBcdFx0aWYgKC0taG90V2FpdGluZ0ZpbGVzID09PSAwICYmIGhvdENodW5rc0xvYWRpbmcgPT09IDApIHtcbiBcdFx0XHRob3RVcGRhdGVEb3dubG9hZGVkKCk7XG4gXHRcdH1cbiBcdH1cblxuIFx0ZnVuY3Rpb24gaG90RW5zdXJlVXBkYXRlQ2h1bmsoY2h1bmtJZCkge1xuIFx0XHRpZiAoIWhvdEF2YWlsYWJsZUZpbGVzTWFwW2NodW5rSWRdKSB7XG4gXHRcdFx0aG90V2FpdGluZ0ZpbGVzTWFwW2NodW5rSWRdID0gdHJ1ZTtcbiBcdFx0fSBlbHNlIHtcbiBcdFx0XHRob3RSZXF1ZXN0ZWRGaWxlc01hcFtjaHVua0lkXSA9IHRydWU7XG4gXHRcdFx0aG90V2FpdGluZ0ZpbGVzKys7XG4gXHRcdFx0aG90RG93bmxvYWRVcGRhdGVDaHVuayhjaHVua0lkKTtcbiBcdFx0fVxuIFx0fVxuXG4gXHRmdW5jdGlvbiBob3RVcGRhdGVEb3dubG9hZGVkKCkge1xuIFx0XHRob3RTZXRTdGF0dXMoXCJyZWFkeVwiKTtcbiBcdFx0dmFyIGRlZmVycmVkID0gaG90RGVmZXJyZWQ7XG4gXHRcdGhvdERlZmVycmVkID0gbnVsbDtcbiBcdFx0aWYgKCFkZWZlcnJlZCkgcmV0dXJuO1xuIFx0XHRpZiAoaG90QXBwbHlPblVwZGF0ZSkge1xuIFx0XHRcdC8vIFdyYXAgZGVmZXJyZWQgb2JqZWN0IGluIFByb21pc2UgdG8gbWFyayBpdCBhcyBhIHdlbGwtaGFuZGxlZCBQcm9taXNlIHRvXG4gXHRcdFx0Ly8gYXZvaWQgdHJpZ2dlcmluZyB1bmNhdWdodCBleGNlcHRpb24gd2FybmluZyBpbiBDaHJvbWUuXG4gXHRcdFx0Ly8gU2VlIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTQ2NTY2NlxuIFx0XHRcdFByb21pc2UucmVzb2x2ZSgpXG4gXHRcdFx0XHQudGhlbihmdW5jdGlvbigpIHtcbiBcdFx0XHRcdFx0cmV0dXJuIGhvdEFwcGx5KGhvdEFwcGx5T25VcGRhdGUpO1xuIFx0XHRcdFx0fSlcbiBcdFx0XHRcdC50aGVuKFxuIFx0XHRcdFx0XHRmdW5jdGlvbihyZXN1bHQpIHtcbiBcdFx0XHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlKHJlc3VsdCk7XG4gXHRcdFx0XHRcdH0sXG4gXHRcdFx0XHRcdGZ1bmN0aW9uKGVycikge1xuIFx0XHRcdFx0XHRcdGRlZmVycmVkLnJlamVjdChlcnIpO1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHQpO1xuIFx0XHR9IGVsc2Uge1xuIFx0XHRcdHZhciBvdXRkYXRlZE1vZHVsZXMgPSBbXTtcbiBcdFx0XHRmb3IgKHZhciBpZCBpbiBob3RVcGRhdGUpIHtcbiBcdFx0XHRcdGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoaG90VXBkYXRlLCBpZCkpIHtcbiBcdFx0XHRcdFx0b3V0ZGF0ZWRNb2R1bGVzLnB1c2godG9Nb2R1bGVJZChpZCkpO1xuIFx0XHRcdFx0fVxuIFx0XHRcdH1cbiBcdFx0XHRkZWZlcnJlZC5yZXNvbHZlKG91dGRhdGVkTW9kdWxlcyk7XG4gXHRcdH1cbiBcdH1cblxuIFx0ZnVuY3Rpb24gaG90QXBwbHkob3B0aW9ucykge1xuIFx0XHRpZiAoaG90U3RhdHVzICE9PSBcInJlYWR5XCIpXG4gXHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiYXBwbHkoKSBpcyBvbmx5IGFsbG93ZWQgaW4gcmVhZHkgc3RhdHVzXCIpO1xuIFx0XHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuIFx0XHR2YXIgY2I7XG4gXHRcdHZhciBpO1xuIFx0XHR2YXIgajtcbiBcdFx0dmFyIG1vZHVsZTtcbiBcdFx0dmFyIG1vZHVsZUlkO1xuXG4gXHRcdGZ1bmN0aW9uIGdldEFmZmVjdGVkU3R1ZmYodXBkYXRlTW9kdWxlSWQpIHtcbiBcdFx0XHR2YXIgb3V0ZGF0ZWRNb2R1bGVzID0gW3VwZGF0ZU1vZHVsZUlkXTtcbiBcdFx0XHR2YXIgb3V0ZGF0ZWREZXBlbmRlbmNpZXMgPSB7fTtcblxuIFx0XHRcdHZhciBxdWV1ZSA9IG91dGRhdGVkTW9kdWxlcy5zbGljZSgpLm1hcChmdW5jdGlvbihpZCkge1xuIFx0XHRcdFx0cmV0dXJuIHtcbiBcdFx0XHRcdFx0Y2hhaW46IFtpZF0sXG4gXHRcdFx0XHRcdGlkOiBpZFxuIFx0XHRcdFx0fTtcbiBcdFx0XHR9KTtcbiBcdFx0XHR3aGlsZSAocXVldWUubGVuZ3RoID4gMCkge1xuIFx0XHRcdFx0dmFyIHF1ZXVlSXRlbSA9IHF1ZXVlLnBvcCgpO1xuIFx0XHRcdFx0dmFyIG1vZHVsZUlkID0gcXVldWVJdGVtLmlkO1xuIFx0XHRcdFx0dmFyIGNoYWluID0gcXVldWVJdGVtLmNoYWluO1xuIFx0XHRcdFx0bW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF07XG4gXHRcdFx0XHRpZiAoIW1vZHVsZSB8fCBtb2R1bGUuaG90Ll9zZWxmQWNjZXB0ZWQpIGNvbnRpbnVlO1xuIFx0XHRcdFx0aWYgKG1vZHVsZS5ob3QuX3NlbGZEZWNsaW5lZCkge1xuIFx0XHRcdFx0XHRyZXR1cm4ge1xuIFx0XHRcdFx0XHRcdHR5cGU6IFwic2VsZi1kZWNsaW5lZFwiLFxuIFx0XHRcdFx0XHRcdGNoYWluOiBjaGFpbixcbiBcdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWRcbiBcdFx0XHRcdFx0fTtcbiBcdFx0XHRcdH1cbiBcdFx0XHRcdGlmIChtb2R1bGUuaG90Ll9tYWluKSB7XG4gXHRcdFx0XHRcdHJldHVybiB7XG4gXHRcdFx0XHRcdFx0dHlwZTogXCJ1bmFjY2VwdGVkXCIsXG4gXHRcdFx0XHRcdFx0Y2hhaW46IGNoYWluLFxuIFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZFxuIFx0XHRcdFx0XHR9O1xuIFx0XHRcdFx0fVxuIFx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBtb2R1bGUucGFyZW50cy5sZW5ndGg7IGkrKykge1xuIFx0XHRcdFx0XHR2YXIgcGFyZW50SWQgPSBtb2R1bGUucGFyZW50c1tpXTtcbiBcdFx0XHRcdFx0dmFyIHBhcmVudCA9IGluc3RhbGxlZE1vZHVsZXNbcGFyZW50SWRdO1xuIFx0XHRcdFx0XHRpZiAoIXBhcmVudCkgY29udGludWU7XG4gXHRcdFx0XHRcdGlmIChwYXJlbnQuaG90Ll9kZWNsaW5lZERlcGVuZGVuY2llc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRcdFx0XHRyZXR1cm4ge1xuIFx0XHRcdFx0XHRcdFx0dHlwZTogXCJkZWNsaW5lZFwiLFxuIFx0XHRcdFx0XHRcdFx0Y2hhaW46IGNoYWluLmNvbmNhdChbcGFyZW50SWRdKSxcbiBcdFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZCxcbiBcdFx0XHRcdFx0XHRcdHBhcmVudElkOiBwYXJlbnRJZFxuIFx0XHRcdFx0XHRcdH07XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0aWYgKG91dGRhdGVkTW9kdWxlcy5pbmRleE9mKHBhcmVudElkKSAhPT0gLTEpIGNvbnRpbnVlO1xuIFx0XHRcdFx0XHRpZiAocGFyZW50LmhvdC5fYWNjZXB0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0XHRcdFx0aWYgKCFvdXRkYXRlZERlcGVuZGVuY2llc1twYXJlbnRJZF0pXG4gXHRcdFx0XHRcdFx0XHRvdXRkYXRlZERlcGVuZGVuY2llc1twYXJlbnRJZF0gPSBbXTtcbiBcdFx0XHRcdFx0XHRhZGRBbGxUb1NldChvdXRkYXRlZERlcGVuZGVuY2llc1twYXJlbnRJZF0sIFttb2R1bGVJZF0pO1xuIFx0XHRcdFx0XHRcdGNvbnRpbnVlO1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdGRlbGV0ZSBvdXRkYXRlZERlcGVuZGVuY2llc1twYXJlbnRJZF07XG4gXHRcdFx0XHRcdG91dGRhdGVkTW9kdWxlcy5wdXNoKHBhcmVudElkKTtcbiBcdFx0XHRcdFx0cXVldWUucHVzaCh7XG4gXHRcdFx0XHRcdFx0Y2hhaW46IGNoYWluLmNvbmNhdChbcGFyZW50SWRdKSxcbiBcdFx0XHRcdFx0XHRpZDogcGFyZW50SWRcbiBcdFx0XHRcdFx0fSk7XG4gXHRcdFx0XHR9XG4gXHRcdFx0fVxuXG4gXHRcdFx0cmV0dXJuIHtcbiBcdFx0XHRcdHR5cGU6IFwiYWNjZXB0ZWRcIixcbiBcdFx0XHRcdG1vZHVsZUlkOiB1cGRhdGVNb2R1bGVJZCxcbiBcdFx0XHRcdG91dGRhdGVkTW9kdWxlczogb3V0ZGF0ZWRNb2R1bGVzLFxuIFx0XHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXM6IG91dGRhdGVkRGVwZW5kZW5jaWVzXG4gXHRcdFx0fTtcbiBcdFx0fVxuXG4gXHRcdGZ1bmN0aW9uIGFkZEFsbFRvU2V0KGEsIGIpIHtcbiBcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGIubGVuZ3RoOyBpKyspIHtcbiBcdFx0XHRcdHZhciBpdGVtID0gYltpXTtcbiBcdFx0XHRcdGlmIChhLmluZGV4T2YoaXRlbSkgPT09IC0xKSBhLnB1c2goaXRlbSk7XG4gXHRcdFx0fVxuIFx0XHR9XG5cbiBcdFx0Ly8gYXQgYmVnaW4gYWxsIHVwZGF0ZXMgbW9kdWxlcyBhcmUgb3V0ZGF0ZWRcbiBcdFx0Ly8gdGhlIFwib3V0ZGF0ZWRcIiBzdGF0dXMgY2FuIHByb3BhZ2F0ZSB0byBwYXJlbnRzIGlmIHRoZXkgZG9uJ3QgYWNjZXB0IHRoZSBjaGlsZHJlblxuIFx0XHR2YXIgb3V0ZGF0ZWREZXBlbmRlbmNpZXMgPSB7fTtcbiBcdFx0dmFyIG91dGRhdGVkTW9kdWxlcyA9IFtdO1xuIFx0XHR2YXIgYXBwbGllZFVwZGF0ZSA9IHt9O1xuXG4gXHRcdHZhciB3YXJuVW5leHBlY3RlZFJlcXVpcmUgPSBmdW5jdGlvbiB3YXJuVW5leHBlY3RlZFJlcXVpcmUoKSB7XG4gXHRcdFx0Y29uc29sZS53YXJuKFxuIFx0XHRcdFx0XCJbSE1SXSB1bmV4cGVjdGVkIHJlcXVpcmUoXCIgKyByZXN1bHQubW9kdWxlSWQgKyBcIikgdG8gZGlzcG9zZWQgbW9kdWxlXCJcbiBcdFx0XHQpO1xuIFx0XHR9O1xuXG4gXHRcdGZvciAodmFyIGlkIGluIGhvdFVwZGF0ZSkge1xuIFx0XHRcdGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoaG90VXBkYXRlLCBpZCkpIHtcbiBcdFx0XHRcdG1vZHVsZUlkID0gdG9Nb2R1bGVJZChpZCk7XG4gXHRcdFx0XHQvKiogQHR5cGUge1RPRE99ICovXG4gXHRcdFx0XHR2YXIgcmVzdWx0O1xuIFx0XHRcdFx0aWYgKGhvdFVwZGF0ZVtpZF0pIHtcbiBcdFx0XHRcdFx0cmVzdWx0ID0gZ2V0QWZmZWN0ZWRTdHVmZihtb2R1bGVJZCk7XG4gXHRcdFx0XHR9IGVsc2Uge1xuIFx0XHRcdFx0XHRyZXN1bHQgPSB7XG4gXHRcdFx0XHRcdFx0dHlwZTogXCJkaXNwb3NlZFwiLFxuIFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBpZFxuIFx0XHRcdFx0XHR9O1xuIFx0XHRcdFx0fVxuIFx0XHRcdFx0LyoqIEB0eXBlIHtFcnJvcnxmYWxzZX0gKi9cbiBcdFx0XHRcdHZhciBhYm9ydEVycm9yID0gZmFsc2U7XG4gXHRcdFx0XHR2YXIgZG9BcHBseSA9IGZhbHNlO1xuIFx0XHRcdFx0dmFyIGRvRGlzcG9zZSA9IGZhbHNlO1xuIFx0XHRcdFx0dmFyIGNoYWluSW5mbyA9IFwiXCI7XG4gXHRcdFx0XHRpZiAocmVzdWx0LmNoYWluKSB7XG4gXHRcdFx0XHRcdGNoYWluSW5mbyA9IFwiXFxuVXBkYXRlIHByb3BhZ2F0aW9uOiBcIiArIHJlc3VsdC5jaGFpbi5qb2luKFwiIC0+IFwiKTtcbiBcdFx0XHRcdH1cbiBcdFx0XHRcdHN3aXRjaCAocmVzdWx0LnR5cGUpIHtcbiBcdFx0XHRcdFx0Y2FzZSBcInNlbGYtZGVjbGluZWRcIjpcbiBcdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkRlY2xpbmVkKSBvcHRpb25zLm9uRGVjbGluZWQocmVzdWx0KTtcbiBcdFx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlRGVjbGluZWQpXG4gXHRcdFx0XHRcdFx0XHRhYm9ydEVycm9yID0gbmV3IEVycm9yKFxuIFx0XHRcdFx0XHRcdFx0XHRcIkFib3J0ZWQgYmVjYXVzZSBvZiBzZWxmIGRlY2xpbmU6IFwiICtcbiBcdFx0XHRcdFx0XHRcdFx0XHRyZXN1bHQubW9kdWxlSWQgK1xuIFx0XHRcdFx0XHRcdFx0XHRcdGNoYWluSW5mb1xuIFx0XHRcdFx0XHRcdFx0KTtcbiBcdFx0XHRcdFx0XHRicmVhaztcbiBcdFx0XHRcdFx0Y2FzZSBcImRlY2xpbmVkXCI6XG4gXHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25EZWNsaW5lZCkgb3B0aW9ucy5vbkRlY2xpbmVkKHJlc3VsdCk7XG4gXHRcdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZURlY2xpbmVkKVxuIFx0XHRcdFx0XHRcdFx0YWJvcnRFcnJvciA9IG5ldyBFcnJvcihcbiBcdFx0XHRcdFx0XHRcdFx0XCJBYm9ydGVkIGJlY2F1c2Ugb2YgZGVjbGluZWQgZGVwZW5kZW5jeTogXCIgK1xuIFx0XHRcdFx0XHRcdFx0XHRcdHJlc3VsdC5tb2R1bGVJZCArXG4gXHRcdFx0XHRcdFx0XHRcdFx0XCIgaW4gXCIgK1xuIFx0XHRcdFx0XHRcdFx0XHRcdHJlc3VsdC5wYXJlbnRJZCArXG4gXHRcdFx0XHRcdFx0XHRcdFx0Y2hhaW5JbmZvXG4gXHRcdFx0XHRcdFx0XHQpO1xuIFx0XHRcdFx0XHRcdGJyZWFrO1xuIFx0XHRcdFx0XHRjYXNlIFwidW5hY2NlcHRlZFwiOlxuIFx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uVW5hY2NlcHRlZCkgb3B0aW9ucy5vblVuYWNjZXB0ZWQocmVzdWx0KTtcbiBcdFx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlVW5hY2NlcHRlZClcbiBcdFx0XHRcdFx0XHRcdGFib3J0RXJyb3IgPSBuZXcgRXJyb3IoXG4gXHRcdFx0XHRcdFx0XHRcdFwiQWJvcnRlZCBiZWNhdXNlIFwiICsgbW9kdWxlSWQgKyBcIiBpcyBub3QgYWNjZXB0ZWRcIiArIGNoYWluSW5mb1xuIFx0XHRcdFx0XHRcdFx0KTtcbiBcdFx0XHRcdFx0XHRicmVhaztcbiBcdFx0XHRcdFx0Y2FzZSBcImFjY2VwdGVkXCI6XG4gXHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25BY2NlcHRlZCkgb3B0aW9ucy5vbkFjY2VwdGVkKHJlc3VsdCk7XG4gXHRcdFx0XHRcdFx0ZG9BcHBseSA9IHRydWU7XG4gXHRcdFx0XHRcdFx0YnJlYWs7XG4gXHRcdFx0XHRcdGNhc2UgXCJkaXNwb3NlZFwiOlxuIFx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRGlzcG9zZWQpIG9wdGlvbnMub25EaXNwb3NlZChyZXN1bHQpO1xuIFx0XHRcdFx0XHRcdGRvRGlzcG9zZSA9IHRydWU7XG4gXHRcdFx0XHRcdFx0YnJlYWs7XG4gXHRcdFx0XHRcdGRlZmF1bHQ6XG4gXHRcdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiVW5leGNlcHRpb24gdHlwZSBcIiArIHJlc3VsdC50eXBlKTtcbiBcdFx0XHRcdH1cbiBcdFx0XHRcdGlmIChhYm9ydEVycm9yKSB7XG4gXHRcdFx0XHRcdGhvdFNldFN0YXR1cyhcImFib3J0XCIpO1xuIFx0XHRcdFx0XHRyZXR1cm4gUHJvbWlzZS5yZWplY3QoYWJvcnRFcnJvcik7XG4gXHRcdFx0XHR9XG4gXHRcdFx0XHRpZiAoZG9BcHBseSkge1xuIFx0XHRcdFx0XHRhcHBsaWVkVXBkYXRlW21vZHVsZUlkXSA9IGhvdFVwZGF0ZVttb2R1bGVJZF07XG4gXHRcdFx0XHRcdGFkZEFsbFRvU2V0KG91dGRhdGVkTW9kdWxlcywgcmVzdWx0Lm91dGRhdGVkTW9kdWxlcyk7XG4gXHRcdFx0XHRcdGZvciAobW9kdWxlSWQgaW4gcmVzdWx0Lm91dGRhdGVkRGVwZW5kZW5jaWVzKSB7XG4gXHRcdFx0XHRcdFx0aWYgKFxuIFx0XHRcdFx0XHRcdFx0T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKFxuIFx0XHRcdFx0XHRcdFx0XHRyZXN1bHQub3V0ZGF0ZWREZXBlbmRlbmNpZXMsXG4gXHRcdFx0XHRcdFx0XHRcdG1vZHVsZUlkXG4gXHRcdFx0XHRcdFx0XHQpXG4gXHRcdFx0XHRcdFx0KSB7XG4gXHRcdFx0XHRcdFx0XHRpZiAoIW91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSlcbiBcdFx0XHRcdFx0XHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdID0gW107XG4gXHRcdFx0XHRcdFx0XHRhZGRBbGxUb1NldChcbiBcdFx0XHRcdFx0XHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdLFxuIFx0XHRcdFx0XHRcdFx0XHRyZXN1bHQub3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdXG4gXHRcdFx0XHRcdFx0XHQpO1xuIFx0XHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0fVxuIFx0XHRcdFx0aWYgKGRvRGlzcG9zZSkge1xuIFx0XHRcdFx0XHRhZGRBbGxUb1NldChvdXRkYXRlZE1vZHVsZXMsIFtyZXN1bHQubW9kdWxlSWRdKTtcbiBcdFx0XHRcdFx0YXBwbGllZFVwZGF0ZVttb2R1bGVJZF0gPSB3YXJuVW5leHBlY3RlZFJlcXVpcmU7XG4gXHRcdFx0XHR9XG4gXHRcdFx0fVxuIFx0XHR9XG5cbiBcdFx0Ly8gU3RvcmUgc2VsZiBhY2NlcHRlZCBvdXRkYXRlZCBtb2R1bGVzIHRvIHJlcXVpcmUgdGhlbSBsYXRlciBieSB0aGUgbW9kdWxlIHN5c3RlbVxuIFx0XHR2YXIgb3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzID0gW107XG4gXHRcdGZvciAoaSA9IDA7IGkgPCBvdXRkYXRlZE1vZHVsZXMubGVuZ3RoOyBpKyspIHtcbiBcdFx0XHRtb2R1bGVJZCA9IG91dGRhdGVkTW9kdWxlc1tpXTtcbiBcdFx0XHRpZiAoXG4gXHRcdFx0XHRpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSAmJlxuIFx0XHRcdFx0aW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uaG90Ll9zZWxmQWNjZXB0ZWRcbiBcdFx0XHQpXG4gXHRcdFx0XHRvdXRkYXRlZFNlbGZBY2NlcHRlZE1vZHVsZXMucHVzaCh7XG4gXHRcdFx0XHRcdG1vZHVsZTogbW9kdWxlSWQsXG4gXHRcdFx0XHRcdGVycm9ySGFuZGxlcjogaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uaG90Ll9zZWxmQWNjZXB0ZWRcbiBcdFx0XHRcdH0pO1xuIFx0XHR9XG5cbiBcdFx0Ly8gTm93IGluIFwiZGlzcG9zZVwiIHBoYXNlXG4gXHRcdGhvdFNldFN0YXR1cyhcImRpc3Bvc2VcIik7XG4gXHRcdE9iamVjdC5rZXlzKGhvdEF2YWlsYWJsZUZpbGVzTWFwKS5mb3JFYWNoKGZ1bmN0aW9uKGNodW5rSWQpIHtcbiBcdFx0XHRpZiAoaG90QXZhaWxhYmxlRmlsZXNNYXBbY2h1bmtJZF0gPT09IGZhbHNlKSB7XG4gXHRcdFx0XHRob3REaXNwb3NlQ2h1bmsoY2h1bmtJZCk7XG4gXHRcdFx0fVxuIFx0XHR9KTtcblxuIFx0XHR2YXIgaWR4O1xuIFx0XHR2YXIgcXVldWUgPSBvdXRkYXRlZE1vZHVsZXMuc2xpY2UoKTtcbiBcdFx0d2hpbGUgKHF1ZXVlLmxlbmd0aCA+IDApIHtcbiBcdFx0XHRtb2R1bGVJZCA9IHF1ZXVlLnBvcCgpO1xuIFx0XHRcdG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdO1xuIFx0XHRcdGlmICghbW9kdWxlKSBjb250aW51ZTtcblxuIFx0XHRcdHZhciBkYXRhID0ge307XG5cbiBcdFx0XHQvLyBDYWxsIGRpc3Bvc2UgaGFuZGxlcnNcbiBcdFx0XHR2YXIgZGlzcG9zZUhhbmRsZXJzID0gbW9kdWxlLmhvdC5fZGlzcG9zZUhhbmRsZXJzO1xuIFx0XHRcdGZvciAoaiA9IDA7IGogPCBkaXNwb3NlSGFuZGxlcnMubGVuZ3RoOyBqKyspIHtcbiBcdFx0XHRcdGNiID0gZGlzcG9zZUhhbmRsZXJzW2pdO1xuIFx0XHRcdFx0Y2IoZGF0YSk7XG4gXHRcdFx0fVxuIFx0XHRcdGhvdEN1cnJlbnRNb2R1bGVEYXRhW21vZHVsZUlkXSA9IGRhdGE7XG5cbiBcdFx0XHQvLyBkaXNhYmxlIG1vZHVsZSAodGhpcyBkaXNhYmxlcyByZXF1aXJlcyBmcm9tIHRoaXMgbW9kdWxlKVxuIFx0XHRcdG1vZHVsZS5ob3QuYWN0aXZlID0gZmFsc2U7XG5cbiBcdFx0XHQvLyByZW1vdmUgbW9kdWxlIGZyb20gY2FjaGVcbiBcdFx0XHRkZWxldGUgaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF07XG5cbiBcdFx0XHQvLyB3aGVuIGRpc3Bvc2luZyB0aGVyZSBpcyBubyBuZWVkIHRvIGNhbGwgZGlzcG9zZSBoYW5kbGVyXG4gXHRcdFx0ZGVsZXRlIG91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXTtcblxuIFx0XHRcdC8vIHJlbW92ZSBcInBhcmVudHNcIiByZWZlcmVuY2VzIGZyb20gYWxsIGNoaWxkcmVuXG4gXHRcdFx0Zm9yIChqID0gMDsgaiA8IG1vZHVsZS5jaGlsZHJlbi5sZW5ndGg7IGorKykge1xuIFx0XHRcdFx0dmFyIGNoaWxkID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGUuY2hpbGRyZW5bal1dO1xuIFx0XHRcdFx0aWYgKCFjaGlsZCkgY29udGludWU7XG4gXHRcdFx0XHRpZHggPSBjaGlsZC5wYXJlbnRzLmluZGV4T2YobW9kdWxlSWQpO1xuIFx0XHRcdFx0aWYgKGlkeCA+PSAwKSB7XG4gXHRcdFx0XHRcdGNoaWxkLnBhcmVudHMuc3BsaWNlKGlkeCwgMSk7XG4gXHRcdFx0XHR9XG4gXHRcdFx0fVxuIFx0XHR9XG5cbiBcdFx0Ly8gcmVtb3ZlIG91dGRhdGVkIGRlcGVuZGVuY3kgZnJvbSBtb2R1bGUgY2hpbGRyZW5cbiBcdFx0dmFyIGRlcGVuZGVuY3k7XG4gXHRcdHZhciBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcztcbiBcdFx0Zm9yIChtb2R1bGVJZCBpbiBvdXRkYXRlZERlcGVuZGVuY2llcykge1xuIFx0XHRcdGlmIChcbiBcdFx0XHRcdE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvdXRkYXRlZERlcGVuZGVuY2llcywgbW9kdWxlSWQpXG4gXHRcdFx0KSB7XG4gXHRcdFx0XHRtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXTtcbiBcdFx0XHRcdGlmIChtb2R1bGUpIHtcbiBcdFx0XHRcdFx0bW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMgPSBvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF07XG4gXHRcdFx0XHRcdGZvciAoaiA9IDA7IGogPCBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcy5sZW5ndGg7IGorKykge1xuIFx0XHRcdFx0XHRcdGRlcGVuZGVuY3kgPSBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llc1tqXTtcbiBcdFx0XHRcdFx0XHRpZHggPSBtb2R1bGUuY2hpbGRyZW4uaW5kZXhPZihkZXBlbmRlbmN5KTtcbiBcdFx0XHRcdFx0XHRpZiAoaWR4ID49IDApIG1vZHVsZS5jaGlsZHJlbi5zcGxpY2UoaWR4LCAxKTtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0fVxuIFx0XHRcdH1cbiBcdFx0fVxuXG4gXHRcdC8vIE5vdCBpbiBcImFwcGx5XCIgcGhhc2VcbiBcdFx0aG90U2V0U3RhdHVzKFwiYXBwbHlcIik7XG5cbiBcdFx0aG90Q3VycmVudEhhc2ggPSBob3RVcGRhdGVOZXdIYXNoO1xuXG4gXHRcdC8vIGluc2VydCBuZXcgY29kZVxuIFx0XHRmb3IgKG1vZHVsZUlkIGluIGFwcGxpZWRVcGRhdGUpIHtcbiBcdFx0XHRpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGFwcGxpZWRVcGRhdGUsIG1vZHVsZUlkKSkge1xuIFx0XHRcdFx0bW9kdWxlc1ttb2R1bGVJZF0gPSBhcHBsaWVkVXBkYXRlW21vZHVsZUlkXTtcbiBcdFx0XHR9XG4gXHRcdH1cblxuIFx0XHQvLyBjYWxsIGFjY2VwdCBoYW5kbGVyc1xuIFx0XHR2YXIgZXJyb3IgPSBudWxsO1xuIFx0XHRmb3IgKG1vZHVsZUlkIGluIG91dGRhdGVkRGVwZW5kZW5jaWVzKSB7XG4gXHRcdFx0aWYgKFxuIFx0XHRcdFx0T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG91dGRhdGVkRGVwZW5kZW5jaWVzLCBtb2R1bGVJZClcbiBcdFx0XHQpIHtcbiBcdFx0XHRcdG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdO1xuIFx0XHRcdFx0aWYgKG1vZHVsZSkge1xuIFx0XHRcdFx0XHRtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcyA9IG91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXTtcbiBcdFx0XHRcdFx0dmFyIGNhbGxiYWNrcyA9IFtdO1xuIFx0XHRcdFx0XHRmb3IgKGkgPSAwOyBpIDwgbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMubGVuZ3RoOyBpKyspIHtcbiBcdFx0XHRcdFx0XHRkZXBlbmRlbmN5ID0gbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXNbaV07XG4gXHRcdFx0XHRcdFx0Y2IgPSBtb2R1bGUuaG90Ll9hY2NlcHRlZERlcGVuZGVuY2llc1tkZXBlbmRlbmN5XTtcbiBcdFx0XHRcdFx0XHRpZiAoY2IpIHtcbiBcdFx0XHRcdFx0XHRcdGlmIChjYWxsYmFja3MuaW5kZXhPZihjYikgIT09IC0xKSBjb250aW51ZTtcbiBcdFx0XHRcdFx0XHRcdGNhbGxiYWNrcy5wdXNoKGNiKTtcbiBcdFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0Zm9yIChpID0gMDsgaSA8IGNhbGxiYWNrcy5sZW5ndGg7IGkrKykge1xuIFx0XHRcdFx0XHRcdGNiID0gY2FsbGJhY2tzW2ldO1xuIFx0XHRcdFx0XHRcdHRyeSB7XG4gXHRcdFx0XHRcdFx0XHRjYihtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcyk7XG4gXHRcdFx0XHRcdFx0fSBjYXRjaCAoZXJyKSB7XG4gXHRcdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkVycm9yZWQpIHtcbiBcdFx0XHRcdFx0XHRcdFx0b3B0aW9ucy5vbkVycm9yZWQoe1xuIFx0XHRcdFx0XHRcdFx0XHRcdHR5cGU6IFwiYWNjZXB0LWVycm9yZWRcIixcbiBcdFx0XHRcdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWQsXG4gXHRcdFx0XHRcdFx0XHRcdFx0ZGVwZW5kZW5jeUlkOiBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llc1tpXSxcbiBcdFx0XHRcdFx0XHRcdFx0XHRlcnJvcjogZXJyXG4gXHRcdFx0XHRcdFx0XHRcdH0pO1xuIFx0XHRcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZUVycm9yZWQpIHtcbiBcdFx0XHRcdFx0XHRcdFx0aWYgKCFlcnJvcikgZXJyb3IgPSBlcnI7XG4gXHRcdFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHR9XG4gXHRcdFx0fVxuIFx0XHR9XG5cbiBcdFx0Ly8gTG9hZCBzZWxmIGFjY2VwdGVkIG1vZHVsZXNcbiBcdFx0Zm9yIChpID0gMDsgaSA8IG91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlcy5sZW5ndGg7IGkrKykge1xuIFx0XHRcdHZhciBpdGVtID0gb3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzW2ldO1xuIFx0XHRcdG1vZHVsZUlkID0gaXRlbS5tb2R1bGU7XG4gXHRcdFx0aG90Q3VycmVudFBhcmVudHMgPSBbbW9kdWxlSWRdO1xuIFx0XHRcdHRyeSB7XG4gXHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKTtcbiBcdFx0XHR9IGNhdGNoIChlcnIpIHtcbiBcdFx0XHRcdGlmICh0eXBlb2YgaXRlbS5lcnJvckhhbmRsZXIgPT09IFwiZnVuY3Rpb25cIikge1xuIFx0XHRcdFx0XHR0cnkge1xuIFx0XHRcdFx0XHRcdGl0ZW0uZXJyb3JIYW5kbGVyKGVycik7XG4gXHRcdFx0XHRcdH0gY2F0Y2ggKGVycjIpIHtcbiBcdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkVycm9yZWQpIHtcbiBcdFx0XHRcdFx0XHRcdG9wdGlvbnMub25FcnJvcmVkKHtcbiBcdFx0XHRcdFx0XHRcdFx0dHlwZTogXCJzZWxmLWFjY2VwdC1lcnJvci1oYW5kbGVyLWVycm9yZWRcIixcbiBcdFx0XHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkLFxuIFx0XHRcdFx0XHRcdFx0XHRlcnJvcjogZXJyMixcbiBcdFx0XHRcdFx0XHRcdFx0b3JpZ2luYWxFcnJvcjogZXJyXG4gXHRcdFx0XHRcdFx0XHR9KTtcbiBcdFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZUVycm9yZWQpIHtcbiBcdFx0XHRcdFx0XHRcdGlmICghZXJyb3IpIGVycm9yID0gZXJyMjtcbiBcdFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdFx0aWYgKCFlcnJvcikgZXJyb3IgPSBlcnI7XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdH0gZWxzZSB7XG4gXHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRXJyb3JlZCkge1xuIFx0XHRcdFx0XHRcdG9wdGlvbnMub25FcnJvcmVkKHtcbiBcdFx0XHRcdFx0XHRcdHR5cGU6IFwic2VsZi1hY2NlcHQtZXJyb3JlZFwiLFxuIFx0XHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkLFxuIFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGVyclxuIFx0XHRcdFx0XHRcdH0pO1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVFcnJvcmVkKSB7XG4gXHRcdFx0XHRcdFx0aWYgKCFlcnJvcikgZXJyb3IgPSBlcnI7XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdH1cbiBcdFx0XHR9XG4gXHRcdH1cblxuIFx0XHQvLyBoYW5kbGUgZXJyb3JzIGluIGFjY2VwdCBoYW5kbGVycyBhbmQgc2VsZiBhY2NlcHRlZCBtb2R1bGUgbG9hZFxuIFx0XHRpZiAoZXJyb3IpIHtcbiBcdFx0XHRob3RTZXRTdGF0dXMoXCJmYWlsXCIpO1xuIFx0XHRcdHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gXHRcdH1cblxuIFx0XHRob3RTZXRTdGF0dXMoXCJpZGxlXCIpO1xuIFx0XHRyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSkge1xuIFx0XHRcdHJlc29sdmUob3V0ZGF0ZWRNb2R1bGVzKTtcbiBcdFx0fSk7XG4gXHR9XG5cbiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9LFxuIFx0XHRcdGhvdDogaG90Q3JlYXRlTW9kdWxlKG1vZHVsZUlkKSxcbiBcdFx0XHRwYXJlbnRzOiAoaG90Q3VycmVudFBhcmVudHNUZW1wID0gaG90Q3VycmVudFBhcmVudHMsIGhvdEN1cnJlbnRQYXJlbnRzID0gW10sIGhvdEN1cnJlbnRQYXJlbnRzVGVtcCksXG4gXHRcdFx0Y2hpbGRyZW46IFtdXG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIGhvdENyZWF0ZVJlcXVpcmUobW9kdWxlSWQpKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG4gXHQvLyBfX3dlYnBhY2tfaGFzaF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmggPSBmdW5jdGlvbigpIHsgcmV0dXJuIGhvdEN1cnJlbnRIYXNoOyB9O1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIGhvdENyZWF0ZVJlcXVpcmUoXCIuL3NyYy9pbmRleC5qc1wiKShfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSBcIi4vc3JjL2luZGV4LmpzXCIpO1xuIiwiaW1wb3J0IHVzZXIgZnJvbSAnLi91c2VyJ1xyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gICAgdXNlclxyXG59IiwibGV0IGdldENvZGUgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcclxuICAgICRsZW1peC5jYWxsLmN1c3RvbXMuY2FsbEN1c3RvbSh7XHJcbiAgICAgICAgdHlwZTogJ2dldENvZGUnLFxyXG4gICAgICAgIHN1Y2Nlc3M6IChkYXRhKSA9PiB7XHJcbiAgICAgICAgICAgIGxldCBjb2RlID0gSlNPTi5wYXJzZShkYXRhKS5jb2RlXHJcbiAgICAgICAgICAgIGNhbGxiYWNrKGNvZGUpXHJcbiAgICAgICAgfVxyXG4gICAgfSlcclxufVxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgICBnZXRDb2RlXHJcbn0iLCJpbXBvcnQgbmV0d29yayBmcm9tICcuL25ldHdvcmsnXHJcbmltcG9ydCBhdXRoIGZyb20gICcuL2F1dGgnXHJcblxyXG53aW5kb3cuJHp3dF9zZGsgPSB7XHJcbiAgICBuZXR3b3JrLFxyXG4gICAgYXV0aFxyXG59IiwibGV0IGh0dHAgPSAoZnVuY3Rpb24oZG9jdW1lbnQsIHVuZGVmaW5lZCkge1xyXG4gICAgdmFyIHJlYWR5UkUgPSAvY29tcGxldGV8bG9hZGVkfGludGVyYWN0aXZlLztcclxuICAgIHZhciBpZFNlbGVjdG9yUkUgPSAvXiMoW1xcdy1dKykkLztcclxuICAgIHZhciBjbGFzc1NlbGVjdG9yUkUgPSAvXlxcLihbXFx3LV0rKSQvO1xyXG4gICAgdmFyIHRhZ1NlbGVjdG9yUkUgPSAvXltcXHctXSskLztcclxuICAgIHZhciB0cmFuc2xhdGVSRSA9IC90cmFuc2xhdGUoPzozZCk/XFwoKC4rPylcXCkvO1xyXG4gICAgdmFyIHRyYW5zbGF0ZU1hdHJpeFJFID0gL21hdHJpeCgzZCk/XFwoKC4rPylcXCkvO1xyXG5cclxuICAgIHZhciAkID0gZnVuY3Rpb24oc2VsZWN0b3IsIGNvbnRleHQpIHtcclxuICAgICAgICBjb250ZXh0ID0gY29udGV4dCB8fCBkb2N1bWVudDtcclxuICAgICAgICBpZiAoIXNlbGVjdG9yKVxyXG4gICAgICAgICAgICByZXR1cm4gd3JhcCgpO1xyXG4gICAgICAgIGlmICh0eXBlb2Ygc2VsZWN0b3IgPT09ICdvYmplY3QnKVxyXG4gICAgICAgICAgICBpZiAoJC5pc0FycmF5TGlrZShzZWxlY3RvcikpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB3cmFwKCQuc2xpY2UuY2FsbChzZWxlY3RvciksIG51bGwpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHdyYXAoW3NlbGVjdG9yXSwgbnVsbCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICBpZiAodHlwZW9mIHNlbGVjdG9yID09PSAnZnVuY3Rpb24nKVxyXG4gICAgICAgICAgICByZXR1cm4gJC5yZWFkeShzZWxlY3Rvcik7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBzZWxlY3RvciA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIHNlbGVjdG9yID0gc2VsZWN0b3IudHJpbSgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGlkU2VsZWN0b3JSRS50ZXN0KHNlbGVjdG9yKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBmb3VuZCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFJlZ0V4cC4kMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHdyYXAoZm91bmQgPyBbZm91bmRdIDogW10pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHdyYXAoJC5xc2Eoc2VsZWN0b3IsIGNvbnRleHQpLCBzZWxlY3Rvcik7XHJcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHt9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB3cmFwKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIHZhciB3cmFwID0gZnVuY3Rpb24oZG9tLCBzZWxlY3Rvcikge1xyXG4gICAgICAgIGRvbSA9IGRvbSB8fCBbXTtcclxuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoZG9tLCAkLmZuKTtcclxuICAgICAgICBkb20uc2VsZWN0b3IgPSBzZWxlY3RvciB8fCAnJztcclxuICAgICAgICByZXR1cm4gZG9tO1xyXG4gICAgfTtcclxuXHJcbiAgICAkLnV1aWQgPSAwO1xyXG5cclxuICAgICQuZGF0YSA9IHt9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBleHRlbmQoc2ltcGxlKVxyXG4gICAgICogQHBhcmFtIHt0eXBlfSB0YXJnZXRcclxuICAgICAqIEBwYXJhbSB7dHlwZX0gc291cmNlXHJcbiAgICAgKiBAcGFyYW0ge3R5cGV9IGRlZXBcclxuICAgICAqIEByZXR1cm5zIHt1bnJlc29sdmVkfVxyXG4gICAgICovXHJcbiAgICAkLmV4dGVuZCA9IGZ1bmN0aW9uKCkgeyAvL2Zyb20ganF1ZXJ5MlxyXG4gICAgICAgIHZhciBvcHRpb25zLCBuYW1lLCBzcmMsIGNvcHksIGNvcHlJc0FycmF5LCBjbG9uZSxcclxuICAgICAgICAgICAgdGFyZ2V0ID0gYXJndW1lbnRzWzBdIHx8IHt9LFxyXG4gICAgICAgICAgICBpID0gMSxcclxuICAgICAgICAgICAgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcclxuICAgICAgICAgICAgZGVlcCA9IGZhbHNlO1xyXG5cclxuICAgICAgICBpZiAodHlwZW9mIHRhcmdldCA9PT0gXCJib29sZWFuXCIpIHtcclxuICAgICAgICAgICAgZGVlcCA9IHRhcmdldDtcclxuXHJcbiAgICAgICAgICAgIHRhcmdldCA9IGFyZ3VtZW50c1tpXSB8fCB7fTtcclxuICAgICAgICAgICAgaSsrO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiB0YXJnZXQgIT09IFwib2JqZWN0XCIgJiYgISQuaXNGdW5jdGlvbih0YXJnZXQpKSB7XHJcbiAgICAgICAgICAgIHRhcmdldCA9IHt9O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGkgPT09IGxlbmd0aCkge1xyXG4gICAgICAgICAgICB0YXJnZXQgPSB0aGlzO1xyXG4gICAgICAgICAgICBpLS07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmb3IgKDsgaSA8IGxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmICgob3B0aW9ucyA9IGFyZ3VtZW50c1tpXSkgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgZm9yIChuYW1lIGluIG9wdGlvbnMpIHtcclxuICAgICAgICAgICAgICAgICAgICBzcmMgPSB0YXJnZXRbbmFtZV07XHJcbiAgICAgICAgICAgICAgICAgICAgY29weSA9IG9wdGlvbnNbbmFtZV07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXQgPT09IGNvcHkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoZGVlcCAmJiBjb3B5ICYmICgkLmlzUGxhaW5PYmplY3QoY29weSkgfHwgKGNvcHlJc0FycmF5ID0gJC5pc0FycmF5KGNvcHkpKSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvcHlJc0FycmF5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3B5SXNBcnJheSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xvbmUgPSBzcmMgJiYgJC5pc0FycmF5KHNyYykgPyBzcmMgOiBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbG9uZSA9IHNyYyAmJiAkLmlzUGxhaW5PYmplY3Qoc3JjKSA/IHNyYyA6IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRbbmFtZV0gPSAkLmV4dGVuZChkZWVwLCBjbG9uZSwgY29weSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY29weSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldFtuYW1lXSA9IGNvcHk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGFyZ2V0O1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogbXVpIG5vb3AoZnVuY3Rpb24pXHJcbiAgICAgKi9cclxuICAgICQubm9vcCA9IGZ1bmN0aW9uKCkge307XHJcbiAgICAvKipcclxuICAgICAqIG11aSBzbGljZShhcnJheSlcclxuICAgICAqL1xyXG4gICAgJC5zbGljZSA9IFtdLnNsaWNlO1xyXG4gICAgLyoqXHJcbiAgICAgKiBtdWkgZmlsdGVyKGFycmF5KVxyXG4gICAgICovXHJcbiAgICAkLmZpbHRlciA9IFtdLmZpbHRlcjtcclxuXHJcbiAgICAkLnR5cGUgPSBmdW5jdGlvbihvYmopIHtcclxuICAgICAgICByZXR1cm4gb2JqID09IG51bGwgPyBTdHJpbmcob2JqKSA6IGNsYXNzMnR5cGVbe30udG9TdHJpbmcuY2FsbChvYmopXSB8fCBcIm9iamVjdFwiO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogbXVpIGlzQXJyYXlcclxuICAgICAqL1xyXG4gICAgJC5pc0FycmF5ID0gQXJyYXkuaXNBcnJheSB8fFxyXG4gICAgICAgIGZ1bmN0aW9uKG9iamVjdCkge1xyXG4gICAgICAgICAgICByZXR1cm4gb2JqZWN0IGluc3RhbmNlb2YgQXJyYXk7XHJcbiAgICAgICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogbXVpIGlzQXJyYXlMaWtlXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqXHJcbiAgICAgKi9cclxuICAgICQuaXNBcnJheUxpa2UgPSBmdW5jdGlvbihvYmopIHtcclxuICAgICAgICB2YXIgbGVuZ3RoID0gISFvYmogJiYgXCJsZW5ndGhcIiBpbiBvYmogJiYgb2JqLmxlbmd0aDtcclxuICAgICAgICB2YXIgdHlwZSA9ICQudHlwZShvYmopO1xyXG4gICAgICAgIGlmICh0eXBlID09PSBcImZ1bmN0aW9uXCIgfHwgJC5pc1dpbmRvdyhvYmopKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHR5cGUgPT09IFwiYXJyYXlcIiB8fCBsZW5ndGggPT09IDAgfHxcclxuICAgICAgICAgICAgdHlwZW9mIGxlbmd0aCA9PT0gXCJudW1iZXJcIiAmJiBsZW5ndGggPiAwICYmIChsZW5ndGggLSAxKSBpbiBvYmo7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBtdWkgaXNXaW5kb3co6ZyA6ICD6JmRb2Jq5Li6dW5kZWZpbmVk55qE5oOF5Ya1KVxyXG4gICAgICovXHJcbiAgICAkLmlzV2luZG93ID0gZnVuY3Rpb24ob2JqKSB7XHJcbiAgICAgICAgcmV0dXJuIG9iaiAhPSBudWxsICYmIG9iaiA9PT0gb2JqLndpbmRvdztcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIG11aSBpc09iamVjdFxyXG4gICAgICovXHJcbiAgICAkLmlzT2JqZWN0ID0gZnVuY3Rpb24ob2JqKSB7XHJcbiAgICAgICAgcmV0dXJuICQudHlwZShvYmopID09PSBcIm9iamVjdFwiO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogbXVpIGlzUGxhaW5PYmplY3RcclxuICAgICAqL1xyXG4gICAgJC5pc1BsYWluT2JqZWN0ID0gZnVuY3Rpb24ob2JqKSB7XHJcbiAgICAgICAgcmV0dXJuICQuaXNPYmplY3Qob2JqKSAmJiAhJC5pc1dpbmRvdyhvYmopICYmIE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmopID09PSBPYmplY3QucHJvdG90eXBlO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogbXVpIGlzRW1wdHlPYmplY3RcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvXHJcbiAgICAgKi9cclxuICAgICQuaXNFbXB0eU9iamVjdCA9IGZ1bmN0aW9uKG8pIHtcclxuICAgICAgICBmb3IgKHZhciBwIGluIG8pIHtcclxuICAgICAgICAgICAgaWYgKHAgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogbXVpIGlzRnVuY3Rpb25cclxuICAgICAqL1xyXG4gICAgJC5pc0Z1bmN0aW9uID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICByZXR1cm4gJC50eXBlKHZhbHVlKSA9PT0gXCJmdW5jdGlvblwiO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogbXVpIHF1ZXJ5U2VsZWN0b3JBbGxcclxuICAgICAqIEBwYXJhbSB7dHlwZX0gc2VsZWN0b3JcclxuICAgICAqIEBwYXJhbSB7dHlwZX0gY29udGV4dFxyXG4gICAgICogQHJldHVybnMge0FycmF5fVxyXG4gICAgICovXHJcbiAgICAkLnFzYSA9IGZ1bmN0aW9uKHNlbGVjdG9yLCBjb250ZXh0KSB7XHJcbiAgICAgICAgY29udGV4dCA9IGNvbnRleHQgfHwgZG9jdW1lbnQ7XHJcbiAgICAgICAgcmV0dXJuICQuc2xpY2UuY2FsbChjbGFzc1NlbGVjdG9yUkUudGVzdChzZWxlY3RvcikgPyBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoUmVnRXhwLiQxKSA6IHRhZ1NlbGVjdG9yUkUudGVzdChzZWxlY3RvcikgPyBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKHNlbGVjdG9yKSA6IGNvbnRleHQucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcikpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogcmVhZHkoRE9NQ29udGVudExvYWRlZClcclxuICAgICAqIEBwYXJhbSB7dHlwZX0gY2FsbGJhY2tcclxuICAgICAqIEByZXR1cm5zIHtfTDYuJH1cclxuICAgICAqL1xyXG4gICAgJC5yZWFkeSA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgaWYgKHJlYWR5UkUudGVzdChkb2N1bWVudC5yZWFkeVN0YXRlKSkge1xyXG4gICAgICAgICAgICBjYWxsYmFjaygkKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICBjYWxsYmFjaygkKTtcclxuICAgICAgICAgICAgfSwgZmFsc2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIOWwhiBmbiDnvJPlrZjkuIDmrrXml7bpl7TlkI4sIOWGjeiiq+iwg+eUqOaJp+ihjFxyXG4gICAgICog5q2k5pa55rOV5Li65LqG6YG/5YWN5ZyoIG1zIOauteaXtumXtOWGhSwg5omn6KGMIGZuIOWkmuasoS4g5bi455So5LqOIHJlc2l6ZSAsIHNjcm9sbCAsIG1vdXNlbW92ZSDnrYnov57nu63mgKfkuovku7bkuK07XHJcbiAgICAgKiDlvZMgbXMg6K6+572u5Li6IC0xLCDooajnpLrnq4vljbPmiafooYwgZm4sIOWNs+WSjOebtOaOpeiwg+eUqCBmbiDkuIDmoLc7XHJcbiAgICAgKiDosIPnlKjov5Tlm57lh73mlbDnmoQgc3RvcCDlgZzmraLmnIDlkI7kuIDmrKHnmoQgYnVmZmVyIOaViOaenFxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGZuXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gbXNcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjb250ZXh0XHJcbiAgICAgKi9cclxuICAgICQuYnVmZmVyID0gZnVuY3Rpb24oZm4sIG1zLCBjb250ZXh0KSB7XHJcbiAgICAgICAgdmFyIHRpbWVyO1xyXG4gICAgICAgIHZhciBsYXN0U3RhcnQgPSAwO1xyXG4gICAgICAgIHZhciBsYXN0RW5kID0gMDtcclxuICAgICAgICB2YXIgbXMgPSBtcyB8fCAxNTA7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHJ1bigpIHtcclxuICAgICAgICAgICAgaWYgKHRpbWVyKSB7XHJcbiAgICAgICAgICAgICAgICB0aW1lci5jYW5jZWwoKTtcclxuICAgICAgICAgICAgICAgIHRpbWVyID0gMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsYXN0U3RhcnQgPSAkLm5vdygpO1xyXG4gICAgICAgICAgICBmbi5hcHBseShjb250ZXh0IHx8IHRoaXMsIGFyZ3VtZW50cyk7XHJcbiAgICAgICAgICAgIGxhc3RFbmQgPSAkLm5vdygpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuICQuZXh0ZW5kKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgICAoIWxhc3RTdGFydCkgfHwgLy8g5LuO5pyq6L+Q6KGM6L+HXHJcbiAgICAgICAgICAgICAgICAobGFzdEVuZCA+PSBsYXN0U3RhcnQgJiYgJC5ub3coKSAtIGxhc3RFbmQgPiBtcykgfHwgLy8g5LiK5qyh6L+Q6KGM5oiQ5Yqf5ZCO5bey57uP6LaF6L+HbXPmr6vnp5JcclxuICAgICAgICAgICAgICAgIChsYXN0RW5kIDwgbGFzdFN0YXJ0ICYmICQubm93KCkgLSBsYXN0U3RhcnQgPiBtcyAqIDgpIC8vIOS4iuasoei/kOihjOaIluacquWujOaIkO+8jOWQjjgqbXPmr6vnp5JcclxuICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICBydW4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aW1lcikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRpbWVyLmNhbmNlbCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGltZXIgPSAkLmxhdGVyKHJ1biwgbXMsIG51bGwsICQuc2xpY2UuY2FsbChhcmd1bWVudHMpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sIHtcclxuICAgICAgICAgICAgc3RvcDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGltZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aW1lci5jYW5jZWwoKTtcclxuICAgICAgICAgICAgICAgICAgICB0aW1lciA9IDA7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIGVhY2hcclxuICAgICAqIEBwYXJhbSB7dHlwZX0gZWxlbWVudHNcclxuICAgICAqIEBwYXJhbSB7dHlwZX0gY2FsbGJhY2tcclxuICAgICAqIEByZXR1cm5zIHtfTDguJH1cclxuICAgICAqL1xyXG4gICAgJC5lYWNoID0gZnVuY3Rpb24oZWxlbWVudHMsIGNhbGxiYWNrLCBoYXNPd25Qcm9wZXJ0eSkge1xyXG4gICAgICAgIGlmICghZWxlbWVudHMpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0eXBlb2YgZWxlbWVudHMubGVuZ3RoID09PSAnbnVtYmVyJykge1xyXG4gICAgICAgICAgICBbXS5ldmVyeS5jYWxsKGVsZW1lbnRzLCBmdW5jdGlvbihlbCwgaWR4KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY2FsbGJhY2suY2FsbChlbCwgaWR4LCBlbCkgIT09IGZhbHNlO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gZWxlbWVudHMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlbGVtZW50cy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjay5jYWxsKGVsZW1lbnRzW2tleV0sIGtleSwgZWxlbWVudHNba2V5XSkgPT09IGZhbHNlKSByZXR1cm4gZWxlbWVudHM7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2suY2FsbChlbGVtZW50c1trZXldLCBrZXksIGVsZW1lbnRzW2tleV0pID09PSBmYWxzZSkgcmV0dXJuIGVsZW1lbnRzO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuICAgICQuZm9jdXMgPSBmdW5jdGlvbihlbGVtZW50KSB7XHJcbiAgICAgICAgaWYgKCQub3MuaW9zKSB7XHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICBlbGVtZW50LmZvY3VzKCk7XHJcbiAgICAgICAgICAgIH0sIDEwKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBlbGVtZW50LmZvY3VzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogdHJpZ2dlciBldmVudFxyXG4gICAgICogQHBhcmFtIHt0eXBlfSBlbGVtZW50XHJcbiAgICAgKiBAcGFyYW0ge3R5cGV9IGV2ZW50VHlwZVxyXG4gICAgICogQHBhcmFtIHt0eXBlfSBldmVudERhdGFcclxuICAgICAqIEByZXR1cm5zIHtfTDguJH1cclxuICAgICAqL1xyXG4gICAgJC50cmlnZ2VyID0gZnVuY3Rpb24oZWxlbWVudCwgZXZlbnRUeXBlLCBldmVudERhdGEpIHtcclxuICAgICAgICBlbGVtZW50LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KGV2ZW50VHlwZSwge1xyXG4gICAgICAgICAgICBkZXRhaWw6IGV2ZW50RGF0YSxcclxuICAgICAgICAgICAgYnViYmxlczogdHJ1ZSxcclxuICAgICAgICAgICAgY2FuY2VsYWJsZTogdHJ1ZVxyXG4gICAgICAgIH0pKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIGdldFN0eWxlc1xyXG4gICAgICogQHBhcmFtIHt0eXBlfSBlbGVtZW50XHJcbiAgICAgKiBAcGFyYW0ge3R5cGV9IHByb3BlcnR5XHJcbiAgICAgKiBAcmV0dXJucyB7c3R5bGVzfVxyXG4gICAgICovXHJcbiAgICAkLmdldFN0eWxlcyA9IGZ1bmN0aW9uKGVsZW1lbnQsIHByb3BlcnR5KSB7XHJcbiAgICAgICAgdmFyIHN0eWxlcyA9IGVsZW1lbnQub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQsIG51bGwpO1xyXG4gICAgICAgIGlmIChwcm9wZXJ0eSkge1xyXG4gICAgICAgICAgICByZXR1cm4gc3R5bGVzLmdldFByb3BlcnR5VmFsdWUocHJvcGVydHkpIHx8IHN0eWxlc1twcm9wZXJ0eV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBzdHlsZXM7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBwYXJzZVRyYW5zbGF0ZVxyXG4gICAgICogQHBhcmFtIHt0eXBlfSB0cmFuc2xhdGVTdHJpbmdcclxuICAgICAqIEBwYXJhbSB7dHlwZX0gcG9zaXRpb25cclxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9XHJcbiAgICAgKi9cclxuICAgICQucGFyc2VUcmFuc2xhdGUgPSBmdW5jdGlvbih0cmFuc2xhdGVTdHJpbmcsIHBvc2l0aW9uKSB7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IHRyYW5zbGF0ZVN0cmluZy5tYXRjaCh0cmFuc2xhdGVSRSB8fCAnJyk7XHJcbiAgICAgICAgaWYgKCFyZXN1bHQgfHwgIXJlc3VsdFsxXSkge1xyXG4gICAgICAgICAgICByZXN1bHQgPSBbJycsICcwLDAsMCddO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXN1bHQgPSByZXN1bHRbMV0uc3BsaXQoXCIsXCIpO1xyXG4gICAgICAgIHJlc3VsdCA9IHtcclxuICAgICAgICAgICAgeDogcGFyc2VGbG9hdChyZXN1bHRbMF0pLFxyXG4gICAgICAgICAgICB5OiBwYXJzZUZsb2F0KHJlc3VsdFsxXSksXHJcbiAgICAgICAgICAgIHo6IHBhcnNlRmxvYXQocmVzdWx0WzJdKVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgaWYgKHBvc2l0aW9uICYmIHJlc3VsdC5oYXNPd25Qcm9wZXJ0eShwb3NpdGlvbikpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdFtwb3NpdGlvbl07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBwYXJzZVRyYW5zbGF0ZU1hdHJpeFxyXG4gICAgICogQHBhcmFtIHt0eXBlfSB0cmFuc2xhdGVTdHJpbmdcclxuICAgICAqIEBwYXJhbSB7dHlwZX0gcG9zaXRpb25cclxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9XHJcbiAgICAgKi9cclxuICAgICQucGFyc2VUcmFuc2xhdGVNYXRyaXggPSBmdW5jdGlvbih0cmFuc2xhdGVTdHJpbmcsIHBvc2l0aW9uKSB7XHJcbiAgICAgICAgdmFyIG1hdHJpeCA9IHRyYW5zbGF0ZVN0cmluZy5tYXRjaCh0cmFuc2xhdGVNYXRyaXhSRSk7XHJcbiAgICAgICAgdmFyIGlzM0QgPSBtYXRyaXggJiYgbWF0cml4WzFdO1xyXG4gICAgICAgIGlmIChtYXRyaXgpIHtcclxuICAgICAgICAgICAgbWF0cml4ID0gbWF0cml4WzJdLnNwbGl0KFwiLFwiKTtcclxuICAgICAgICAgICAgaWYgKGlzM0QgPT09IFwiM2RcIilcclxuICAgICAgICAgICAgICAgIG1hdHJpeCA9IG1hdHJpeC5zbGljZSgxMiwgMTUpO1xyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIG1hdHJpeC5wdXNoKDApO1xyXG4gICAgICAgICAgICAgICAgbWF0cml4ID0gbWF0cml4LnNsaWNlKDQsIDcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgbWF0cml4ID0gWzAsIDAsIDBdO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgcmVzdWx0ID0ge1xyXG4gICAgICAgICAgICB4OiBwYXJzZUZsb2F0KG1hdHJpeFswXSksXHJcbiAgICAgICAgICAgIHk6IHBhcnNlRmxvYXQobWF0cml4WzFdKSxcclxuICAgICAgICAgICAgejogcGFyc2VGbG9hdChtYXRyaXhbMl0pXHJcbiAgICAgICAgfTtcclxuICAgICAgICBpZiAocG9zaXRpb24gJiYgcmVzdWx0Lmhhc093blByb3BlcnR5KHBvc2l0aW9uKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0W3Bvc2l0aW9uXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH07XHJcbiAgICAkLmhvb2tzID0ge307XHJcbiAgICAkLmFkZEFjdGlvbiA9IGZ1bmN0aW9uKHR5cGUsIGhvb2spIHtcclxuICAgICAgICB2YXIgaG9va3MgPSAkLmhvb2tzW3R5cGVdO1xyXG4gICAgICAgIGlmICghaG9va3MpIHtcclxuICAgICAgICAgICAgaG9va3MgPSBbXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaG9vay5pbmRleCA9IGhvb2suaW5kZXggfHwgMTAwMDtcclxuICAgICAgICBob29rcy5wdXNoKGhvb2spO1xyXG4gICAgICAgIGhvb2tzLnNvcnQoZnVuY3Rpb24oYSwgYikge1xyXG4gICAgICAgICAgICByZXR1cm4gYS5pbmRleCAtIGIuaW5kZXg7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgJC5ob29rc1t0eXBlXSA9IGhvb2tzO1xyXG4gICAgICAgIHJldHVybiAkLmhvb2tzW3R5cGVdO1xyXG4gICAgfTtcclxuICAgICQuZG9BY3Rpb24gPSBmdW5jdGlvbih0eXBlLCBjYWxsYmFjaykge1xyXG4gICAgICAgIGlmICgkLmlzRnVuY3Rpb24oY2FsbGJhY2spKSB7IC8v5oyH5a6a5LqGY2FsbGJhY2tcclxuICAgICAgICAgICAgJC5lYWNoKCQuaG9va3NbdHlwZV0sIGNhbGxiYWNrKTtcclxuICAgICAgICB9IGVsc2UgeyAvL+acquaMh+WummNhbGxiYWNr77yM55u05o6l5omn6KGMXHJcbiAgICAgICAgICAgICQuZWFjaCgkLmhvb2tzW3R5cGVdLCBmdW5jdGlvbihpbmRleCwgaG9vaykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICFob29rLmhhbmRsZSgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBzZXRUaW1lb3V05bCB6KOFXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZm5cclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSB3aGVuXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gY29udGV4dFxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGRhdGFcclxuICAgICAqL1xyXG4gICAgJC5sYXRlciA9IGZ1bmN0aW9uKGZuLCB3aGVuLCBjb250ZXh0LCBkYXRhKSB7XHJcbiAgICAgICAgd2hlbiA9IHdoZW4gfHwgMDtcclxuICAgICAgICB2YXIgbSA9IGZuO1xyXG4gICAgICAgIHZhciBkID0gZGF0YTtcclxuICAgICAgICB2YXIgZjtcclxuICAgICAgICB2YXIgcjtcclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiBmbiA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgbSA9IGNvbnRleHRbZm5dO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBtLmFwcGx5KGNvbnRleHQsICQuaXNBcnJheShkKSA/IGQgOiBbZF0pO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHIgPSBzZXRUaW1lb3V0KGYsIHdoZW4pO1xyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBpZDogcixcclxuICAgICAgICAgICAgY2FuY2VsOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dChyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICB9O1xyXG4gICAgJC5ub3cgPSBEYXRlLm5vdyB8fCBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gK25ldyBEYXRlKCk7XHJcbiAgICB9O1xyXG4gICAgdmFyIGNsYXNzMnR5cGUgPSB7fTtcclxuICAgICQuZWFjaChbJ0Jvb2xlYW4nLCAnTnVtYmVyJywgJ1N0cmluZycsICdGdW5jdGlvbicsICdBcnJheScsICdEYXRlJywgJ1JlZ0V4cCcsICdPYmplY3QnLCAnRXJyb3InXSwgZnVuY3Rpb24oaSwgbmFtZSkge1xyXG4gICAgICAgIGNsYXNzMnR5cGVbXCJbb2JqZWN0IFwiICsgbmFtZSArIFwiXVwiXSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcclxuICAgIH0pO1xyXG4gICAgaWYgKHdpbmRvdy5KU09OKSB7XHJcbiAgICAgICAgJC5wYXJzZUpTT04gPSBKU09OLnBhcnNlO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiAkLmZuXHJcbiAgICAgKi9cclxuICAgICQuZm4gPSB7XHJcbiAgICAgICAgZWFjaDogZnVuY3Rpb24oY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgW10uZXZlcnkuY2FsbCh0aGlzLCBmdW5jdGlvbihlbCwgaWR4KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY2FsbGJhY2suY2FsbChlbCwgaWR4LCBlbCkgIT09IGZhbHNlO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIOWFvOWuuSBBTUQg5qih5Z2XXHJcbiAgICAgKiovXHJcbiAgICBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XHJcbiAgICAgICAgZGVmaW5lKCdtdWknLCBbXSwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAkO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiAkO1xyXG59KShkb2N1bWVudCk7XHJcbihmdW5jdGlvbiAoJCwgd2luZG93LCB1bmRlZmluZWQpIHtcclxuICAgIHZhciBqc29uVHlwZSA9ICdhcHBsaWNhdGlvbi9qc29uJztcclxuICAgIHZhciBodG1sVHlwZSA9ICd0ZXh0L2h0bWwnO1xyXG4gICAgdmFyIHJzY3JpcHQgPSAvPHNjcmlwdFxcYltePF0qKD86KD8hPFxcL3NjcmlwdD4pPFtePF0qKSo8XFwvc2NyaXB0Pi9naTtcclxuICAgIHZhciBzY3JpcHRUeXBlUkUgPSAvXig/OnRleHR8YXBwbGljYXRpb24pXFwvamF2YXNjcmlwdC9pO1xyXG4gICAgdmFyIHhtbFR5cGVSRSA9IC9eKD86dGV4dHxhcHBsaWNhdGlvbilcXC94bWwvaTtcclxuICAgIHZhciBibGFua1JFID0gL15cXHMqJC87XHJcblxyXG4gICAgJC5hamF4U2V0dGluZ3MgPSB7XHJcbiAgICAgICAgdHlwZTogJ0dFVCcsXHJcbiAgICAgICAgYmVmb3JlU2VuZDogJC5ub29wLFxyXG4gICAgICAgIHN1Y2Nlc3M6ICQubm9vcCxcclxuICAgICAgICBlcnJvcjogJC5ub29wLFxyXG4gICAgICAgIGNvbXBsZXRlOiAkLm5vb3AsXHJcbiAgICAgICAgY29udGV4dDogbnVsbCxcclxuICAgICAgICB4aHI6IGZ1bmN0aW9uIChwcm90b2NvbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IHdpbmRvdy5YTUxIdHRwUmVxdWVzdCgpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgYWNjZXB0czoge1xyXG4gICAgICAgICAgICBzY3JpcHQ6ICd0ZXh0L2phdmFzY3JpcHQsIGFwcGxpY2F0aW9uL2phdmFzY3JpcHQsIGFwcGxpY2F0aW9uL3gtamF2YXNjcmlwdCcsXHJcbiAgICAgICAgICAgIGpzb246IGpzb25UeXBlLFxyXG4gICAgICAgICAgICB4bWw6ICdhcHBsaWNhdGlvbi94bWwsIHRleHQveG1sJyxcclxuICAgICAgICAgICAgaHRtbDogaHRtbFR5cGUsXHJcbiAgICAgICAgICAgIHRleHQ6ICd0ZXh0L3BsYWluJ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdGltZW91dDogMCxcclxuICAgICAgICBwcm9jZXNzRGF0YTogdHJ1ZSxcclxuICAgICAgICBjYWNoZTogdHJ1ZVxyXG4gICAgfTtcclxuICAgIHZhciBhamF4QmVmb3JlU2VuZCA9IGZ1bmN0aW9uICh4aHIsIHNldHRpbmdzKSB7XHJcbiAgICAgICAgdmFyIGNvbnRleHQgPSBzZXR0aW5ncy5jb250ZXh0XHJcbiAgICAgICAgaWYgKHNldHRpbmdzLmJlZm9yZVNlbmQuY2FsbChjb250ZXh0LCB4aHIsIHNldHRpbmdzKSA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICB2YXIgYWpheFN1Y2Nlc3MgPSBmdW5jdGlvbiAoZGF0YSwgeGhyLCBzZXR0aW5ncykge1xyXG4gICAgICAgIHNldHRpbmdzLnN1Y2Nlc3MuY2FsbChzZXR0aW5ncy5jb250ZXh0LCBkYXRhLCAnc3VjY2VzcycsIHhocik7XHJcbiAgICAgICAgYWpheENvbXBsZXRlKCdzdWNjZXNzJywgeGhyLCBzZXR0aW5ncyk7XHJcbiAgICB9O1xyXG4gICAgLy8gdHlwZTogXCJ0aW1lb3V0XCIsIFwiZXJyb3JcIiwgXCJhYm9ydFwiLCBcInBhcnNlcmVycm9yXCJcclxuICAgIHZhciBhamF4RXJyb3IgPSBmdW5jdGlvbiAoZXJyb3IsIHR5cGUsIHhociwgc2V0dGluZ3MpIHtcclxuICAgICAgICBzZXR0aW5ncy5lcnJvci5jYWxsKHNldHRpbmdzLmNvbnRleHQsIHhociwgdHlwZSwgZXJyb3IpO1xyXG4gICAgICAgIGFqYXhDb21wbGV0ZSh0eXBlLCB4aHIsIHNldHRpbmdzKTtcclxuICAgIH07XHJcbiAgICAvLyBzdGF0dXM6IFwic3VjY2Vzc1wiLCBcIm5vdG1vZGlmaWVkXCIsIFwiZXJyb3JcIiwgXCJ0aW1lb3V0XCIsIFwiYWJvcnRcIiwgXCJwYXJzZXJlcnJvclwiXHJcbiAgICB2YXIgYWpheENvbXBsZXRlID0gZnVuY3Rpb24gKHN0YXR1cywgeGhyLCBzZXR0aW5ncykge1xyXG4gICAgICAgIHNldHRpbmdzLmNvbXBsZXRlLmNhbGwoc2V0dGluZ3MuY29udGV4dCwgeGhyLCBzdGF0dXMpO1xyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgc2VyaWFsaXplID0gZnVuY3Rpb24gKHBhcmFtcywgb2JqLCB0cmFkaXRpb25hbCwgc2NvcGUpIHtcclxuICAgICAgICB2YXIgdHlwZSwgYXJyYXkgPSAkLmlzQXJyYXkob2JqKSxcclxuICAgICAgICAgICAgaGFzaCA9ICQuaXNQbGFpbk9iamVjdChvYmopO1xyXG4gICAgICAgICQuZWFjaChvYmosIGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHR5cGUgPSAkLnR5cGUodmFsdWUpO1xyXG4gICAgICAgICAgICBpZiAoc2NvcGUpIHtcclxuICAgICAgICAgICAgICAgIGtleSA9IHRyYWRpdGlvbmFsID8gc2NvcGUgOlxyXG4gICAgICAgICAgICAgICAgICAgIHNjb3BlICsgJ1snICsgKGhhc2ggfHwgdHlwZSA9PT0gJ29iamVjdCcgfHwgdHlwZSA9PT0gJ2FycmF5JyA/IGtleSA6ICcnKSArICddJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBoYW5kbGUgZGF0YSBpbiBzZXJpYWxpemVBcnJheSgpIGZvcm1hdFxyXG4gICAgICAgICAgICBpZiAoIXNjb3BlICYmIGFycmF5KSB7XHJcbiAgICAgICAgICAgICAgICBwYXJhbXMuYWRkKHZhbHVlLm5hbWUsIHZhbHVlLnZhbHVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyByZWN1cnNlIGludG8gbmVzdGVkIG9iamVjdHNcclxuICAgICAgICAgICAgZWxzZSBpZiAodHlwZSA9PT0gXCJhcnJheVwiIHx8ICghdHJhZGl0aW9uYWwgJiYgdHlwZSA9PT0gXCJvYmplY3RcIikpIHtcclxuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZShwYXJhbXMsIHZhbHVlLCB0cmFkaXRpb25hbCwga2V5KTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHBhcmFtcy5hZGQoa2V5LCB2YWx1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICB2YXIgc2VyaWFsaXplRGF0YSA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XHJcbiAgICAgICAgaWYgKG9wdGlvbnMucHJvY2Vzc0RhdGEgJiYgb3B0aW9ucy5kYXRhICYmIHR5cGVvZiBvcHRpb25zLmRhdGEgIT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgdmFyIGNvbnRlbnRUeXBlID0gb3B0aW9ucy5jb250ZW50VHlwZTtcclxuICAgICAgICAgICAgaWYgKCFjb250ZW50VHlwZSAmJiBvcHRpb25zLmhlYWRlcnMpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRlbnRUeXBlID0gb3B0aW9ucy5oZWFkZXJzWydDb250ZW50LVR5cGUnXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoY29udGVudFR5cGUgJiYgfmNvbnRlbnRUeXBlLmluZGV4T2YoanNvblR5cGUpKSB7IC8vYXBwbGljYXRpb24vanNvblxyXG4gICAgICAgICAgICAgICAgb3B0aW9ucy5kYXRhID0gSlNPTi5zdHJpbmdpZnkob3B0aW9ucy5kYXRhKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIG9wdGlvbnMuZGF0YSA9ICQucGFyYW0ob3B0aW9ucy5kYXRhLCBvcHRpb25zLnRyYWRpdGlvbmFsKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAob3B0aW9ucy5kYXRhICYmICghb3B0aW9ucy50eXBlIHx8IG9wdGlvbnMudHlwZS50b1VwcGVyQ2FzZSgpID09PSAnR0VUJykpIHtcclxuICAgICAgICAgICAgb3B0aW9ucy51cmwgPSBhcHBlbmRRdWVyeShvcHRpb25zLnVybCwgb3B0aW9ucy5kYXRhKTtcclxuICAgICAgICAgICAgb3B0aW9ucy5kYXRhID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICB2YXIgYXBwZW5kUXVlcnkgPSBmdW5jdGlvbiAodXJsLCBxdWVyeSkge1xyXG4gICAgICAgIGlmIChxdWVyeSA9PT0gJycpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHVybDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuICh1cmwgKyAnJicgKyBxdWVyeSkucmVwbGFjZSgvWyY/XXsxLDJ9LywgJz8nKTtcclxuICAgIH07XHJcbiAgICB2YXIgbWltZVRvRGF0YVR5cGUgPSBmdW5jdGlvbiAobWltZSkge1xyXG4gICAgICAgIGlmIChtaW1lKSB7XHJcbiAgICAgICAgICAgIG1pbWUgPSBtaW1lLnNwbGl0KCc7JywgMilbMF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBtaW1lICYmIChtaW1lID09PSBodG1sVHlwZSA/ICdodG1sJyA6XHJcbiAgICAgICAgICAgIG1pbWUgPT09IGpzb25UeXBlID8gJ2pzb24nIDpcclxuICAgICAgICAgICAgICAgIHNjcmlwdFR5cGVSRS50ZXN0KG1pbWUpID8gJ3NjcmlwdCcgOlxyXG4gICAgICAgICAgICAgICAgICAgIHhtbFR5cGVSRS50ZXN0KG1pbWUpICYmICd4bWwnKSB8fCAndGV4dCc7XHJcbiAgICB9O1xyXG4gICAgdmFyIHBhcnNlQXJndW1lbnRzID0gZnVuY3Rpb24gKHVybCwgZGF0YSwgc3VjY2VzcywgZGF0YVR5cGUpIHtcclxuICAgICAgICBpZiAoJC5pc0Z1bmN0aW9uKGRhdGEpKSB7XHJcbiAgICAgICAgICAgIGRhdGFUeXBlID0gc3VjY2Vzcywgc3VjY2VzcyA9IGRhdGEsIGRhdGEgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghJC5pc0Z1bmN0aW9uKHN1Y2Nlc3MpKSB7XHJcbiAgICAgICAgICAgIGRhdGFUeXBlID0gc3VjY2Vzcywgc3VjY2VzcyA9IHVuZGVmaW5lZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgdXJsOiB1cmwsXHJcbiAgICAgICAgICAgIGRhdGE6IGRhdGEsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3M6IHN1Y2Nlc3MsXHJcbiAgICAgICAgICAgIGRhdGFUeXBlOiBkYXRhVHlwZVxyXG4gICAgICAgIH07XHJcbiAgICB9O1xyXG4gICAgJC5hamF4ID0gZnVuY3Rpb24gKHVybCwgb3B0aW9ucykge1xyXG4gICAgICAgIGlmICh0eXBlb2YgdXJsID09PSBcIm9iamVjdFwiKSB7XHJcbiAgICAgICAgICAgIG9wdGlvbnMgPSB1cmw7XHJcbiAgICAgICAgICAgIHVybCA9IHVuZGVmaW5lZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHNldHRpbmdzID0gb3B0aW9ucyB8fCB7fTtcclxuICAgICAgICBzZXR0aW5ncy51cmwgPSB1cmwgfHwgc2V0dGluZ3MudXJsO1xyXG4gICAgICAgIGZvciAodmFyIGtleSBpbiAkLmFqYXhTZXR0aW5ncykge1xyXG4gICAgICAgICAgICBpZiAoc2V0dGluZ3Nba2V5XSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICBzZXR0aW5nc1trZXldID0gJC5hamF4U2V0dGluZ3Nba2V5XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBzZXJpYWxpemVEYXRhKHNldHRpbmdzKTtcclxuICAgICAgICB2YXIgZGF0YVR5cGUgPSBzZXR0aW5ncy5kYXRhVHlwZTtcclxuXHJcbiAgICAgICAgaWYgKHNldHRpbmdzLmNhY2hlID09PSBmYWxzZSB8fCAoKCFvcHRpb25zIHx8IG9wdGlvbnMuY2FjaGUgIT09IHRydWUpICYmICgnc2NyaXB0JyA9PT0gZGF0YVR5cGUpKSkge1xyXG4gICAgICAgICAgICBzZXR0aW5ncy51cmwgPSBhcHBlbmRRdWVyeShzZXR0aW5ncy51cmwsICdfPScgKyAkLm5vdygpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIG1pbWUgPSBzZXR0aW5ncy5hY2NlcHRzW2RhdGFUeXBlICYmIGRhdGFUeXBlLnRvTG93ZXJDYXNlKCldO1xyXG4gICAgICAgIHZhciBoZWFkZXJzID0ge307XHJcbiAgICAgICAgdmFyIHNldEhlYWRlciA9IGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICBoZWFkZXJzW25hbWUudG9Mb3dlckNhc2UoKV0gPSBbbmFtZSwgdmFsdWVdO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdmFyIHByb3RvY29sID0gL14oW1xcdy1dKzopXFwvXFwvLy50ZXN0KHNldHRpbmdzLnVybCkgPyBSZWdFeHAuJDEgOiB3aW5kb3cubG9jYXRpb24ucHJvdG9jb2w7XHJcbiAgICAgICAgdmFyIHhociA9IHNldHRpbmdzLnhocihzZXR0aW5ncyk7XHJcbiAgICAgICAgdmFyIG5hdGl2ZVNldEhlYWRlciA9IHhoci5zZXRSZXF1ZXN0SGVhZGVyO1xyXG4gICAgICAgIHZhciBhYm9ydFRpbWVvdXQ7XHJcblxyXG4gICAgICAgIHNldEhlYWRlcignWC1SZXF1ZXN0ZWQtV2l0aCcsICdYTUxIdHRwUmVxdWVzdCcpO1xyXG4gICAgICAgIHNldEhlYWRlcignQWNjZXB0JywgbWltZSB8fCAnKi8qJyk7XHJcbiAgICAgICAgaWYgKCEhKG1pbWUgPSBzZXR0aW5ncy5taW1lVHlwZSB8fCBtaW1lKSkge1xyXG4gICAgICAgICAgICBpZiAobWltZS5pbmRleE9mKCcsJykgPiAtMSkge1xyXG4gICAgICAgICAgICAgICAgbWltZSA9IG1pbWUuc3BsaXQoJywnLCAyKVswXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB4aHIub3ZlcnJpZGVNaW1lVHlwZSAmJiB4aHIub3ZlcnJpZGVNaW1lVHlwZShtaW1lKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHNldHRpbmdzLmNvbnRlbnRUeXBlIHx8IChzZXR0aW5ncy5jb250ZW50VHlwZSAhPT0gZmFsc2UgJiYgc2V0dGluZ3MuZGF0YSAmJiBzZXR0aW5ncy50eXBlLnRvVXBwZXJDYXNlKCkgIT09ICdHRVQnKSkge1xyXG4gICAgICAgICAgICBzZXRIZWFkZXIoJ0NvbnRlbnQtVHlwZScsIHNldHRpbmdzLmNvbnRlbnRUeXBlIHx8ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHNldHRpbmdzLmhlYWRlcnMpIHtcclxuICAgICAgICAgICAgZm9yICh2YXIgbmFtZSBpbiBzZXR0aW5ncy5oZWFkZXJzKVxyXG4gICAgICAgICAgICAgICAgc2V0SGVhZGVyKG5hbWUsIHNldHRpbmdzLmhlYWRlcnNbbmFtZV0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlciA9IHNldEhlYWRlcjtcclxuXHJcbiAgICAgICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKHhoci5yZWFkeVN0YXRlID09PSA0KSB7XHJcbiAgICAgICAgICAgICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gJC5ub29wO1xyXG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KGFib3J0VGltZW91dCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0LCBlcnJvciA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgdmFyIGlzTG9jYWwgPSBwcm90b2NvbCA9PT0gJ2ZpbGU6JztcclxuICAgICAgICAgICAgICAgIGlmICgoeGhyLnN0YXR1cyA+PSAyMDAgJiYgeGhyLnN0YXR1cyA8IDMwMCkgfHwgeGhyLnN0YXR1cyA9PT0gMzA0IHx8ICh4aHIuc3RhdHVzID09PSAwICYmIGlzTG9jYWwgJiYgeGhyLnJlc3BvbnNlVGV4dCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZSA9IGRhdGFUeXBlIHx8IG1pbWVUb0RhdGFUeXBlKHNldHRpbmdzLm1pbWVUeXBlIHx8IHhoci5nZXRSZXNwb25zZUhlYWRlcignY29udGVudC10eXBlJykpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHhoci5yZXNwb25zZVRleHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaHR0cDovL3BlcmZlY3Rpb25raWxscy5jb20vZ2xvYmFsLWV2YWwtd2hhdC1hcmUtdGhlLW9wdGlvbnMvXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhVHlwZSA9PT0gJ3NjcmlwdCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICgxLCBldmFsKShyZXN1bHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGRhdGFUeXBlID09PSAneG1sJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0geGhyLnJlc3BvbnNlWE1MO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGRhdGFUeXBlID09PSAnanNvbicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IGJsYW5rUkUudGVzdChyZXN1bHQpID8gbnVsbCA6ICQucGFyc2VKU09OKHJlc3VsdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yID0gZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhamF4RXJyb3IoZXJyb3IsICdwYXJzZXJlcnJvcicsIHhociwgc2V0dGluZ3MpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFqYXhTdWNjZXNzKHJlc3VsdCwgeGhyLCBzZXR0aW5ncyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgc3RhdHVzID0geGhyLnN0YXR1cyA/ICdlcnJvcicgOiAnYWJvcnQnO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzdGF0dXNUZXh0ID0geGhyLnN0YXR1c1RleHQgfHwgbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNMb2NhbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXMgPSAnZXJyb3InO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXNUZXh0ID0gJzQwNCc7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGFqYXhFcnJvcihzdGF0dXNUZXh0LCBzdGF0dXMsIHhociwgc2V0dGluZ3MpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBpZiAoYWpheEJlZm9yZVNlbmQoeGhyLCBzZXR0aW5ncykgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIHhoci5hYm9ydCgpO1xyXG4gICAgICAgICAgICBhamF4RXJyb3IobnVsbCwgJ2Fib3J0JywgeGhyLCBzZXR0aW5ncyk7XHJcbiAgICAgICAgICAgIHJldHVybiB4aHI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoc2V0dGluZ3MueGhyRmllbGRzKSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIG5hbWUgaW4gc2V0dGluZ3MueGhyRmllbGRzKSB7XHJcbiAgICAgICAgICAgICAgICB4aHJbbmFtZV0gPSBzZXR0aW5ncy54aHJGaWVsZHNbbmFtZV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBhc3luYyA9ICdhc3luYycgaW4gc2V0dGluZ3MgPyBzZXR0aW5ncy5hc3luYyA6IHRydWU7XHJcblxyXG4gICAgICAgIHhoci5vcGVuKHNldHRpbmdzLnR5cGUudG9VcHBlckNhc2UoKSwgc2V0dGluZ3MudXJsLCBhc3luYywgc2V0dGluZ3MudXNlcm5hbWUsIHNldHRpbmdzLnBhc3N3b3JkKTtcclxuXHJcbiAgICAgICAgZm9yICh2YXIgbmFtZSBpbiBoZWFkZXJzKSB7XHJcbiAgICAgICAgICAgIGlmIChoZWFkZXJzLmhhc093blByb3BlcnR5KG5hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICBuYXRpdmVTZXRIZWFkZXIuYXBwbHkoeGhyLCBoZWFkZXJzW25hbWVdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoc2V0dGluZ3MudGltZW91dCA+IDApIHtcclxuICAgICAgICAgICAgYWJvcnRUaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gJC5ub29wO1xyXG4gICAgICAgICAgICAgICAgeGhyLmFib3J0KCk7XHJcbiAgICAgICAgICAgICAgICBhamF4RXJyb3IobnVsbCwgJ3RpbWVvdXQnLCB4aHIsIHNldHRpbmdzKTtcclxuICAgICAgICAgICAgfSwgc2V0dGluZ3MudGltZW91dCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHhoci5zZW5kKHNldHRpbmdzLmRhdGEgPyBzZXR0aW5ncy5kYXRhIDogbnVsbCk7XHJcbiAgICAgICAgcmV0dXJuIHhocjtcclxuICAgIH07XHJcblxyXG4gICAgJC5wYXJhbSA9IGZ1bmN0aW9uIChvYmosIHRyYWRpdGlvbmFsKSB7XHJcbiAgICAgICAgdmFyIHBhcmFtcyA9IFtdO1xyXG4gICAgICAgIHBhcmFtcy5hZGQgPSBmdW5jdGlvbiAoaywgdikge1xyXG4gICAgICAgICAgICB0aGlzLnB1c2goZW5jb2RlVVJJQ29tcG9uZW50KGspICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHYpKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHNlcmlhbGl6ZShwYXJhbXMsIG9iaiwgdHJhZGl0aW9uYWwpO1xyXG4gICAgICAgIHJldHVybiBwYXJhbXMuam9pbignJicpLnJlcGxhY2UoLyUyMC9nLCAnKycpO1xyXG4gICAgfTtcclxuICAgICQuZ2V0ID0gZnVuY3Rpb24gKC8qIHVybCwgZGF0YSwgc3VjY2VzcywgZGF0YVR5cGUgKi8pIHtcclxuICAgICAgICByZXR1cm4gJC5hamF4KHBhcnNlQXJndW1lbnRzLmFwcGx5KG51bGwsIGFyZ3VtZW50cykpO1xyXG4gICAgfTtcclxuXHJcbiAgICAkLnBvc3QgPSBmdW5jdGlvbiAoLyogdXJsLCBkYXRhLCBzdWNjZXNzLCBkYXRhVHlwZSAqLykge1xyXG4gICAgICAgIHZhciBvcHRpb25zID0gcGFyc2VBcmd1bWVudHMuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcclxuICAgICAgICBvcHRpb25zLnR5cGUgPSAnUE9TVCc7XHJcbiAgICAgICAgcmV0dXJuICQuYWpheChvcHRpb25zKTtcclxuICAgIH07XHJcblxyXG4gICAgJC5nZXRKU09OID0gZnVuY3Rpb24gKC8qIHVybCwgZGF0YSwgc3VjY2VzcyAqLykge1xyXG4gICAgICAgIHZhciBvcHRpb25zID0gcGFyc2VBcmd1bWVudHMuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcclxuICAgICAgICBvcHRpb25zLmRhdGFUeXBlID0gJ2pzb24nO1xyXG4gICAgICAgIHJldHVybiAkLmFqYXgob3B0aW9ucyk7XHJcbiAgICB9O1xyXG5cclxuICAgICQuZm4ubG9hZCA9IGZ1bmN0aW9uICh1cmwsIGRhdGEsIHN1Y2Nlc3MpIHtcclxuICAgICAgICBpZiAoIXRoaXMubGVuZ3RoKVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB2YXIgc2VsZiA9IHRoaXMsXHJcbiAgICAgICAgICAgIHBhcnRzID0gdXJsLnNwbGl0KC9cXHMvKSxcclxuICAgICAgICAgICAgc2VsZWN0b3IsXHJcbiAgICAgICAgICAgIG9wdGlvbnMgPSBwYXJzZUFyZ3VtZW50cyh1cmwsIGRhdGEsIHN1Y2Nlc3MpLFxyXG4gICAgICAgICAgICBjYWxsYmFjayA9IG9wdGlvbnMuc3VjY2VzcztcclxuICAgICAgICBpZiAocGFydHMubGVuZ3RoID4gMSlcclxuICAgICAgICAgICAgb3B0aW9ucy51cmwgPSBwYXJ0c1swXSwgc2VsZWN0b3IgPSBwYXJ0c1sxXTtcclxuICAgICAgICBvcHRpb25zLnN1Y2Nlc3MgPSBmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgaWYgKHNlbGVjdG9yKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgICAgICAgICBkaXYuaW5uZXJIVE1MID0gcmVzcG9uc2UucmVwbGFjZShyc2NyaXB0LCBcIlwiKTtcclxuICAgICAgICAgICAgICAgIHZhciBzZWxlY3RvckRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGNoaWxkcyA9IGRpdi5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTtcclxuICAgICAgICAgICAgICAgIGlmIChjaGlsZHMgJiYgY2hpbGRzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gY2hpbGRzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yRGl2LmFwcGVuZENoaWxkKGNoaWxkc1tpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgc2VsZlswXS5pbm5lckhUTUwgPSBzZWxlY3RvckRpdi5pbm5lckhUTUw7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBzZWxmWzBdLmlubmVySFRNTCA9IHJlc3BvbnNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrLmFwcGx5KHNlbGYsIGFyZ3VtZW50cyk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAkLmFqYXgob3B0aW9ucyk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG5cclxufSkoaHR0cCwgd2luZG93KTtcclxuXHJcbmh0dHAuend0QWpheCA9IGZ1bmN0aW9uICh1cmwsIGRhdGFvKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIGxldCBlcnJvck9sZCA9IGRhdGFvLmVycm9yXHJcbiAgICAgICAgZGF0YW8uZXJyb3IgPSBmdW5jdGlvbiAoeGhyLCB0eXBlLCBlcnJvclRocm93bikge1xyXG4gICAgICAgICAgICBsZXQgcmVzcCA9IEpTT04ucGFyc2UoeGhyLnJlc3BvbnNlKVxyXG4gICAgICAgICAgICBpZiAocmVzcC5jb2RlID09PSAnU0NfVU5BVVRIT1JJWkVEJykge1xyXG4gICAgICAgICAgICAgICAgJHp3dF9zZGsuYXV0aC51c2VyLmdldENvZGUoZnVuY3Rpb24gKGNvZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBodHRwLmFqYXgoJ2h0dHA6Ly90ZXN0YXBpLWx5end0Lmxuemhvbmd3YW5nLm5ldDozMTAzMC9hdXRoZW50aWNhdGU/Y29kZT0nICsgY29kZSwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhc3luYzogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YVR5cGU6ICdqc29uJywvL+acjeWKoeWZqOi/lOWbnmpzb27moLzlvI/mlbDmja5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2dldCcsLy9IVFRQ6K+35rGC57G75Z6LXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHsnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKHJkYXRhLCB0ZXh0U3RhdHVzLCB4aHIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB4c2Vzc2lvbmlkID0geGhyLmdldFJlc3BvbnNlSGVhZGVyKCdYLVNFU1NJT04tSUQnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJGxlbWl4LmRhdGEuc3RvcmFnZS5zZXRMb2NhbFN0b3JhZ2Uoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHhzZXNzaW9uaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5OiAnc2Vzc2lvbklkJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFvLmhlYWRlcnNbJ1gtU0VTU0lPTi1JRCddID0geHNlc3Npb25pZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FyZCA9IHJkYXRhLmNhcmRfbm9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGh0dHAuYWpheCh1cmwsIGRhdGFvKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24gKHhociwgdHlwZSwgZXJyb3JUaHJvd24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIOivt+axguWksei0pVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGVycm9yUmVzID0gSlNPTi5wYXJzZSh4aHIucmVzcG9uc2UpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBodHRwLmFsZXJ0KGVycm9yUmVzLm1lc3NhZ2UsICcnLCAn5oiR55+l6YGT5LqGJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBlcnJvck9sZCh4aHIsIHR5cGUsIGVycm9yVGhyb3duKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGh0dHAuYWpheCh1cmwsIGRhdGFvKVxyXG4gICAgfWNhdGNoIChlKSB7XHJcbiAgICAgICAgZG9jdW1lbnQuYm9keS5pbm5lckhUTUwgPSBKU09OLnBhcnNlKGUpICsgZS5tZXNzYWdlKClcclxuXHJcbiAgICB9XHJcbn1cclxuZXhwb3J0IGRlZmF1bHQgaHR0cCIsImltcG9ydCBodHRwIGZyb20gJy4vaHR0cCdcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICAgIGh0dHBcclxufSJdLCJzb3VyY2VSb290IjoiIn0=